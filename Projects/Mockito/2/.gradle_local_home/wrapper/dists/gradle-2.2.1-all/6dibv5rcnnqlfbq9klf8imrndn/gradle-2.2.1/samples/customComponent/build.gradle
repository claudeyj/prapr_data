
/*
 * Copyright 2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.model.Model
import org.gradle.model.Mutate
import org.gradle.model.RuleSource
import org.gradle.model.collection.CollectionBuilder

interface SampleLibrary extends LibrarySpec { }
class DefaultSampleLibrary extends BaseComponentSpec implements SampleLibrary {}

interface SampleBinary extends BinarySpec { }
class DefaultSampleBinary extends BaseBinarySpec implements SampleBinary {}

class SampleExtension {
    List<String> libraryNames = new ArrayList<String>()
    List<String> targets = new ArrayList<String>()
}

class MySamplePlugin implements Plugin<Project> {
    void apply(Project project) {
    }

    @RuleSource
    static class Rules {
        @Model("mySample")
        SampleExtension createSampleExtension() {
             return new SampleExtension()
        }

        @ComponentType
        void register(ComponentTypeBuilder<SampleLibrary> builder) {
            builder.defaultImplementation(DefaultSampleLibrary)
        }

        @Mutate
        void createSampleLibraryComponents(CollectionBuilder<SampleLibrary> sampleLibraries, SampleExtension sampleExtension) {
            for (String libraryName : sampleExtension.getLibraryNames()) {
                sampleLibraries.create(libraryName)
            }
        }

        @BinaryType
        void register(BinaryTypeBuilder<SampleBinary> builder) {
            builder.defaultImplementation(DefaultSampleBinary)
        }

        @ComponentBinaries
        void createBinariesForSampleLibrary(CollectionBuilder<SampleBinary> binaries, SampleLibrary library, SampleExtension sample) {
            sample.targets.each{ target ->
                binaries.create("${library.name}${target}Binary")
            }
        }

        @BinaryTasks
        void createBinaryTasks(CollectionBuilder<Task> tasks, SampleBinary binary) {
            tasks.create("${binary.getName()}CreationTask", CreateBinary){
                it.content = binary.getName();
                it.outputFile = new File(it.project.buildDir, "binaries/${binary.name}.svg")
            }
        }
    }
}


class CreateBinary extends DefaultTask{
    @Input String content;
    @OutputFile File outputFile;

    @TaskAction void paint(){
        outputFile.write("""
             <svg xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"
             xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" height="100%" viewBox="16 8 400 100" preserveAspectRatio="xMidYMid meet" zoomAndPan="disable" onload="">
             <text x="50" y="70" id="e1_texte" style="fill: #000000; font-family: Verdana; font-size: 28.5px; stroke: #008000; font-style: normal; font-weight: bold;">$content</text></svg>
             """.stripIndent());

    }
}

apply plugin:MySamplePlugin

model {
    mySample {
        libraryNames << "core"
        libraryNames << "feature"

        targets << "Windows"
        targets << "Unix"
        targets << "Osx"
    }
}


