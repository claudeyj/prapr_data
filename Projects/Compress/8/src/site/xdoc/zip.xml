<?xml version="1.0"?>
<!--

   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

-->
<document>
  <properties>
    <title>Commons Compress ZIP package</title>
    <author email="dev@commons.apache.org">Commons Documentation Team</author>
  </properties>
  <body>
    <section name="The ZIP package">

      <p>The ZIP package provides features not found
        in <code>java.util.zip</code>:</p>

      <ul>
        <li>Support for encodings other than UTF-8 for filenames and
          comments.</li>
        <li>Access to internal and external attributes (which are used
          to store Unix permission by some zip implementations).</li>
        <li>Structured support for extra fields.</li>
      </ul>

      <p>In addition to the information stored
        in <code>ArchiveEntry</code> a <code>ZipArchiveEntry</code>
        stores internal and external attributes as well as extra
        fields which may contain information like Unix permissions,
        information about the platform they've been created on, their
        last modification time and an optional comment.</p>

      <subsection name="ZipArchiveInputStream vs ZipFile">

        <p>ZIP archives store a archive entries in sequence and
          contain a registry of all entries at the very end of the
          archive.  It is acceptable for an archive to contain several
          entries of the same name and have the registry (called the
          central directory) decide which entry is actually to be used
          (if any).</p>

        <p>In addition the ZIP format stores certain information only
          inside the central directory but not together with the entry
          itself, this is:</p>

        <ul>
          <li>internal and external attributes</li>
          <li>different or additional extra fields</li>
        </ul>

        <p>This means the ZIP format cannot really be parsed
          correctly while reading a non-seekable stream, which is what
          <code>ZipArchiveInputStream</code> is forced to do.  As a
          result <code>ZipArchiveInputStream</code></p>
        <ul>
          <li>may return entries that are not part of the central
            directory at all and shouldn't be considered part of the
            archive.</li>
          <li>may return several entries with the same name.</li>
          <li>will not return internal or external attributes.</li>
          <li>may return incomplete extra field data.</li>
        </ul>

        <p><code>ZipArchiveInputStream</code> shares these limitations
          with <code>java.util.zip.ZipInputStream</code>.</p>

        <p><code>ZipFile</code> is able to read the central directory
          first and provide correct and complete information on any
          ZIP archive.</p>

        <p>ZIP archives know a feature called the data descriptor
          which is a way to store an entry's length after the entry's
          data.  This can only work reliably if the size information
          can be taken from the central directory or the data itself
          can signal it is complete, which is true for data that is
          compressed using the DEFLATED compression algorithm.</p>

        <p><code>ZipFile</code> has access to the central directory
          and can extract entries using the data descriptor reliably.
          The same is true for <code>ZipArchiveInputStream</code> as
          long as the entry is DEFLATED.  For STORED
          entries <code>ZipArchiveInputStream</code> can try to read
          ahead until if finds the next entry, but this approach is
          not safe and has to be enabled by a constructor argument
          explicitly.</p>

        <p>If possible, you should always prefer <code>ZipFile</code>
          over <code>ZipArchiveInputStream</code>.</p>

      </subsection>

      <subsection name="Extra Fields">

        <p>Inside a ZIP archive, additional data can be attached to
          each entry.  The <code>java.util.zip.ZipEntry</code> class
          provides access to this via the <code>get/setExtra</code>
          methods as arrays of <code>byte</code>s.</p>

        <p>Actually the extra data is supposed to be more structured
          than that and Compress' ZIP package provides access to the
          structured data as <code>ExtraField</code> instances.  Only
          a subset of all defined extra field formats is supported by
          the package, any other extra field will be stored
          as <code>UnrecognizedExtraField</code>.</p>

        <p>Prior to version 1.1 of this library trying to read an
          archive with extra fields that didn't follow the recommended
          structure for those fields would cause Compress to throw an
          exception.  Starting with version 1.1 these extra fields
          will now be read
          as <code>UnparseableExtraFieldData</code>.</p>

      </subsection>

      <subsection name="Encoding" id="encoding">

        <p>Traditionally the ZIP archive format uses CodePage 437 as
          encoding for file name, which is not sufficient for many
          international character sets.</p>

        <p>Over time different archivers have chosen different ways to
          work around the limitation - the <code>java.util.zip</code>
          packages simply uses UTF-8 as its encoding for example.</p>

        <p>Ant has been offering the encoding attribute of the zip and
          unzip task as a way to explicitly specify the encoding to
          use (or expect) since Ant 1.4.  It defaults to the
          platform's default encoding for zip and UTF-8 for jar and
          other jar-like tasks (war, ear, ...) as well as the unzip
          family of tasks.</p>

        <p>More recent versions of the ZIP specification introduce
          something called the &quot;language encoding flag&quot;
          which can be used to signal that a file name has been
          encoded using UTF-8.  All ZIP-archives written by Compress
          will set this flag, if the encoding has been set to UTF-8.
          Our interoperability tests with existing archivers didn't
          show any ill effects (in fact, most archivers ignore the
          flag to date), but you can turn off the "language encoding
          flag" by setting the attribute
          <code>useLanguageEncodingFlag</code> to <code>false</code> on the
          <code>ZipArchiveOutputStream</code> if you should encounter
          problems.</p>

        <p>The <code>ZipFile</code>
          and <code>ZipArchiveInputStream</code> classes will
          recognize the language encoding flag and ignore the encoding
          set in the constructor if it has been found.</p>

        <p>The InfoZIP developers have introduced new ZIP extra fields
          that can be used to add an additional UTF-8 encoded file
          name to the entry's metadata.  Most archivers ignore these
          extra fields.  <code>ZipArchiveOutputStream</code> supports
          an option <code>createUnicodeExtraFields</code> which makes
          it write these extra fields either for all entries
          ("always") or only those whose name cannot be encoded using
          the specified encoding (not-encodeable), it defaults to
          "never" since the extra fields create bigger archives.</p>

        <p>The fallbackToUTF8 attribute
          of <code>ZipArchiveOutputStream</code> can be used to create
          archives that use the specified encoding in the majority of
          cases but UTF-8 and the language encoding flag for filenames
          that cannot be encoded using the specified encoding.</p>

        <p>The <code>ZipFile</code>
          and <code>ZipArchiveInputStream</code> classes recognize the
          Unicode extra fields by default and read the file name
          information from them, unless you set the constructor parameter
          <code>scanForUnicodeExtraFields</code> to false.</p>

        <h4>Recommendations for Interoperability</h4>

        <p>The optimal setting of flags depends on the archivers you
          expect as consumers/producers of the ZIP archives.  Below
          are some test results which may be superseded with later
          versions of each tool.</p>

        <ul>
          <li>The java.util.zip package used by the jar executable or
            to read jars from your CLASSPATH reads and writes UTF-8
            names, it doesn't set or recognize any flags or Unicode
            extra fields.</li>

          <li>7Zip writes CodePage 437 by default but uses UTF-8 and
            the language encoding flag when writing entries that
            cannot be encoded as CodePage 437 (similar to the zip task
            with fallbacktoUTF8 set to true).  It recognizes the
            language encoding flag when reading and ignores the
            Unicode extra fields.</li>

          <li>WinZIP writes CodePage 437 and uses Unicode extra fields
            by default.  It recognizes the Unicode extra field and the
            language encoding flag when reading.</li>

          <li>Windows' "compressed folder" feature doesn't recognize
            any flag or extra field and creates archives using the
            platforms default encoding - and expects archives to be in
            that encoding when reading them.</li>

          <li>InfoZIP based tools can recognize and write both, it is
            a compile time option and depends on the platform so your
            mileage may vary.</li>

          <li>PKWARE zip tools recognize both and prefer the language
            encoding flag.  They create archives using CodePage 437 if
            possible and UTF-8 plus the language encoding flag for
            file names that cannot be encoded as CodePage 437.</li>
        </ul>
        
        <p>So, what to do?</p>

        <p>If you are creating jars, then java.util.zip is your main
          consumer.  We recommend you set the encoding to UTF-8 and
          keep the language encoding flag enabled.  The flag won't
          help or hurt java.util.zip but archivers that support it
          will show the correct file names.</p>

        <p>For maximum interop it is probably best to set the encoding
          to UTF-8, enable the language encoding flag and create
          Unicode extra fields when writing ZIPs.  Such archives
          should be extracted correctly by java.util.zip, 7Zip,
          WinZIP, PKWARE tools and most likely InfoZIP tools.  They
          will be unusable with Windows' "compressed folders" feature
          and bigger than archives without the Unicode extra fields,
          though.</p>

        <p>If Windows' "compressed folders" is your primary consumer,
          then your best option is to explicitly set the encoding to
          the target platform.  You may want to enable creation of
          Unicode extra fields so the tools that support them will
          extract the file names correctly.</p>
      </subsection>

    </section>
  </body>
</document>
