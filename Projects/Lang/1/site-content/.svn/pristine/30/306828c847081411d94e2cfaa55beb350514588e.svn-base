<!DOCTYPE html>
<!--
 | Generated by Apache Maven Doxia at 07 April 2020
 | Rendered using Apache Maven Fluido Skin 1.3.0
-->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <meta name="author" content="Commons Documentation Team" />
                <meta name="Date-Revision-yyyymmdd" content="20200407" />
            <meta http-equiv="Content-Language" content="en" />
        <title>Lang &#x2013; What's new in Commons Lang 3.0?</title>

    <link rel="stylesheet" href="./css/bootstrap.min.css" type="text/css" />
    <link rel="stylesheet" href="./css/site.css" type="text/css" />
    <link rel="stylesheet" href="./css/print.css" media="print" />

    <script type="text/javascript" src="./js/jquery.min.js"></script>
    <script type="text/javascript" src="./js/bootstrap.min.js"></script>
    <script type="text/javascript" src="./js/prettify.min.js"></script>
    <script type="text/javascript" src="./js/site.js"></script>

    
      </head>

  <body class="composite">
                      <a href="https://commons.apache.org/" id="bannerLeft" title="Apache Commons logo">
                                                                    <img class="logo-left" src="      ./images/commons-logo.png
"  alt="Apache Commons logo"/>
              </a>
                                          <a href="index.html" id="bannerRight">
                                                                          <img class="logo-right" src="    images/logo.png
"  alt="Commons Lang"/>
              </a>
          <div class="clear"></div>

    <div class="navbar">
      <div class="navbar-inner">
        <div class="container-fluid">
          <a class="brand" href="https://commons.apache.org/proper/commons-lang/">Apache Commons Lang &trade;</a>
          <ul class="nav">      
                    
          <li id="publishDate">Last Published: 07 April 2020</li>
    <li class="divider">|</li> <li id="projectVersion">Version: 3.10</li>
  </ul>
          <div class="pull-right">  <ul class="nav">
            <li>
                  <a href="http://www.apachecon.com/" class="externalLink" title="ApacheCon">
    ApacheCon</a>
      </li>
          <li>
                  <a href="http://www.apache.org" class="externalLink" title="Apache">
    Apache</a>
      </li>
          <li>
                  <a href="../../" title="Commons">
    Commons</a>
      </li>
    </ul>
</div>
        </div>
      </div>
    </div>

    <div class="container-fluid">
      <table class="layout-table">
        <tr>
          <td class="sidebar">
            <div class="well sidebar-nav">
                    <ul class="nav nav-list">
                           <li class="nav-header">Lang</li>
                                        <li class="none">
                  <a href="index.html" title="Overview">
    Overview</a>
          </li>
                             <li class="none">
                  <a href="download_lang.cgi" title="Download">
    Download</a>
          </li>
                             <li class="none">
                  <a href="userguide.html" title="Users guide">
    Users guide</a>
          </li>
                             <li class="none">
                  <a href="release-history.html" title="Release History">
    Release History</a>
          </li>
                             <li class="none">
                  <a href="javadocs/api-release/index.html" title="Javadoc (Latest release)">
    Javadoc (Latest release)</a>
          </li>
                 </ul>
      <ul class="nav nav-list">
                                 <li class="nav-header"><i class="icon-cog"></i>Development</li>
                                        <li class="none">
                  <a href="building.html" title="Building">
    Building</a>
          </li>
                             <li class="none">
                  <a href="mail-lists.html" title="Mailing Lists">
    Mailing Lists</a>
          </li>
                             <li class="none">
                  <a href="issue-tracking.html" title="Issue Tracking">
    Issue Tracking</a>
          </li>
                             <li class="none">
                  <a href="proposal.html" title="Proposal">
    Proposal</a>
          </li>
                             <li class="none">
                  <a href="developerguide.html" title="Developer guide">
    Developer guide</a>
          </li>
                             <li class="none">
                  <a href="scm.html" title="Source Repository">
    Source Repository</a>
          </li>
                             <li class="none">
                  <a href="apidocs/index.html" title="Javadoc (GIT latest)">
    Javadoc (GIT latest)</a>
          </li>
                 </ul>
      <ul class="nav nav-list">
                                 <li class="nav-header"><i class="icon-info-sign"></i>Project Documentation</li>
                                                                                                                                                                                                                                                                              <li class="collapsed">
                  <a href="project-info.html" title="Project Information">
    Project Information</a>
                    </li>
                                                                                                                                                                                                                                                                                                                                                             <li class="collapsed">
                  <a href="project-reports.html" title="Project Reports">
    Project Reports</a>
                    </li>
                 </ul>
      <ul class="nav nav-list">
                           <li class="nav-header">Commons</li>
                                        <li class="none">
                  <a href="../../" title="Home">
    Home</a>
          </li>
                             <li class="none">
                  <a href="http://www.apache.org/licenses/" class="externalLink" title="License">
    License</a>
          </li>
                                                                               <li class="collapsed">
                  <a href="../../components.html" title="Components">
    Components</a>
                    </li>
                                                                               <li class="collapsed">
                  <a href="../../sandbox/index.html" title="Sandbox">
    Sandbox</a>
                    </li>
                                                                               <li class="collapsed">
                  <a href="../../dormant/index.html" title="Dormant">
    Dormant</a>
                    </li>
                 </ul>
      <ul class="nav nav-list">
                           <li class="nav-header">General Information</li>
                                        <li class="none">
                  <a href="../../security.html" title="Security">
    Security</a>
          </li>
                             <li class="none">
                  <a href="../../volunteering.html" title="Volunteering">
    Volunteering</a>
          </li>
                             <li class="none">
                  <a href="../../patches.html" title="Contributing Patches">
    Contributing Patches</a>
          </li>
                             <li class="none">
                  <a href="../../building.html" title="Building Components">
    Building Components</a>
          </li>
                             <li class="none">
                  <a href="../../commons-parent-pom.html" title="Commons Parent Pom">
    Commons Parent Pom</a>
          </li>
                             <li class="none">
                  <a href="../../build-plugin/index.html" title="Commons Build Plugin">
    Commons Build Plugin</a>
          </li>
                             <li class="none">
                  <a href="../../releases/index.html" title="Releasing Components">
    Releasing Components</a>
          </li>
                             <li class="none">
                  <a href="http://wiki.apache.org/commons/FrontPage" class="externalLink" title="Wiki">
    Wiki</a>
          </li>
                 </ul>
      <ul class="nav nav-list">
                           <li class="nav-header">ASF</li>
                                        <li class="none">
                  <a href="http://www.apache.org/foundation/how-it-works.html" class="externalLink" title="How the ASF works">
    How the ASF works</a>
          </li>
                             <li class="none">
                  <a href="http://www.apache.org/foundation/getinvolved.html" class="externalLink" title="Get Involved">
    Get Involved</a>
          </li>
                             <li class="none">
                  <a href="http://www.apache.org/dev/" class="externalLink" title="Developer Resources">
    Developer Resources</a>
          </li>
                             <li class="none">
                  <a href="http://www.apache.org/foundation/policies/conduct.html" class="externalLink" title="Code of Conduct">
    Code of Conduct</a>
          </li>
                             <li class="none">
                  <a href="http://www.apache.org/foundation/sponsorship.html" class="externalLink" title="Sponsorship">
    Sponsorship</a>
          </li>
                             <li class="none">
                  <a href="http://www.apache.org/foundation/thanks.html" class="externalLink" title="Thanks">
    Thanks</a>
          </li>
                 </ul>
              </div>
            <div id="poweredBy">
                                                                                                                    <a href="http://www.apache.org/events/current-event.html" title="ApacheCon" class="builtBy">
        <img class="builtBy"  alt="ApacheCon" src="http://www.apache.org/events/current-event-125x125.png"    />
      </a>
                                                                                                    <a href="http://maven.apache.org/" title="Maven" class="builtBy">
        <img class="builtBy"  alt="Maven" src="http://maven.apache.org/images/logos/maven-feather.png"    />
      </a>
                      </div>
          </td>
          <td class="content">
                                                                          
 

<section>
<h2><a name="What.27s_new_in_Commons_Lang_3.0.3F"></a>What's new in Commons Lang 3.0?</h2>

<p>Commons Lang 3.0 is out, and the obvious question is: <i>&quot;So what? What's changed?&quot;</i>.</p>
<section>
<h2><a name="The_big_story"></a>The big story</h2>

<p>Lang is now Java 5 based. We've generified the API, moved certain APIs to support varargs and thrown out any features 
that are now supported by Java itself. We've removed the deprecated parts of the API and have also removed some features that 
were deemed weak or unnecessary. All of this means that Lang 3.0 is not backwards compatible. </p>

<p>To that end we have changed the package name, allowing Lang 3.0 to sit side-by-side with your previous version of Lang without any bad side effects. The new package name is the exciting and original org.apache.commons.lang3. This also forces you to recompile your code, making sure the compiler can let you know if a backwards incompatibility affects you. </p>

<p>As you'd expect, there are also new features, enhancements and bugs fixed. </p>
</section>

<section>
<h2><a name="Migrating_from_2.x"></a>Migrating from 2.x</h2>
<section>
<h3><a name="Java_code"></a>Java code</h3>

<p>Despite the label of backwards incompatibility, in the vast majority of cases the simple addition of a '3' to an import statement will suffice for your migration. </p><br />

<p>Change: import org.apache.commons.lang -&gt; import org.apache.commons.lang3</p>
</section><section>
<h3><a name="Maven"></a>Maven</h3>

<p>groupId: commons-lang -&gt; org.apache.commons</p>

<p>artifactId: commons-lang -&gt; commons-lang3</p>
</section></section>

<section>
<h2><a name="What.27s_gone.3F"></a>What's gone?</h2>
<section>
<h3><a name="Enum_package"></a>Enum package</h3>

<p>Java 5 provided enums out of the box, therefore we dispensed with both the deprecated enum package, 
and the enums package. Instead you should migrate over to the standard Java enum. An EnumUtils class has been born 
from the ashes of the old code, focused on providing additional functionality to the standard Java enum API. </p>
</section><section>
<h3><a name="NestedExceptions"></a>NestedExceptions</h3>

<p>In Java 1.4, the notion that all Throwables could be linked to a cause was introduced. In Lang we 
had provided a NestedException framework to support the same feature, and now that we're jumping from Java 1.3 to 
Java 5 we are remove this feature. The deprecation section below covers one part of ExceptionUtils that remains until 
we are on Java 6, where the last remaining parts of the JDK appear to have embraced the new cause API. </p>
</section><section>
<h3><a name="JVMRandom"></a>JVMRandom</h3>

<p>This class was introduced in Lang 2.0 to support a Random object built around the system seed. This 
proved to be both an uncommon use case and one with bugs and so was dropped. </p>
</section><section>
<h3><a name="StringEscapeUtils.escapeSql"></a>StringEscapeUtils.escapeSql</h3>

<p>This was a misleading method, only handling the simplest of possible SQL cases. As SQL is not Lang's focus, it didn't make sense to maintain this method. </p>
</section><section>
<h3><a name="a.2AExceptions_removed"></a>*Exceptions removed</h3>

<p>Various Exception classes were removed - the lesson in defining more semantically relevant exception classes is that you can keep on coming up with more and more new classes. Simpler to focus on using the main JDK classes. </p>
</section><section>
<h3><a name="math..2ARange"></a>math.*Range</h3>

<p>The various Range classes in the math package were removed in favour of a new generic Range class. </p>
</section><section>
<h3><a name="Previous_Deprecations"></a>Previous Deprecations</h3>

<p>All deprecated fields/methods/classes - with a new major version, all of the previously deprecated parts of the API could finally go away. </p>

<p>If you feel that something was unfairly taken away, please feel free to contact the list. In many cases the possibility exists to reintroduce code. </p>
</section></section>
<section>
<h2><a name="Deprecations"></a>Deprecations</h2>

<p>The lone deprecation in 3.0 is that of the notion of 'cause method names' in ExceptionUtils. In Java 5.0 it is still just about 
needed to handle some JDK classes that have not been migrated to the getCause API. In Java 6.0 things appear to be resolved and 
we will remove the related methods in Lang 4.0. </p>
</section>
<section>
<h2><a name="New_packages"></a>New packages</h2>

<p>Two new packages have shown up. org.apache.commons.lang3.concurrent, which unsurprisingly provides support classes for 
multi-threaded programming, and org.apache.commons.lang3.text.translate, which provides a pluggable API for text transformation. </p>

<section>
<h3><a name="concurrent..2A"></a>concurrent.*</h3>

<p>Java 1.5 adds a great bunch of functionality related to multi-threaded programming
below the java.util.concurrent package. Commons Lang 3.0 provides
some additional classes in this area which are intended to further simplify the
development of concurrent applications.</p>

<p>The classes located in the concurrent package can be roughly
divided into the following categories:
</p>
<ul>

<li>Utility classes</li>

<li>Initializer classes</li>
</ul>


<p>Classes of the former category provide some basic functionality a developer
typically has to implement manually again and again. Examples are a configurable
ThreadFactory implementation or utility methods for the handling of
ExecutionExceptions thrown by Java's executor service framework.</p>

<p>Initializer classes deal with the creation of objects in a multi-threaded
environment. There are several variants of initializer implementations serving
different purposes. For instance, there are a couple of concrete initializers
supporting lazy initialization of objects in a safe way. Another example is
BackgroundInitializer which allows pushing the creation of an
expensive object to a background thread while the application can continue with
the execution of other tasks. Here is an example of the usage of BackgroundInitializer
which creates an EntityManagerFactory object:</p>

<div>
<pre>
    public class DBInitializer extends BackgroundInitialize&lt;EntityManagerFactory&gt; {
        protected EntityManagerFactory initialize() {
            return Persistence.createEntityManagerFactory(&quot;mypersistenceunit&quot;);
        }
    }
</pre></div>

<p>An application creates an instance of the DBInitializer class
and calls its start() method. When it later needs access to the
EntityManagerFactory created by the initializer it calls the
get() method; get() returns the object produced by the
initializer if it is already available or blocks if necessary until initialization
is complete. Alternatively a convenience method of the ConcurrentUtils
class can be used to obtain the object from the initializer which hides the
checked exception declared by get():</p>

<div>
<pre>
    DBInitializer init = new DBInitializer();
    init.start();

    // now do some other stuff

    EntityManagerFactory factory = ConcurrentUtils.initializeUnchecked(init);
</pre></div>

<p>Comprehensive documentation about the concurrent package is
available in the <a href="userguide.html#lang.concurrent.">user guide</a>.</p>
</section><section>
<h3><a name="text.translate..2A"></a>text.translate.*</h3>

<p>A common complaint with StringEscapeUtils was that its escapeXml and escapeHtml methods should not be escaping non-ASCII characters. We agreed and made the change while creating a modular approach to let users define their own escaping constructs. </p>

<p>The simplest way to show this is to look at the code that implements escapeXml:</p>

<div>
<pre>
    return ESCAPE_XML.translate(input);
</pre></div>

<p>Very simple. Maybe a bit too very simple, let's look a bit deeper. </p>

<div>
<pre>
    public static final CharSequenceTranslator ESCAPE_XML =
        new AggregateTranslator(
            new LookupTranslator(EntityArrays.BASIC_ESCAPE()),
            new LookupTranslator(EntityArrays.APOS_ESCAPE())
        );
</pre></div>

<p>Here we see that ESCAPE_XML is a 'CharSequenceTranslator', which in turn is made up of two lookup translators based on the basic XML escapes and another to escape apostrophes. This shows one way to combine translators. Another can be shown by looking at the example to achieve the old XML escaping functionality (escaping non-ASCII): </p>

<div>
<pre>
          StringEscapeUtils.ESCAPE_XML.with( NumericEntityEscaper.between(0x7f, Integer.MAX_VALUE) );
</pre></div>

<p>That takes the standard Commons Lang provided escape functionality, and adds on another translation layer. Another JIRA requested option was to also escape non-printable ASCII, this is now achievable with a modification of the above: </p>

<div>
<pre>
          StringEscapeUtils.ESCAPE_XML.with(
              new AggregateTranslator(
                  NumericEntityEscaper.between(0, 31),
                  NumericEntityEscaper.between(0x80, Integer.MAX_VALUE)
              )
          )
</pre></div>

<p>You can also implement your own translators (be they for escaping, unescaping or some aspect of your own). See the CharSequenceTranslator and its CodePointTranslator helper subclass for details - primarily a case of implementing the translate(CharSequence, int, Writer);int method. </p>
</section></section>
<section>
<h2><a name="New_classes_.2B_methods"></a>New classes + methods</h2>

<p>There are many new classes and methods in Lang 3.0 - the most complete way to see the changes is via this <a href="lang2-lang3-clirr-report.html">Lang2 to Lang3 Clirr report</a>. </p>

<p>Here is a summary of the new classes: </p>

<ul>

<li>AnnotationUtils</li>

<li>CharSequenceUtils</li>

<li>EnumUtils</li>

<li>JavaVersion - used in SystemUtils</li>

<li>Pair, ImmutablePair and MutablePair</li>

<li>Range - replaces the old math.*Range classes</li>

<li>builder.Builder</li>

<li>exception.ContextedException</li>

<li>exception.CloneFailedException</li>

<li>reflect.ConstructorUtils</li>

<li>reflect.FieldUtils</li>

<li>reflect.MethodUtils</li>

<li>reflect.TypeUtils</li>

<li>text.WordUtils</li>
</ul>
</section>

<section>
<h2><a name="Bugfixes.3F"></a>Bugfixes?</h2>

<p>See the <a href="changes-report.html#a3.0">3.0 changes report</a> for the list of fixed bugs and other enhancements. </p>
</section>

<section>
<h2><a name="Other_Notable_Changes"></a>Other Notable Changes</h2>

<ul>

<li>StringUtils.isAlpha, isNumeric and isAlphanumeric now all return false when passed an empty String. Previously they returned true. </li>

<li>SystemUtils.isJavaVersionAtLeast now relies on the java.specification.version and not the java.version System property. </li>

<li>StringEscapeUtils.escapeXml and escapeHtml no longer escape high value Unicode characters by default. The text.translate package is available to recreate the old behavior. </li>

<li>Validate utility methods have been changed and genericized to return the
validated argument where possible, to allow for inline use. </li>

<li>Validate utility methods handle validity violations arising from
null values by throwing NullPointerExceptions.
This better aligns with standard JDK behavior (lang <i>is</i> intended to
complement java.lang, after all). Users upgrading from v2.x may
need to adjust to this change. See Validate#isTrue() for a
general-purpose mechanism to raise an IllegalArgumentException.</li>
</ul>
</section>



</section>



                      </td>
        </tr>
      </table>
    </div>

    <div class="footer">
      <p>Copyright &copy;                    2001-2020
                      <a href="https://www.apache.org/">The Apache Software Foundation</a>.
            All Rights Reserved.</p>
                                        
<div class="center">Apache Commons, Apache Commons Lang, Apache, the Apache feather logo, and the Apache Commons project logos are trademarks of The Apache Software Foundation.
      All other marks mentioned may be trademarks or registered trademarks of their respective owners.</div>
                  </div>
  </body>

</html>