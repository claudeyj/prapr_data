Comparing source compatibility of commons-lang3-3.10.jar against commons-lang3-3.9.jar
***  MODIFIED ENUM: PUBLIC STATIC FINAL org.apache.commons.lang3.arch.Processor$Arch  (compatible)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW METHOD: PUBLIC(+) java.lang.String getLabel()
***  MODIFIED CLASS: PUBLIC org.apache.commons.lang3.ArrayUtils  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.lang.reflect.Type[] EMPTY_TYPE_ARRAY
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.lang.reflect.Method[] EMPTY_METHOD_ARRAY
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.lang.Throwable[] EMPTY_THROWABLE_ARRAY
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) java.lang.reflect.Field[] EMPTY_FIELD_ARRAY
	+++  NEW METHOD: PUBLIC(+) STATIC(+) boolean[] addFirst(boolean[], boolean)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) byte[] addFirst(byte[], byte)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) char[] addFirst(char[], char)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) double[] addFirst(double[], double)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) float[] addFirst(float[], float)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) int[] addFirst(int[], int)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) long[] addFirst(long[], long)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) short[] addFirst(short[], short)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.Object[] addFirst(java.lang.Object[], java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(boolean[], boolean)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(boolean[], boolean, int)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(byte[], byte)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(byte[], byte, int)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(char[], char)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(char[], char, int)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(double[], double)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(double[], double, double)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(double[], double, int)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(double[], double, int, double)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(float[], float)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(float[], float, int)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(int[], int)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(int[], int, int)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(long[], long)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(long[], long, int)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(java.lang.Object[], java.lang.Object)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(java.lang.Object[], java.lang.Object, int)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(short[], short)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.BitSet indexesOf(short[], short, int)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) boolean[] removeAllOccurrences(boolean[], boolean)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) byte[] removeAllOccurrences(byte[], byte)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) char[] removeAllOccurrences(char[], char)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) double[] removeAllOccurrences(double[], double)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) float[] removeAllOccurrences(float[], float)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) int[] removeAllOccurrences(int[], int)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) long[] removeAllOccurrences(long[], long)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) short[] removeAllOccurrences(short[], short)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.Object[] removeAllOccurrences(java.lang.Object[], java.lang.Object)
===  UNCHANGED INTERFACE: PUBLIC ABSTRACT org.apache.commons.lang3.builder.Builder  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW ANNOTATION: java.lang.FunctionalInterface
===  UNCHANGED INTERFACE: PUBLIC ABSTRACT org.apache.commons.lang3.builder.Diffable  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW ANNOTATION: java.lang.FunctionalInterface
***  MODIFIED CLASS: PUBLIC org.apache.commons.lang3.builder.DiffResult  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW METHOD: PUBLIC(+) java.lang.Object getLeft()
	+++  NEW METHOD: PUBLIC(+) java.lang.Object getRight()
+++  NEW CLASS: PUBLIC(+) org.apache.commons.lang3.ClassLoaderUtils  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) ClassLoaderUtils()
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.String toString(java.lang.ClassLoader)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.String toString(java.net.URLClassLoader)
+++  NEW CLASS: PUBLIC(+) org.apache.commons.lang3.compare.ComparableUtils  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.function.Predicate between(java.lang.Comparable, java.lang.Comparable)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.function.Predicate betweenExclusive(java.lang.Comparable, java.lang.Comparable)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.function.Predicate ge(java.lang.Comparable)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.function.Predicate gt(java.lang.Comparable)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder is(java.lang.Comparable)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.function.Predicate le(java.lang.Comparable)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.function.Predicate lt(java.lang.Comparable)
+++  NEW CLASS: PUBLIC(+) STATIC(+) org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW METHOD: PUBLIC(+) boolean between(java.lang.Comparable, java.lang.Comparable)
	+++  NEW METHOD: PUBLIC(+) boolean betweenExclusive(java.lang.Comparable, java.lang.Comparable)
	+++  NEW METHOD: PUBLIC(+) boolean equalTo(java.lang.Comparable)
	+++  NEW METHOD: PUBLIC(+) boolean greaterThan(java.lang.Comparable)
	+++  NEW METHOD: PUBLIC(+) boolean greaterThanOrEqualTo(java.lang.Comparable)
	+++  NEW METHOD: PUBLIC(+) boolean lessThan(java.lang.Comparable)
	+++  NEW METHOD: PUBLIC(+) boolean lessThanOrEqualTo(java.lang.Comparable)
+++  NEW CLASS: PUBLIC(+) FINAL(+) org.apache.commons.lang3.compare.ObjectToStringComparator  (compatible)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: java.util.Comparator
	+++  NEW INTERFACE: java.io.Serializable
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.commons.lang3.compare.ObjectToStringComparator INSTANCE
	+++  NEW CONSTRUCTOR: PUBLIC(+) ObjectToStringComparator()
	+++  NEW METHOD: PUBLIC(+) int compare(java.lang.Object, java.lang.Object)
***  MODIFIED CLASS: PUBLIC org.apache.commons.lang3.EnumUtils  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.Enum getEnum(java.lang.Class, java.lang.String, java.lang.Enum)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.Enum getEnumIgnoreCase(java.lang.Class, java.lang.String, java.lang.Enum)
***  MODIFIED CLASS: PUBLIC org.apache.commons.lang3.exception.ExceptionUtils  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.Throwable throwableOfThrowable(java.lang.Throwable, java.lang.Class)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.Throwable throwableOfThrowable(java.lang.Throwable, java.lang.Class, int)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.Throwable throwableOfType(java.lang.Throwable, java.lang.Class)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.Throwable throwableOfType(java.lang.Throwable, java.lang.Class, int)
***  MODIFIED CLASS: PUBLIC org.apache.commons.lang3.Functions  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.function.BiConsumer asBiConsumer(org.apache.commons.lang3.Functions$FailableBiConsumer)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.function.BiFunction asBiFunction(org.apache.commons.lang3.Functions$FailableBiFunction)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.function.BiPredicate asBiPredicate(org.apache.commons.lang3.Functions$FailableBiPredicate)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.concurrent.Callable asCallable(org.apache.commons.lang3.Functions$FailableCallable)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.function.Consumer asConsumer(org.apache.commons.lang3.Functions$FailableConsumer)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.function.Function asFunction(org.apache.commons.lang3.Functions$FailableFunction)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.function.Predicate asPredicate(org.apache.commons.lang3.Functions$FailablePredicate)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.Runnable asRunnable(org.apache.commons.lang3.Functions$FailableRunnable)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.function.Supplier asSupplier(org.apache.commons.lang3.Functions$FailableSupplier)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.Object get(org.apache.commons.lang3.Functions$FailableSupplier)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.commons.lang3.Streams$FailableStream stream(java.util.stream.Stream)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.commons.lang3.Streams$FailableStream stream(java.util.Collection)
+++  NEW INTERFACE: PUBLIC(+) ABSTRACT(+) STATIC(+) org.apache.commons.lang3.Functions$FailableSupplier  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW METHOD: PUBLIC(+) ABSTRACT(+) java.lang.Object get()
		+++  NEW EXCEPTION: java.lang.Throwable
	+++  NEW ANNOTATION: java.lang.FunctionalInterface
***  MODIFIED CLASS: PUBLIC org.apache.commons.lang3.NotImplementedException  (compatible)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW CONSTRUCTOR: PUBLIC(+) NotImplementedException()
***  MODIFIED CLASS: PUBLIC org.apache.commons.lang3.ObjectUtils  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.Object getFirstNonNull(java.util.function.Supplier[])
		+++  NEW ANNOTATION: java.lang.SafeVarargs
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.Object getIfNull(java.lang.Object, java.util.function.Supplier)
***  MODIFIED CLASS: PUBLIC FINAL org.apache.commons.lang3.Range  (compatible)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW METHOD: PUBLIC(+) java.lang.Object fit(java.lang.Object)
===  UNCHANGED INTERFACE: PUBLIC ABSTRACT org.apache.commons.lang3.reflect.Typed  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW ANNOTATION: java.lang.FunctionalInterface
+++  NEW CLASS: PUBLIC(+) org.apache.commons.lang3.Streams  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) Streams()
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.commons.lang3.Streams$FailableStream stream(java.util.stream.Stream)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.commons.lang3.Streams$FailableStream stream(java.util.Collection)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.util.stream.Collector toArray(java.lang.Class)
+++  NEW CLASS: PUBLIC(+) STATIC(+) org.apache.commons.lang3.Streams$ArrayCollector  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW INTERFACE: java.util.stream.Collector
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) Streams$ArrayCollector(java.lang.Class)
	+++  NEW METHOD: PUBLIC(+) java.util.function.BiConsumer accumulator()
	+++  NEW METHOD: PUBLIC(+) java.util.Set characteristics()
	+++  NEW METHOD: PUBLIC(+) java.util.function.BinaryOperator combiner()
	+++  NEW METHOD: PUBLIC(+) java.util.function.Function finisher()
	+++  NEW METHOD: PUBLIC(+) java.util.function.Supplier supplier()
+++  NEW CLASS: PUBLIC(+) STATIC(+) org.apache.commons.lang3.Streams$FailableStream  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW CONSTRUCTOR: PUBLIC(+) Streams$FailableStream(java.util.stream.Stream)
	+++  NEW METHOD: PUBLIC(+) boolean allMatch(org.apache.commons.lang3.Functions$FailablePredicate)
	+++  NEW METHOD: PUBLIC(+) boolean anyMatch(org.apache.commons.lang3.Functions$FailablePredicate)
	+++  NEW METHOD: PROTECTED(+) void assertNotTerminated()
	+++  NEW METHOD: PUBLIC(+) java.lang.Object collect(java.util.stream.Collector)
	+++  NEW METHOD: PUBLIC(+) java.lang.Object collect(java.util.function.Supplier, java.util.function.BiConsumer, java.util.function.BiConsumer)
	+++  NEW METHOD: PUBLIC(+) org.apache.commons.lang3.Streams$FailableStream filter(org.apache.commons.lang3.Functions$FailablePredicate)
	+++  NEW METHOD: PUBLIC(+) void forEach(org.apache.commons.lang3.Functions$FailableConsumer)
	+++  NEW METHOD: PROTECTED(+) void makeTerminated()
	+++  NEW METHOD: PUBLIC(+) org.apache.commons.lang3.Streams$FailableStream map(org.apache.commons.lang3.Functions$FailableFunction)
	+++  NEW METHOD: PUBLIC(+) java.lang.Object reduce(java.lang.Object, java.util.function.BinaryOperator)
	+++  NEW METHOD: PUBLIC(+) java.util.stream.Stream stream()
***  MODIFIED CLASS: PUBLIC org.apache.commons.lang3.StringUtils  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW METHOD: PUBLIC(+) STATIC(+) byte[] getBytes(java.lang.String, java.nio.charset.Charset)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) byte[] getBytes(java.lang.String, java.lang.String)
		+++  NEW EXCEPTION: java.io.UnsupportedEncodingException
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.CharSequence getIfBlank(java.lang.CharSequence, java.util.function.Supplier)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.CharSequence getIfEmpty(java.lang.CharSequence, java.util.function.Supplier)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.String toRootLowerCase(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.String toRootUpperCase(java.lang.String)
***  MODIFIED CLASS: PUBLIC org.apache.commons.lang3.SystemUtils  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) boolean IS_JAVA_14
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) boolean IS_JAVA_15
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.String getUserName()
	+++  NEW METHOD: PUBLIC(+) STATIC(+) java.lang.String getUserName(java.lang.String)
+++  NEW CLASS: PUBLIC(+) org.apache.commons.lang3.time.CalendarUtils  (not serializable)
	+++  CLASS FILE FORMAT VERSION: 52.0 <- n.a.
	+++  NEW SUPERCLASS: java.lang.Object
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.commons.lang3.time.CalendarUtils INSTANCE
	+++  NEW CONSTRUCTOR: PUBLIC(+) CalendarUtils(java.util.Calendar)
	+++  NEW METHOD: PUBLIC(+) int getDayOfMonth()
	+++  NEW METHOD: PUBLIC(+) int getMonth()
	+++  NEW METHOD: PUBLIC(+) int getYear()
***  MODIFIED CLASS: PUBLIC org.apache.commons.lang3.time.StopWatch  (not serializable)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW CONSTRUCTOR: PUBLIC(+) StopWatch(java.lang.String)
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.commons.lang3.time.StopWatch create()
	+++  NEW METHOD: PUBLIC(+) java.lang.String formatSplitTime()
	+++  NEW METHOD: PUBLIC(+) java.lang.String formatTime()
	+++  NEW METHOD: PUBLIC(+) java.lang.String getMessage()
***  MODIFIED CLASS: PUBLIC FINAL org.apache.commons.lang3.tuple.ImmutablePair  (compatible)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.commons.lang3.tuple.ImmutablePair[] EMPTY_ARRAY
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.commons.lang3.tuple.ImmutablePair[] emptyArray()
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.commons.lang3.tuple.ImmutablePair of(java.util.Map$Entry)
***  MODIFIED CLASS: PUBLIC FINAL org.apache.commons.lang3.tuple.ImmutableTriple  (compatible)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.commons.lang3.tuple.ImmutableTriple[] EMPTY_ARRAY
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.commons.lang3.tuple.ImmutableTriple[] emptyArray()
***  MODIFIED CLASS: PUBLIC org.apache.commons.lang3.tuple.MutablePair  (compatible)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.commons.lang3.tuple.MutablePair[] EMPTY_ARRAY
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.commons.lang3.tuple.MutablePair[] emptyArray()
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.commons.lang3.tuple.MutablePair of(java.util.Map$Entry)
***  MODIFIED CLASS: PUBLIC org.apache.commons.lang3.tuple.MutableTriple  (compatible)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.commons.lang3.tuple.MutableTriple[] EMPTY_ARRAY
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.commons.lang3.tuple.MutableTriple[] emptyArray()
***  MODIFIED CLASS: PUBLIC ABSTRACT org.apache.commons.lang3.tuple.Pair  (compatible)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.commons.lang3.tuple.Pair[] EMPTY_ARRAY
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.commons.lang3.tuple.Pair[] emptyArray()
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.commons.lang3.tuple.Pair of(java.util.Map$Entry)
***  MODIFIED CLASS: PUBLIC ABSTRACT org.apache.commons.lang3.tuple.Triple  (compatible)
	===  CLASS FILE FORMAT VERSION: 52.0 <- 52.0
	+++  NEW FIELD: PUBLIC(+) STATIC(+) FINAL(+) org.apache.commons.lang3.tuple.Triple[] EMPTY_ARRAY
	+++  NEW METHOD: PUBLIC(+) STATIC(+) org.apache.commons.lang3.tuple.Triple[] emptyArray()
