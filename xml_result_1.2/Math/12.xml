<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>11</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>local x is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>22</index><block>55</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>local xa is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>23</index><block>55</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>local xa is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>26</index><block>56</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>local xa is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2307</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>58</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>local xa is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2316</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>79</index><block>60</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>local xa is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>113</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>local xa is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>57ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>114</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>local xb is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2307</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>40</index><block>58</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>local xa is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2316</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>79</index><block>60</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>local xa is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>113</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>local xa is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>114</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>local xb is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2296</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>7</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>11</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>22</index><block>55</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local xa is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>23</index><block>55</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local xa is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>26</index><block>56</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local xa is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2307</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>40</index><block>58</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>access to local xa is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2316</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>79</index><block>60</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>access to local xa is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>109</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>access to local quadrant is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>113</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>access to local xa is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>114</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>access to local xb is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2296</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>7</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>11</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>22</index><block>55</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local xa is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>23</index><block>55</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local xa is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>26</index><block>56</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local xa is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2307</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>40</index><block>58</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>access to local xa is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2316</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>79</index><block>60</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>access to local xa is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>109</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>access to local quadrant is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>113</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>access to local xa is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>114</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>access to local xb is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2296</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>7</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>11</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>22</index><block>55</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local xa is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>23</index><block>55</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local xa is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>26</index><block>56</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local xa is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2307</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>40</index><block>58</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>access to local xa is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2316</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>79</index><block>60</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>access to local xa is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>109</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>access to local quadrant is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>113</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>access to local xa is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>114</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>access to local xb is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2296</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>7</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>11</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>22</index><block>55</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local xa is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>23</index><block>55</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local xa is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>26</index><block>56</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local xa is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2307</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>40</index><block>58</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>access to local xa is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2316</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>79</index><block>60</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>access to local xa is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>109</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>access to local quadrant is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>113</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>access to local xa is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>114</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>access to local xb is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2296</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>7</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>11</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>22</index><block>55</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local xa is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>23</index><block>55</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local xa is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>26</index><block>56</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>access to local xa is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>95ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2307</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>40</index><block>58</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>access to local xa is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2316</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>79</index><block>60</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>access to local xa is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>109</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>access to local quadrant is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>113</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>access to local xa is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>114</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>access to local xb is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>115</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>replaced call to cosQ with a call to log</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>115</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>replaced call to cosQ with a call to pow</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>115</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>replaced call to cosQ with a call to sinQ</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>115</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>replaced call to cosQ with a call to atan2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>115</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>replaced call to cosQ with a call to nextAfter</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>115</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>replaced call to cosQ with a call to min</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>115</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>replaced call to cosQ with a call to max</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>115</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>replaced call to cosQ with a call to hypot</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>115</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>replaced call to cosQ with a call to IEEEremainder</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>115</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>replaced call to cosQ with a call to copySign</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>115</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>replaced call to org/apache/commons/math3/util/FastMath::cosQ with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>14</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2307</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>43</index><block>58</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>55ms</time></test></testsExecutionTime><patchExecutionTime>148ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2316</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>82</index><block>60</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2293</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>3</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>12</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>27</index><block>56</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>Substituted Infinity with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2306</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>36</index><block>58</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2307</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>41</index><block>58</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>Substituted 3294198.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2316</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>80</index><block>60</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>Substituted 1.5707963267948966 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><block>55</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><block>56</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2307</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><block>58</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2316</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>82</index><block>60</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>115</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>removed call to org/apache/commons/math3/util/FastMath::cosQ</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>116</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>replaced double return with 0.0d for org/apache/commons/math3/util/FastMath::cos</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>25</index><block>55</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>29</index><block>56</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>25</index><block>55</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>29</index><block>56</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>14</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2307</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>43</index><block>58</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2316</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>82</index><block>60</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>14</index><block>54</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1015346165133619</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>62ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2307</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>43</index><block>58</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2316</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>82</index><block>60</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>116</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10680282817633566</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math3/util/FastMath::cos</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_0</mutator><index>110</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>RemoveSwitch 0 mutation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_1</mutator><index>110</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>RemoveSwitch 1 mutation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_2</mutator><index>110</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>RemoveSwitch 2 mutation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_3</mutator><index>110</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>RemoveSwitch 3 mutation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cos</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.SwitchMutator</mutator><index>110</index><block>61</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.10188534162169867</suspValue><description>Switch mutation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1844</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>12</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local xa is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>17</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local a is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>20</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local xa is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>26</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local b is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>28</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local xb is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>31</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local b is replaced by local xa to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>34</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local a is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>35</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local b is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1844</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>12</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local xa is replaced by local pi2a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>17</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local a is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>20</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local xa is replaced by local pi2a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>26</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local b is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>28</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local xb is replaced by local pi2a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>31</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local b is replaced by local xb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>34</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local a is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>35</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local b is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1844</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>12</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local xa is replaced by local pi2b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>17</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local a is replaced by local pi2a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>20</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local xa is replaced by local pi2b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>26</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local b is replaced by local pi2a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>28</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local xb is replaced by local pi2b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>31</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local b is replaced by local pi2a to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>34</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local a is replaced by local pi2a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>35</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local b is replaced by local pi2a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>17</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local a is replaced by local pi2b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>20</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local xa is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>26</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local b is replaced by local pi2b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>28</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local xb is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>31</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local b is replaced by local pi2b to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>34</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local a is replaced by local pi2b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>35</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local b is replaced by local pi2b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>26</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>28</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local xb is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>31</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local b is replaced by local a to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>51ms</time></test></testsExecutionTime><patchExecutionTime>153ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>34</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>35</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1844</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>12</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local xa is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>17</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local a is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>20</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local xa is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>26</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local b is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>28</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local xb is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>34</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local a is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>35</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local b is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1844</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>12</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local xa is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>17</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local a is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>20</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local xa is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>26</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local b is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>94ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>28</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local xb is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>34</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local a is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>35</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local b is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1844</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>12</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local xa is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>17</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local a is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>20</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local xa is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>26</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local b is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>53ms</time></test></testsExecutionTime><patchExecutionTime>222ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>28</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local xb is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>34</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local a is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>35</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local b is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1844</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>12</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local xa is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>17</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local a is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>20</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local xa is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>26</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local b is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>49ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>28</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local xb is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>34</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local a is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>35</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local b is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1844</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>12</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local xa is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>17</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local a is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>20</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local xa is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>26</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local b is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>66ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>28</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local xb is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>34</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local a is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>35</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>access to local b is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>36</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>replaced call to sinQ with a call to log</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>36</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>replaced call to sinQ with a call to pow</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>36</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>replaced call to sinQ with a call to cosQ</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>36</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>replaced call to sinQ with a call to atan2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>36</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>replaced call to sinQ with a call to nextAfter</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>36</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>replaced call to sinQ with a call to min</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>36</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>replaced call to sinQ with a call to max</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>36</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>replaced call to sinQ with a call to hypot</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>36</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>replaced call to sinQ with a call to IEEEremainder</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>36</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>replaced call to sinQ with a call to copySign</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>36</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>replaced call to org/apache/commons/math3/util/FastMath::sinQ with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1841</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>3</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>Substituted 1.5707963267948966 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1842</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>Substituted 6.123233995736766E-17 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1844</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>11</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>Substituted 1.5707963267948966 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>18</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>Substituted 1.5707963267948966 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>27</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>Substituted 6.123233995736766E-17 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>22</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>removed negation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>31ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1844</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>19</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1845</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>29</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1846</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>30</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>36</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>removed call to org/apache/commons/math3/util/FastMath::sinQ</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>37</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>replaced double return with 0.0d for org/apache/commons/math3/util/FastMath::cosQ</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>cosQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1848</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>37</index><block>36</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0899235973995271</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math3/util/FastMath::cosQ</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>replaced call to log(D[D)D with a call to log(D)D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>replaced call to log(D[D)D with a call to log(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>replaced call to log(D[D)D with a call to log(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>replaced call to log(D[D)D with a call to log(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>replaced call to log(D[D)D with a call to log(D)D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>replaced call to log(D[D)D with a call to log(D)D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>replaced call to log(D[D)D with a call to log(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>replaced call to log(D[D)D with a call to log(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>replaced call to log(D[D)D with a call to log(D)D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>63ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>replaced call to log(D[D)D with a call to log(D)D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>replaced call to log(D[D)D with a call to log(D)D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>replaced call to log(D[D)D with a call to log(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>1</block><killingTests/><suspValue>0.06150692760785472</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>1</block><killingTests/><suspValue>0.06150692760785472</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>1</block><killingTests/><suspValue>0.06150692760785472</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>5</index><block>1</block><killingTests/><suspValue>0.06150692760785472</suspValue><description>replaced call to log with a call to expm1</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>5</index><block>1</block><killingTests/><suspValue>0.06150692760785472</suspValue><description>replaced call to org/apache/commons/math3/util/FastMath::log with argument</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.util.FastMathTest.testLogSpecialCases(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>removed call to org/apache/commons/math3/util/FastMath::log</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testLogSpecialCases(org.apache.commons.math3.util.FastMathTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.util.FastMathTest.testLogSpecialCases(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>replaced double return with 0.0d for org/apache/commons/math3/util/FastMath::log</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testLogSpecialCases(org.apache.commons.math3.util.FastMathTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06150692760785472</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math3/util/FastMath::log</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1244</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>394</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local hiPrec is replaced by local lnm to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>690</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1324</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>701</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1325</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>706</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1327</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>714</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>717</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>723</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>52ms</time></test></testsExecutionTime><patchExecutionTime>203ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1329</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>726</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1330</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>731</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1332</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>742</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>745</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>754</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1334</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>757</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1335</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>762</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1337</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>772</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>775</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>783</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1339</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>786</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>791</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>799</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>802</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>808</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1344</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>811</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>816</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1347</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>821</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local hiPrec is replaced by local lnm to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>690</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1324</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>701</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1325</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>706</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1327</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>714</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>717</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>723</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>88ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1329</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>726</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1330</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>731</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>66ms</time></test></testsExecutionTime><patchExecutionTime>84ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1332</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>742</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>745</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>754</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1334</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>757</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1335</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>762</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1337</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>772</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>775</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>783</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1339</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>786</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>791</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>799</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>73ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>802</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>808</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1344</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>811</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>816</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>690</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnza to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1324</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>701</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnza to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1325</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>706</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnza to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1327</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>714</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnza to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>717</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnza to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>723</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnza to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>54ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1329</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>726</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnza to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1330</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>731</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnza to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1332</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>742</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnza to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>745</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnza to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>754</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnza to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1334</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>757</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnza to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1335</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>762</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnza to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1337</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>772</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnza to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>775</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnza to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>783</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnza to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1339</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>786</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnza to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>791</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnza to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>799</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnza to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>49ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>802</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnza to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>808</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnza to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1344</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>811</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnza to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>816</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnza to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>690</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnzb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1324</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>701</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnzb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1325</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>706</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnzb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1327</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>714</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnzb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>717</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnzb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>723</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnzb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1329</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>726</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnzb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1330</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>731</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnzb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1332</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>742</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnzb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>745</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnzb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>754</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnzb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1334</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>757</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnzb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1335</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>762</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnzb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1337</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>772</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnzb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>775</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnzb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>783</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnzb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1339</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>786</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnzb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>791</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnzb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>799</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnzb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>802</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnzb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>808</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnzb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1344</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>811</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local lnzb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>816</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local lnzb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>690</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1324</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>701</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1325</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>706</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1327</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>714</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local a to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>717</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>723</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local a to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1329</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>726</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1330</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>731</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1332</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>742</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local a to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>745</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>754</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local a to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1334</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>757</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1335</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>762</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1337</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>772</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local a to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>775</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>783</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local a to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1339</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>786</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>791</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>799</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local a to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>802</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>24ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>808</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local a to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1344</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>811</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>816</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>690</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1324</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>701</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1325</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>706</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1327</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>714</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local b to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>717</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>723</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local b to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1329</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>726</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1330</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>731</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1332</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>742</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local b to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>745</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>754</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local b to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1334</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>757</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1335</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>762</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1337</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>772</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local b to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>775</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>783</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local b to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1339</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>786</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>791</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>799</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local b to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>802</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>808</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local b to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1344</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>811</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local c is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>816</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>local d is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05420604937128976</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1133</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>13</index><block>4</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>18</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05423261445466404</suspValue><description>access to local bits is replaced by access to field HEX_40000000</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>24</index><block>5</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>25</index><block>5</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1147</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>50</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>70</index><block>12</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>access to local bits is replaced by access to field HEX_40000000</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>79</index><block>12</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>access to local bits is replaced by access to field HEX_40000000</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>131</index><block>18</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>access to local exp is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>134</index><block>19</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>access to local exp is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>138</index><block>20</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>142</index><block>21</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>146</index><block>22</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>access to local hiPrec is replaced by access to field SINE_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>362</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local bits is replaced by access to field HEX_40000000</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>372</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local bits is replaced by access to field HEX_40000000</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>377</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local bits is replaced by access to field HEX_40000000</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1244</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>394</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local hiPrec is replaced by access to field SINE_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>672</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local exp is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>690</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1324</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>701</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1325</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>706</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>717</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1329</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>726</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1330</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>731</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1332</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>738</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local exp is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>745</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>749</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local exp is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1334</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>757</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1335</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>762</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>775</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1339</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>786</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>791</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>802</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>52ms</time></test></testsExecutionTime><patchExecutionTime>163ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1344</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>811</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>816</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1347</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>821</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local hiPrec is replaced by access to field SINE_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05420604937128976</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1133</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>13</index><block>4</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>18</index><block>4</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>access to local bits is replaced by access to field MASK_30BITS</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>24</index><block>5</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>25</index><block>5</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1147</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>50</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>70</index><block>12</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>access to local bits is replaced by access to field MASK_30BITS</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>79</index><block>12</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>access to local bits is replaced by access to field MASK_30BITS</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>131</index><block>18</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>access to local exp is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>56ms</time></test></testsExecutionTime><patchExecutionTime>180ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>134</index><block>19</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>access to local exp is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>138</index><block>20</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>142</index><block>21</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>67ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>146</index><block>22</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>access to local hiPrec is replaced by access to field SINE_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>362</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local bits is replaced by access to field MASK_30BITS</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>372</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local bits is replaced by access to field MASK_30BITS</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>377</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local bits is replaced by access to field MASK_30BITS</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1244</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>394</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local hiPrec is replaced by access to field SINE_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>672</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local exp is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>690</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1324</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>701</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1325</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>706</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>717</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1329</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>726</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1330</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>731</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1332</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>738</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local exp is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>745</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>749</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local exp is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1334</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>757</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1335</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>762</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>775</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1339</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>786</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>791</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>802</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>100ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1344</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>811</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>71ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>816</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1347</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>821</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local hiPrec is replaced by access to field SINE_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05420604937128976</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1133</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>13</index><block>4</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>24</index><block>5</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>25</index><block>5</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1147</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>50</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>131</index><block>18</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>access to local exp is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>134</index><block>19</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>access to local exp is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>138</index><block>20</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>142</index><block>21</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>146</index><block>22</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>access to local hiPrec is replaced by access to field COSINE_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1244</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>394</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local hiPrec is replaced by access to field COSINE_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>672</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local exp is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>690</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1324</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>701</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1325</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>706</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>717</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1329</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>726</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1330</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>731</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1332</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>738</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local exp is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>745</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>749</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local exp is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1334</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>757</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1335</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>762</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>775</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1339</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>786</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>791</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>802</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>66ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1344</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>811</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>79ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>816</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>48ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1347</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>821</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local hiPrec is replaced by access to field COSINE_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05420604937128976</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1133</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>13</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>54ms</time></test></testsExecutionTime><patchExecutionTime>162ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>24</index><block>5</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>25</index><block>5</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1147</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>50</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>131</index><block>18</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>access to local exp is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>134</index><block>19</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>access to local exp is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>138</index><block>20</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>142</index><block>21</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>146</index><block>22</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>access to local hiPrec is replaced by access to field COSINE_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1244</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>394</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local hiPrec is replaced by access to field COSINE_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>672</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local exp is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>690</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1324</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>701</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>51ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>84ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1325</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>706</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>62ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>717</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1329</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>726</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1330</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>731</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1332</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>738</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local exp is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>745</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>749</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local exp is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1334</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>757</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1335</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>762</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>775</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1339</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>786</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>791</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>802</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1344</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>811</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>816</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1347</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>821</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local hiPrec is replaced by access to field COSINE_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05420604937128976</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1133</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>13</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>54ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>24</index><block>5</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>25</index><block>5</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1147</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>50</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05423261445466404</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>131</index><block>18</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>access to local exp is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>134</index><block>19</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>access to local exp is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>49ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>138</index><block>20</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>142</index><block>21</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>146</index><block>22</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>access to local hiPrec is replaced by access to field TANGENT_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1244</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>394</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local hiPrec is replaced by access to field TANGENT_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>672</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local exp is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>690</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1324</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>701</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1325</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>706</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>717</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1329</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>726</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1330</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>731</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1332</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>738</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local exp is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>745</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>749</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local exp is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1334</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>757</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1335</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>762</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>775</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1339</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>786</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>791</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>802</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1344</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>811</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local c is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>48ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>816</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local d is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1347</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>821</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>access to local hiPrec is replaced by access to field TANGENT_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1133</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>14</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05423261445466404</suspValue><description>replaced call to doubleToLongBits with a call to doubleToRawLongBits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>141</index><block>20</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>145</index><block>21</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05420604937128976</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>19</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05423261445466404</suspValue><description>Substituted -9223372036854775808 with -9223372036854775807</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>21</index><block>4</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>Substituted 0 with 1</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>51</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05423261445466404</suspValue><description>Substituted Infinity with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>71</index><block>12</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>Substituted 52 with 53</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>74</index><block>12</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>Substituted 1023 with 1024</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>80</index><block>12</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>Substituted 9218868437227405312 with 9218868437227405313</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>82</index><block>12</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>132</index><block>18</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>Substituted -1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>139</index><block>20</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>Substituted 1.01 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>143</index><block>21</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>Substituted 0.99 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>59ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>363</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Substituted 4499201580859392 with 4499201580859393</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>365</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Substituted 42 with 43</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>373</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Substituted 4398046511103 with 4398046511104</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>376</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Substituted 4.503599627370496E15 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>378</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Substituted 4499201580859392 with 4499201580859393</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>386</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>390</index><block>26</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>621</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Substituted -0.16624882440418567 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1298</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>628</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Substituted 0.19999954120254515 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1299</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>636</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Substituted -0.2499999997677497 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1300</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>644</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Substituted 0.3333333333332802 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>652</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Substituted -0.5 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>100ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1302</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>660</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>34ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1320</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>671</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Substituted 0.6931470632553101 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>678</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1322</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>684</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>694</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1332</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>737</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Substituted 1.1730463525082348E-7 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>748</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Substituted 1.1730463525082348E-7 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1337</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>769</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>53ms</time></test></testsExecutionTime><patchExecutionTime>147ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>779</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>697</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>removed negation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>88ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>722</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>removed negation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>55ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>753</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>removed negation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>782</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>removed negation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>807</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>removed negation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>20</index><block>4</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>72</index><block>12</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>Replaced Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>75</index><block>12</block><killingTests/><suspValue>0.054285862002546564</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>81</index><block>12</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>364</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>366</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>374</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>379</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>381</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>49ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>382</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1298</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>627</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1298</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>629</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1299</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>635</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1299</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>637</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1300</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>643</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>49ms</time></test></testsExecutionTime><patchExecutionTime>150ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1300</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>645</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>651</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>653</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1302</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>659</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1302</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>661</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>667</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.062217101683825514</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1320</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>674</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1322</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>686</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>692</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>41ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>17ms</time></test></testsExecutionTime><patchExecutionTime>163ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>696</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1325</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>707</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1327</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>713</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>719</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>721</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1330</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>732</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1332</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>740</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1332</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>741</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>747</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>52ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>751</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1333</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>752</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1335</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>763</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1337</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>771</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>777</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>781</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1340</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>792</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1342</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>798</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>804</index><block>30</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1343</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>806</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1345</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>817</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>52ms</time></test></testsExecutionTime><patchExecutionTime>153ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1352</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>839</index><block>31</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05420604937128976</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>4</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>negated conditional</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><block>5</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>negated conditional</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>53</index><block>9</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>negated conditional</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>84</index><block>12</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>133</index><block>18</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>135</index><block>19</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>141</index><block>20</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>145</index><block>21</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>147</index><block>22</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>395</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1347</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>822</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>14</index><block>4</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>removed call to java/lang/Double::doubleToLongBits</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>361</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>removed call to org/apache/commons/math3/util/FastMath$lnMant::access$400</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1352</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>840</index><block>31</block><killingTests>org.apache.commons.math3.util.FastMathTest.testLogSpecialCases(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>replaced double return with 0.0d for org/apache/commons/math3/util/FastMath::log</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testLogSpecialCases(org.apache.commons.math3.util.FastMathTest)</name><time>184ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>218ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05420604937128976</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>23</index><block>4</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>27</index><block>5</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05423261445466404</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>53</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05423261445466404</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>84</index><block>12</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>133</index><block>18</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>135</index><block>19</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>147</index><block>22</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>395</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1347</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>822</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>95ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05420604937128976</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>23</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05423261445466404</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>27</index><block>5</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>53</index><block>9</block><killingTests/><suspValue>0.05423261445466404</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>84</index><block>12</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>133</index><block>18</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>135</index><block>19</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054285862002546564</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>147</index><block>22</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>395</index><block>26</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1347</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>822</index><block>30</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>141</index><block>20</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>145</index><block>21</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>141</index><block>20</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>145</index><block>21</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06044898998137665</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>log</mutatedMethod><methodDescription>(D[D)D</methodDescription><lineNumber>1352</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>840</index><block>31</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054663038780925266</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math3/util/FastMath::log</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>14</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>18</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>21</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>22</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>26</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>29</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>30</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>34</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>37</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>38</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>91ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1706</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>43</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>13</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>115ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>14</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x2 is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>18</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>21</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>22</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x2 is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>26</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>29</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>30</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x2 is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>34</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>37</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>35ms</time></test></testsExecutionTime><patchExecutionTime>58ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>38</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x2 is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>40</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>52ms</time></test></testsExecutionTime><patchExecutionTime>165ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1706</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>43</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1698</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1698</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>13</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>14</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>21</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>22</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>29</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>30</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>37</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>38</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1706</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>43</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1698</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1698</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>13</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>14</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>21</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>22</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>29</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>30</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>37</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>38</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1706</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>43</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1698</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>81ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1698</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>4</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>13</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>14</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>21</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>22</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>29</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>30</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>61ms</time></test></testsExecutionTime><patchExecutionTime>90ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>37</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>38</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1706</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>43</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1698</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1698</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>4</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>13</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>14</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>21</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>22</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>29</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>30</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>37</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>38</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1706</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>43</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1698</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1698</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>4</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>13</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>14</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>21</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>22</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>29</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>30</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>37</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>52ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>38</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1706</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>43</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1700</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Substituted 2.479773539153719E-5 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>16</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Substituted -0.0013888888689039883 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>24</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Substituted 0.041666666666621166 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>32</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Substituted -0.49999999999999994 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1698</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>5</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>15</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1701</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1702</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1703</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>33</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>38ms</time></test></testsExecutionTime><patchExecutionTime>61ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1704</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>39</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1706</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>44</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>replaced double return with 0.0d for org/apache/commons/math3/util/FastMath::polyCosine</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>78ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polyCosine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1706</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>44</index><block>33</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math3/util/FastMath::polyCosine</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>14</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>18</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>98ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>21</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>22</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>26</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>29</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>30</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>34</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>37</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>38</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x is replaced by local x2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>42</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1688</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>45</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>13</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>14</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x2 is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>18</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>55ms</time></test></testsExecutionTime><patchExecutionTime>168ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>21</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>22</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x2 is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>26</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>29</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>30</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x2 is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>34</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>37</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>38</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x2 is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>40</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local x is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>42</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1688</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>45</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>local p is replaced by local x2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1678</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1678</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>13</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>14</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>21</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>22</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>29</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>30</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>37</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>38</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>40</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1688</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>45</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1678</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1678</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>13</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>14</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>21</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>22</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>32ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>29</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>30</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>37</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>38</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>40</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1688</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>45</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1678</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1678</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>4</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>13</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>14</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>21</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>22</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>29</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>30</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>37</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>38</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>40</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1688</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>45</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1678</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1678</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>4</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>13</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>14</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>21</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>22</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>29</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>30</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>37</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>38</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>40</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1688</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>45</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1678</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1678</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>4</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>13</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>14</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>21</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>22</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>29</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>30</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>37</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>38</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x2 is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>40</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1688</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>45</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>access to local p is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1680</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Substituted 2.7553817452272217E-6 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>53ms</time></test></testsExecutionTime><patchExecutionTime>152ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>16</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Substituted -1.9841269659586505E-4 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>70ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>24</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Substituted 0.008333333333329196 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>32</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Substituted -0.16666666666666666 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1678</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>5</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>15</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1681</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1682</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1683</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>33</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>39</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1686</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>41</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>55ms</time></test></testsExecutionTime><patchExecutionTime>154ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1688</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>46</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>replaced double return with 0.0d for org/apache/commons/math3/util/FastMath::polySine</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>polySine</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>1688</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>46</index><block>32</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08564440043098775</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math3/util/FastMath::polySine</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2232</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>15</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>local x is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>59ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2232</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>16</index><block>37</block><killingTests/><suspValue>0.088159064907635</suspValue><description>local xb is replaced by local x to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>19</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>local x is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>34</index><block>38</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>local xb is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>59</index><block>42</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>local xb is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>54ms</time></test></testsExecutionTime><patchExecutionTime>164ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>60</index><block>42</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>local xb is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>63</index><block>43</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>local xb is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>73</index><block>45</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>local xb is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2261</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>112</index><block>47</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>local xb is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>156</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>local xb is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>157</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>local xa is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>19</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>local x is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>34</index><block>38</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>local xb is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>66ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>59</index><block>42</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>local xb is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>438ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>51ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>619ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>60</index><block>42</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>local xb is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>151ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>181ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>63</index><block>43</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>local xb is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>73</index><block>45</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>local xb is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2261</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>112</index><block>47</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>local xb is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>156</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>local xb is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>24ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>157</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>local xa is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2232</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>15</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>19</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>34</index><block>38</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>access to local xb is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>59</index><block>42</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>access to local xb is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>128ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>171ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>60</index><block>42</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>access to local xb is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>417ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>448ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>63</index><block>43</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>access to local xb is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>73</index><block>45</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>access to local xb is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>88ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2261</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>112</index><block>47</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>access to local xb is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>142</index><block>48</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>access to local negative is replaced by access to field RECOMPUTE_TABLES_AT_RUNTIME</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>152</index><block>49</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>access to local quadrant is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>130ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>175ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>156</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>access to local xb is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>157</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>access to local xa is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2232</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>15</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>19</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>34</index><block>38</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>access to local xb is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>59</index><block>42</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>access to local xb is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>126ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>53ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>210ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>60</index><block>42</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>access to local xb is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>148ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>195ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>63</index><block>43</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>access to local xb is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>73</index><block>45</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>access to local xb is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>52ms</time></test></testsExecutionTime><patchExecutionTime>161ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2261</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>112</index><block>47</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>access to local xb is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>152</index><block>49</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>access to local quadrant is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>139ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>180ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>156</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>access to local xb is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>157</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>access to local xa is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2232</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>15</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>19</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>access to local x is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>34</index><block>38</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>access to local xb is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>59</index><block>42</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>access to local xb is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>154ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>185ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>60</index><block>42</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>access to local xb is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>159ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>201ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>63</index><block>43</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>access to local xb is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>73</index><block>45</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>access to local xb is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2261</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>112</index><block>47</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>access to local xb is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>152</index><block>49</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>access to local quadrant is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>141ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>181ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>156</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>access to local xb is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>157</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>access to local xa is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2232</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>15</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>19</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>34</index><block>38</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>access to local xb is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>59</index><block>42</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>access to local xb is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>515ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>543ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>60</index><block>42</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>access to local xb is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>143ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>193ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>63</index><block>43</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>access to local xb is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>73</index><block>45</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>access to local xb is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2261</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>112</index><block>47</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>access to local xb is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>152</index><block>49</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>access to local quadrant is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>453ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>483ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>156</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>access to local xb is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>157</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>access to local xa is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2232</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>15</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>19</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>34</index><block>38</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>access to local xb is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>59</index><block>42</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>access to local xb is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>144ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>190ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>60</index><block>42</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>access to local xb is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>140ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>189ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>63</index><block>43</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>access to local xb is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>73</index><block>45</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>access to local xb is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2261</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>112</index><block>47</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>access to local xb is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>152</index><block>49</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>access to local quadrant is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>112ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>151ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>156</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>access to local xb is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>157</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>access to local xa is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>158</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>replaced call to sinQ with a call to log</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>158</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>replaced call to sinQ with a call to pow</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>158</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>replaced call to sinQ with a call to cosQ</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>158</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>replaced call to sinQ with a call to atan2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>158</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>replaced call to sinQ with a call to nextAfter</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>158</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>replaced call to sinQ with a call to min</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>158</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>replaced call to sinQ with a call to max</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>158</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>replaced call to sinQ with a call to hypot</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>158</index><block>49</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>replaced call to sinQ with a call to IEEEremainder</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>419ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>472ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>158</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>replaced call to sinQ with a call to copySign</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>158</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>replaced call to org/apache/commons/math3/util/FastMath::sinQ with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>22</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>76</index><block>45</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>115</index><block>47</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2226</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>3</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2227</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>11</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>48ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>20</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>35</index><block>38</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>64</index><block>43</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>Substituted Infinity with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>74</index><block>45</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>Substituted 3294198.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>113</index><block>47</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>Substituted 1.5707963267948966 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><block>38</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><block>42</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>105ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>131ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>66</index><block>43</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>520ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>556ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>76</index><block>45</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>115</index><block>47</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>143</index><block>48</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>158</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>removed call to org/apache/commons/math3/util/FastMath::sinQ</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>159</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>replaced double return with 0.0d for org/apache/commons/math3/util/FastMath::sin</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>37</index><block>38</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>62</index><block>42</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>187ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>241ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>66</index><block>43</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>143</index><block>48</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>37</index><block>38</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>62</index><block>42</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>66ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>66</index><block>43</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08827348295047495</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>438ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>490ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>143</index><block>48</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>22</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>76</index><block>45</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>115</index><block>47</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>22</index><block>37</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.088159064907635</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>36ms</time></test></testsExecutionTime><patchExecutionTime>118ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>76</index><block>45</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>115</index><block>47</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2274</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>159</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.0959294219086619</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math3/util/FastMath::sin</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_0</mutator><index>153</index><block>49</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>RemoveSwitch 0 mutation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>331ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>367ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_1</mutator><index>153</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>RemoveSwitch 1 mutation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_2</mutator><index>153</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>RemoveSwitch 2 mutation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveSwitchMutator_3</mutator><index>153</index><block>49</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>RemoveSwitch 3 mutation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sin</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>2272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.SwitchMutator</mutator><index>153</index><block>49</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08873565094161139</suspValue><description>Switch mutation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>476ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>500ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>13</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to EIGHTHS with an access to SINE_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1721</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>20</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to SINE_TABLE_A with an access to SINE_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1722</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>26</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to SINE_TABLE_B with an access to SINE_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1723</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>32</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to COSINE_TABLE_A with an access to SINE_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>38</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to COSINE_TABLE_B with an access to SINE_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>13</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to EIGHTHS with an access to SINE_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1721</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>20</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to SINE_TABLE_A with an access to COSINE_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1722</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>26</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to SINE_TABLE_B with an access to COSINE_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1723</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>32</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to COSINE_TABLE_A with an access to SINE_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>38</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to COSINE_TABLE_B with an access to SINE_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>13</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to EIGHTHS with an access to COSINE_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1721</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>20</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to SINE_TABLE_A with an access to COSINE_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1722</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>26</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to SINE_TABLE_B with an access to COSINE_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1723</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>32</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to COSINE_TABLE_A with an access to COSINE_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>38</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to COSINE_TABLE_B with an access to COSINE_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>13</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to EIGHTHS with an access to COSINE_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1721</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>20</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to SINE_TABLE_A with an access to TANGENT_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1722</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>26</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to SINE_TABLE_B with an access to TANGENT_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1723</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>32</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to COSINE_TABLE_A with an access to TANGENT_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>38</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to COSINE_TABLE_B with an access to TANGENT_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>13</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to EIGHTHS with an access to TANGENT_TABLE_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1721</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>20</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to SINE_TABLE_A with an access to TANGENT_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1722</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>26</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to SINE_TABLE_B with an access to TANGENT_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1723</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>32</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to COSINE_TABLE_A with an access to TANGENT_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>38</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to COSINE_TABLE_B with an access to TANGENT_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>13</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to EIGHTHS with an access to TANGENT_TABLE_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1721</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>20</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to SINE_TABLE_A with an access to EIGHTHS</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1722</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>26</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to SINE_TABLE_B with an access to EIGHTHS</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1723</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>32</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to COSINE_TABLE_A with an access to EIGHTHS</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>38</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced access to COSINE_TABLE_B with an access to EIGHTHS</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1717</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local xa is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>55ms</time></test></testsExecutionTime><patchExecutionTime>163ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>12</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local xa is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1727</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>44</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>48</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>57</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>62</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>68</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>69</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>53ms</time></test></testsExecutionTime><patchExecutionTime>232ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>76</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>77</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>78</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp2 is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>71ms</time></test></testsExecutionTime><patchExecutionTime>94ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>81</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local xa to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>84</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp2 is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>85</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local xa to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1763</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>93</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xa to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>96</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintA is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>97</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local xa to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>101</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>103</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local xa to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>106</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>109</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>112</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local xa to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1768</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>115</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>119</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>120</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>122</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xa to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>125</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costA is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>126</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>128</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local xa to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>132</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>134</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local xa to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>137</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>140</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>143</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local xa to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>30ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1774</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>146</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>150</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>151</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>153</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xa to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>156</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>157</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintA is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>64ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>158</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local cosEpsB is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>161</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costA is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>162</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>165</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xa to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>168</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>169</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintB is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>171</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costB is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>172</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>175</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintB is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>94ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>176</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local cosEpsB is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>179</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costB is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>180</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>183</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xa to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1819</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>186</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local xb is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>192</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local costA is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>193</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local costB is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>196</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local cosEpsB is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>199</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sintA is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>200</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sintB is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>202</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sinEpsA is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>49ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>203</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sinEpsB is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>207</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local xb is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>209</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local xa to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>213</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>215</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local xa to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>52ms</time></test></testsExecutionTime><patchExecutionTime>158ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>218</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>221</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>224</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local c is replaced by local xa to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1824</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>227</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>231</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local a is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>232</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local c is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>234</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local a is replaced by local xa to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>238</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>240</index><block>35</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local d is replaced by local xa to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1830</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>243</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local d is replaced by local xa to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1727</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>44</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>48</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>57</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>62</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>68</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>69</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>89ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>76</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>77</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>78</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp2 is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>81</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local xb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>84</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp2 is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>85</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local xb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1763</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>93</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xb to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>96</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintA is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>97</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local xb to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>101</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>103</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local xb to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>106</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>109</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>112</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local xb to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1768</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>115</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>119</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>120</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>122</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>125</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costA is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>126</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>128</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local xb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>132</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>134</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local xb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>137</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>140</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>143</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local xb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1774</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>146</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>150</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>57ms</time></test></testsExecutionTime><patchExecutionTime>79ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>151</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>153</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>156</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>157</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintA is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>158</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local cosEpsB is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>161</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costA is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>162</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>165</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>168</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>169</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintB is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>171</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costB is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>172</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>175</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintB is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>176</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local cosEpsB is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>179</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costB is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>180</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>183</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1819</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>186</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local xb is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>192</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local costA is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>193</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local costB is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>196</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local cosEpsB is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>199</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sintA is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>200</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sintB is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>202</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sinEpsA is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>203</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sinEpsB is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>207</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local xb is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>209</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local xb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>213</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>215</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local xb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>218</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>221</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>224</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local c is replaced by local xb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1824</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>227</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>231</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local a is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>232</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local c is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>234</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local a is replaced by local xb to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>238</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>240</index><block>35</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local d is replaced by local xb to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1830</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>243</index><block>35</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local d is replaced by local xb to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>385ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>423ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1727</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>44</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>48</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>57</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>62</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>68</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>69</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>98ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>76</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>77</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>78</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp2 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>81</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>84</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp2 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>85</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1763</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>93</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local epsilon to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>96</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintA is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>97</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local epsilon to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>101</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>103</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local epsilon to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>106</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>109</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>112</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local epsilon to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1768</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>115</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>59ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>119</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>120</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>122</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>125</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costA is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>126</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>128</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>132</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>134</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>137</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>140</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>143</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1774</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>146</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>150</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>151</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>153</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>156</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>157</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintA is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>158</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local cosEpsB is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>161</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costA is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>162</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>165</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>168</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>169</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintB is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>171</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costB is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>172</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>175</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintB is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>176</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local cosEpsB is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>179</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costB is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>180</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>183</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1819</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>186</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local xb is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>52ms</time></test></testsExecutionTime><patchExecutionTime>88ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>192</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local costA is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>193</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local costB is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>196</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local cosEpsB is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>199</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sintA is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>200</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sintB is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>202</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sinEpsA is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>203</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sinEpsB is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>207</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local xb is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>209</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>213</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>215</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>218</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>221</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>224</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local c is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1824</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>227</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>231</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>232</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>234</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local a is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>238</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>240</index><block>35</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local d is replaced by local epsilon to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1830</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>243</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local d is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1727</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>44</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>48</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>57</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>62</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>68</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>69</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>103ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>73ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>76</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>77</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>78</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp2 is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>81</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local sintA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>84</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp2 is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>85</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local sintA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>54ms</time></test></testsExecutionTime><patchExecutionTime>153ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1763</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>93</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintA to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>96</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintA is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>97</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local sintA to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>101</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>103</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local sintA to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>106</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>109</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>112</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local sintA to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1768</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>115</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>119</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>120</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>122</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>125</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costA is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>85ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>126</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>128</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local sintA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>132</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>134</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local sintA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>137</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>140</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>143</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local sintA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1774</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>146</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>150</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>151</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>153</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>156</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>157</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintA is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>158</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local cosEpsB is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>161</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costA is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>162</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>52ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>165</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>168</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>169</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintB is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>171</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costB is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>172</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>175</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintB is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>176</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local cosEpsB is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>41ms</time></test></testsExecutionTime><patchExecutionTime>61ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>179</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costB is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>180</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>183</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1819</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>186</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local xb is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>192</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local costA is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>193</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local costB is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>196</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local cosEpsB is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>199</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sintA is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>200</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sintB is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>202</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sinEpsA is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>203</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sinEpsB is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>207</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local xb is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>209</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local sintA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>213</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>215</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local sintA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>218</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>221</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>224</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local c is replaced by local sintA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1824</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>227</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>231</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local a is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>232</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local c is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>234</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local a is replaced by local sintA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>238</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>240</index><block>35</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local d is replaced by local sintA to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1830</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>243</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local d is replaced by local sintA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1727</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>44</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>48</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>57</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>62</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>68</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>69</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>51ms</time></test></testsExecutionTime><patchExecutionTime>185ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>76</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>77</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>78</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp2 is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>81</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local sintB to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>84</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp2 is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>85</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local sintB to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1763</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>93</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintB to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>96</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintA is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>97</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local sintB to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>101</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>103</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local sintB to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>106</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>109</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>112</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local sintB to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1768</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>115</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>119</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>120</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>122</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintB to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>125</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costA is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>58ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>126</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>128</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local sintB to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>132</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>134</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local sintB to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>137</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>140</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>143</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local sintB to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1774</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>146</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>150</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>151</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>153</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintB to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>156</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>157</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintA is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>158</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local cosEpsB is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>161</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costA is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>162</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>165</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintB to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>168</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>169</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintB is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>171</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costB is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>172</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>175</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintB is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>176</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local cosEpsB is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>179</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costB is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>180</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>183</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintB to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1819</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>186</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local xb is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>192</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local costA is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>193</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local costB is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>196</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local cosEpsB is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>199</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sintA is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>200</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sintB is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>57ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>202</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sinEpsA is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>203</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sinEpsB is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>207</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local xb is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>209</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local sintB to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>213</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>215</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local sintB to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>52ms</time></test></testsExecutionTime><patchExecutionTime>163ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>218</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>221</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>224</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local c is replaced by local sintB to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1824</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>227</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>231</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local a is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>232</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local c is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>234</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local a is replaced by local sintB to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>238</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>240</index><block>35</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local d is replaced by local sintB to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1830</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>243</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local d is replaced by local sintB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1727</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>44</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local costB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>48</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local costB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>57</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local epsilon is replaced by local costB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>62</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>68</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>69</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>76</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>77</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>78</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp2 is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>81</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local costA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>84</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local temp2 is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>85</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local costA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1763</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>93</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local costA to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>96</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintA is replaced by local costB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>97</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local costA to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>101</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>103</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local costA to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>106</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>109</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>112</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local costA to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1768</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>115</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>119</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>120</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>122</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local costA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>125</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costA is replaced by local costB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>48ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>126</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>128</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local costA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>132</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>134</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local costA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>137</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>140</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local b is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>143</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local costA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1774</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>146</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local t is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>150</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>151</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local c is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>153</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local costA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>156</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>157</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintA is replaced by local costB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>158</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local cosEpsB is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>161</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costA is replaced by local costB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>162</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>165</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local costA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>168</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>169</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintB is replaced by local costB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>171</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costB is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>172</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsA is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>175</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sintB is replaced by local costB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>176</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local cosEpsB is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>179</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local costB is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>180</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local sinEpsB is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>183</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local costA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1819</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>186</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local xb is replaced by local costB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>192</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local costA is replaced by local costB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>193</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local costB is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>196</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local cosEpsB is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>199</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sintA is replaced by local costB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>200</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sintB is replaced by local costB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>88ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>202</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sinEpsA is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>203</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local sinEpsB is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>80ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>207</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local xb is replaced by local costB to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>209</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local costA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>213</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>215</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local costA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>218</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>221</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local b is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>224</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local c is replaced by local costA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1824</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>227</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local t is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>231</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local a is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>232</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local c is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>234</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>local a is replaced by local costA to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>238</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local a is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>240</index><block>35</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>local d is replaced by local costA to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1830</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>243</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>local d is replaced by local costA to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1717</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local xa is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>12</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local xa is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>14</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1721</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>21</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>98ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1722</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>27</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1723</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>33</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>39</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1727</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>44</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local epsilon is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>48</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local epsilon is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>91ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>57</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local epsilon is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>62</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>68</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>69</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>76</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsB is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>77</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>78</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp2 is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>84</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp2 is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>96</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintA is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>101</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>77ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>106</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>109</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1768</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>115</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>119</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>120</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local c is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>125</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costA is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>126</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>132</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>137</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>140</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1774</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>146</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>150</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>151</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local c is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>53ms</time></test></testsExecutionTime><patchExecutionTime>158ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>156</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>157</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintA is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>158</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local cosEpsB is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>161</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costA is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>162</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsB is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>168</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>169</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintB is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>171</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costB is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>54ms</time></test></testsExecutionTime><patchExecutionTime>210ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>172</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>175</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintB is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>52ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>176</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local cosEpsB is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>179</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costB is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>180</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsB is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>52ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1819</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>186</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local xb is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>192</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local costA is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>193</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local costB is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>54ms</time></test></testsExecutionTime><patchExecutionTime>164ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>196</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local cosEpsB is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>199</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sintA is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>200</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sintB is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>202</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sinEpsA is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>52ms</time></test></testsExecutionTime><patchExecutionTime>213ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>203</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sinEpsB is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>207</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local xb is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>213</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local b is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>218</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local t is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>221</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local b is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1824</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>227</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local t is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>231</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local a is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>232</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local c is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>238</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1830</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>243</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local d is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1717</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local xa is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>12</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local xa is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>14</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1721</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>21</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1722</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>27</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1723</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>33</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>39</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1727</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>44</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local epsilon is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>48</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local epsilon is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>57</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local epsilon is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>62</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>68</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>69</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>76</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsB is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>77</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>78</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp2 is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>84</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp2 is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>96</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintA is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>101</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>106</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>109</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1768</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>115</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>119</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>120</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local c is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>125</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costA is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>126</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>132</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>137</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>140</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1774</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>146</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>150</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>151</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local c is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>156</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>157</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintA is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>158</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local cosEpsB is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>161</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costA is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>162</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsB is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>168</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>169</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintB is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>171</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costB is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>64ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>172</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>175</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintB is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>176</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local cosEpsB is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>179</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costB is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>180</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsB is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1819</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>186</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local xb is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>192</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local costA is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>193</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local costB is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>196</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local cosEpsB is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>199</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sintA is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>200</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sintB is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>202</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sinEpsA is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>203</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sinEpsB is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>52ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>207</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local xb is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>213</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local b is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>218</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local t is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>221</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local b is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1824</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>227</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local t is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>231</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local a is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>232</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local c is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>238</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1830</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>243</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local d is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>59ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1717</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local xa is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>12</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local xa is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>14</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1721</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>21</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1722</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>27</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1723</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>33</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>39</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1727</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>44</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local epsilon is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>48</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local epsilon is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>57</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local epsilon is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>62</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>68</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>69</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>76</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsB is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>77</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>78</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp2 is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>84</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp2 is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>96</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintA is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>101</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>106</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>109</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1768</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>115</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>119</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>120</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local c is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>125</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costA is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>126</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>132</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>137</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>140</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1774</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>146</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>150</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>151</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local c is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>156</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>157</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintA is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>158</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local cosEpsB is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>161</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costA is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>162</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsB is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>168</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>169</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintB is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>171</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costB is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>95ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>172</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>175</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintB is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>176</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local cosEpsB is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>179</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costB is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>180</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsB is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1819</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>186</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local xb is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>192</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local costA is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>193</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local costB is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>121ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>196</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local cosEpsB is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>199</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sintA is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>200</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sintB is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>202</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sinEpsA is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>52ms</time></test></testsExecutionTime><patchExecutionTime>202ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>203</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sinEpsB is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>207</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local xb is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>213</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local b is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>218</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local t is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>221</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local b is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1824</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>227</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local t is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>231</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local a is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>232</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local c is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>238</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1830</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>243</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local d is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1717</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local xa is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>12</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local xa is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>14</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1721</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>21</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>58ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1722</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>27</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1723</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>33</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>39</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1727</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>44</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local epsilon is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>48</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local epsilon is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>57</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local epsilon is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>62</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>68</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>69</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>76</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsB is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>77</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>78</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp2 is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>84</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp2 is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>96</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintA is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>101</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>106</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>109</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1768</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>115</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>119</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>120</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local c is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>125</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costA is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>126</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>132</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>137</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>140</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1774</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>146</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>150</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>151</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local c is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>156</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>157</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintA is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>158</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local cosEpsB is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>161</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costA is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>162</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsB is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>168</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>169</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintB is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>171</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costB is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>71ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>172</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>175</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintB is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>62ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>176</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local cosEpsB is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>179</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costB is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>180</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsB is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1819</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>186</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local xb is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>192</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local costA is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>193</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local costB is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>55ms</time></test></testsExecutionTime><patchExecutionTime>229ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>196</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local cosEpsB is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>199</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sintA is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>200</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sintB is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>202</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sinEpsA is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>30ms</time></test></testsExecutionTime><patchExecutionTime>147ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>203</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sinEpsB is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>207</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local xb is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>213</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local b is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>218</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local t is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>221</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local b is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1824</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>227</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local t is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>231</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local a is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>232</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local c is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>238</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1830</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>243</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local d is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1717</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local xa is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>12</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local xa is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>14</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1721</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>21</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>65ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1722</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>27</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1723</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>33</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>39</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local idx is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1727</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>44</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local epsilon is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>48</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local epsilon is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>94ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>57</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local epsilon is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>62</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>68</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>69</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>76</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsB is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>77</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>78</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp2 is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1736</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>84</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local temp2 is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1765</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>96</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintA is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>101</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>106</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>109</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1768</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>115</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>119</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>120</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local c is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>125</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costA is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>126</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>132</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>137</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>140</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local b is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1774</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>146</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local t is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>150</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>151</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local c is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>156</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>157</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintA is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>158</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local cosEpsB is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>161</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costA is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>162</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsB is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>168</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>169</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintB is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>171</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costB is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>172</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsA is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>175</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sintB is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>53ms</time></test></testsExecutionTime><patchExecutionTime>162ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>176</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local cosEpsB is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>32ms</time></test></testsExecutionTime><patchExecutionTime>134ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>179</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local costB is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>180</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local sinEpsB is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1819</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>186</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local xb is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>192</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local costA is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>193</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local costB is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>196</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local cosEpsB is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>199</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sintA is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>200</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sintB is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>202</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sinEpsA is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>86ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>203</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local sinEpsB is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>207</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local xb is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>213</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local b is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>218</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local t is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>221</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local b is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1824</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>227</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local t is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>231</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local a is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>232</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>access to local c is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>238</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local a is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1830</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>243</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>access to local d is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>49</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polySine with a call to doubleHighPart</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>58</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polyCosine with a call to doubleHighPart</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>49</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polySine with a call to sqrt</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>58</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polyCosine with a call to sqrt</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>49</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polySine with a call to cosh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>58</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polyCosine with a call to cosh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>49</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polySine with a call to sinh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>58</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polyCosine with a call to sinh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>49</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polySine with a call to tanh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>58</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polyCosine with a call to tanh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>86ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>49</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>replaced call to polySine with a call to acosh</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>58</index><block>34</block><killingTests/><suspValue>0.08759357437106757</suspValue><description>replaced call to polyCosine with a call to acosh</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>49</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polySine with a call to asinh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>58</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polyCosine with a call to asinh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>49</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polySine with a call to atanh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>58</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polyCosine with a call to atanh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>52ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>49</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polySine with a call to signum</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>58</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polyCosine with a call to signum</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>49</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polySine with a call to nextUp</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>58</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to polyCosine with a call to nextUp</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>49</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to org/apache/commons/math3/util/FastMath::polySine with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>58</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced call to org/apache/commons/math3/util/FastMath::polyCosine with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1717</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Substituted 8.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1717</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>6</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Substituted 0.5 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1729</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>53</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>53ms</time></test></testsExecutionTime><patchExecutionTime>147ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1733</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>63</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Substituted 1.073741824E9 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1762</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>88</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>76ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1763</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>92</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1819</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>187</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>195</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>111</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>removed negation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>142</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>removed negation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>223</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>removed negation</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1717</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>5</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1717</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1718</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>16</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1733</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>64</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>70</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1734</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>72</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>79</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1735</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>80</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1766</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>102</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>108</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1767</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>110</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1769</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>121</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1771</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>127</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1772</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>133</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>139</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1773</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>141</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1775</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>152</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>159</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>160</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>163</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>164</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>170</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>173</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>174</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>177</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>178</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>181</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1792</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>182</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>194</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>197</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>198</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>201</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>204</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>52ms</time></test></testsExecutionTime><patchExecutionTime>147ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>205</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>55ms</time></test></testsExecutionTime><patchExecutionTime>147ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>206</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1820</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>208</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1822</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>214</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>220</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1823</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>222</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1825</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>233</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08980265101338744</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1828</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>239</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1819</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>189</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1728</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>49</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>removed call to org/apache/commons/math3/util/FastMath::polySine</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1730</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>58</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>removed call to org/apache/commons/math3/util/FastMath::polyCosine</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1830</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>244</index><block>35</block><killingTests>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced double return with 0.0d for org/apache/commons/math3/util/FastMath::sinQ</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSinAccuracy(org.apache.commons.math3.util.FastMathTest)</name><time>570ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>613ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1819</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>189</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1819</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>189</index><block>34</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sinQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>1830</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>244</index><block>35</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.08759357437106757</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math3/util/FastMath::sinQ</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>access to local a is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>access to local a is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>access to local a is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>access to local a is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>access to local a is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>replaced call to sqrt with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>replaced call to sqrt with a call to cos</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>replaced call to sqrt with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>replaced call to sqrt with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>replaced call to sqrt with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>replaced call to sqrt with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>replaced call to sqrt with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>replaced call to sqrt with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>replaced call to sqrt with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>replaced call to sqrt with a call to log</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>replaced call to java/lang/Math::sqrt with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>removed call to java/lang/Math::sqrt</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math3.util.FastMathTest)</name><time>237ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>289ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math3.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>replaced double return with 0.0d for org/apache/commons/math3/util/FastMath::sqrt</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math3.util.FastMathTest)</name><time>197ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>225ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>379</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.04148699068225112</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math3/util/FastMath::sqrt</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutatorSecondPhase_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII[I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutatorSecondPhase_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII[I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>63ms</time></test></testsExecutionTime><patchExecutionTime>126ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>17ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>local k is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>local m1 is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>local m2 is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>local m3 is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>local k is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>local m1 is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>local m2 is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>local m3 is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>local k is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>local m1 is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>local m2 is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>local m3 is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutatorSecondPhase_0</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII[I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutatorSecondPhase_1</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII[I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>local k is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>local m1 is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>6</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>local m2 is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>7</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>local m3 is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>local k is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>local m1 is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>6</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>local m2 is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>7</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>local m3 is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>local k is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>local m1 is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>6</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>local m2 is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>7</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>local m3 is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>Substituted 2 with 3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>13</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>Substituted 32 with 33</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>18</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>20</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>Substituted 4294967295 with 4294967296</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>14</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIJ)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06565321642986127</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>63ms</time></test></testsExecutionTime><patchExecutionTime>132ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to iRm1 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to iRm2 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to i1 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to i2 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to i3 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to iRm1 is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to iRm2 is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to i1 is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to i2 is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to i3 is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to field org.apache.commons.math3.random.AbstractWell.v is replaced by the call to org.apache.commons.math3.random.AbstractWell::setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>29</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to field org.apache.commons.math3.random.AbstractWell.index is replaced by the call to org.apache.commons.math3.random.AbstractWell::setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>35</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to field org.apache.commons.math3.random.AbstractWell.iRm1 is replaced by the call to org.apache.commons.math3.random.AbstractWell::setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>32ms</time></test></testsExecutionTime><patchExecutionTime>92ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>41</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to field org.apache.commons.math3.random.AbstractWell.iRm2 is replaced by the call to org.apache.commons.math3.random.AbstractWell::setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>47</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to field org.apache.commons.math3.random.AbstractWell.i1 is replaced by the call to org.apache.commons.math3.random.AbstractWell::setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>53</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to field org.apache.commons.math3.random.AbstractWell.i2 is replaced by the call to org.apache.commons.math3.random.AbstractWell::setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>59</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to field org.apache.commons.math3.random.AbstractWell.i3 is replaced by the call to org.apache.commons.math3.random.AbstractWell::setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>32ms</time></test></testsExecutionTime><patchExecutionTime>98ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to iRm1 with an access to v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to iRm2 with an access to v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to i1 with an access to v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to i2 with an access to v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to i3 with an access to v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to iRm1 with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to iRm2 with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to i1 with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to i2 with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to i3 with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to iRm1 with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to iRm2 with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to i1 with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to i2 with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to i3 with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to iRm1 with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to iRm2 with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to i1 with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to i2 with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to i3 with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to iRm1 with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to iRm2 with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to i1 with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to i2 with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to i3 with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field v is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>29</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field index is replaced by access to local k</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>35</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field iRm1 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>41</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field iRm2 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>47</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field i1 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>53</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field i2 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>59</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field i3 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field iRm1 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field iRm2 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field i1 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field i2 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field i3 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>29</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field index is replaced by access to local m1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>29</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field index is replaced by access to local m2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local k is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>33</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>45</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>51</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>57</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>65</index><block>1</block><killingTests/><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>66</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>72</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>73</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>74</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>78</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>85</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>86</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>87</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>91</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>98</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>99</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>100</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m1 is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>111</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m2 is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>113</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>120</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m3 is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>124</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local k is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>56ms</time></test></testsExecutionTime><patchExecutionTime>125ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>33</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>45</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>51</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>57</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>44ms</time></test></testsExecutionTime><patchExecutionTime>54ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>65</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>30ms</time></test></testsExecutionTime><patchExecutionTime>89ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>66</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>72</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>73</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>74</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>78</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>85</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>86</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>87</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>91</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>98</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>99</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>100</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m1 is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>37ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>111</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m2 is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>113</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>120</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m3 is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>124</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local k is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>33</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>45</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>51</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>57</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>65</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>66</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>72</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>73</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>74</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>78</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>85</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>86</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>87</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>91</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>98</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>99</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>100</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m1 is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>111</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m2 is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>113</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>120</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m3 is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>124</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>11</index><block>1</block><killingTests/><suspValue>0.05402118045492148</suspValue><description>local k is replaced by local w to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>33</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>45</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>51</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>57</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>65</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>66</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>72</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>73</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>74</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>78</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>85</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>86</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>87</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>91</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>98</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>99</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>100</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m1 is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>111</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m2 is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>113</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>120</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m3 is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>124</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>33</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>45</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>51</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>57</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>65</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>66</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>72</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>73</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>74</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>78</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>85</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>86</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>87</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>91</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>98</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>99</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>100</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m1 is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>29ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>111</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m2 is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>113</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>27ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>120</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m3 is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>124</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>65</index><block>1</block><killingTests/><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>66</index><block>1</block><killingTests/><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local j to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>72</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>73</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>74</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>78</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>85</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>86</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>87</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>91</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>98</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>99</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>32ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>100</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m1 is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>111</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m2 is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>113</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>120</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local m3 is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>124</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>local r is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to iRm1 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to iRm2 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to i1 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to i2 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to i3 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to iRm1 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to iRm2 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to i1 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to i2 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to i3 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to iRm1 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to iRm2 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to i1 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to i2 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to i3 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the call to org.apache.commons.math3.random.AbstractWell::setSeed([I)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>67</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>129</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Changed increment from 1 to -1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Substituted 32 with 33</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Substituted 32 with 33</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>16</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Substituted 32 with 33</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>28</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>62</index><block>1</block><killingTests/><suspValue>0.05402118045492148</suspValue><description>Substituted 0 with 1</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>76</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>89</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Substituted 2 with 3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced integer division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>250ms</time></test></testsExecutionTime><patchExecutionTime>259ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>75</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>77</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>79</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced integer modulus with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>88</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>90</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>92</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced integer modulus with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>101</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>103</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced integer modulus with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>112</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>114</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced integer modulus with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>123</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>125</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced integer modulus with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>67</index><block>1</block><killingTests/><suspValue>0.05402118045492148</suspValue><description>negated conditional</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>67</index><block>1</block><killingTests/><suspValue>0.05402118045492148</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>67</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>removed call to org/apache/commons/math3/random/AbstractWell::setSeed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Removed assignment to member variable v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>29</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Removed assignment to member variable index</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>35</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Removed assignment to member variable iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>41</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Removed assignment to member variable iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>47</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Removed assignment to member variable i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>53</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Removed assignment to member variable i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>59</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Removed assignment to member variable i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>57ms</time></test></testsExecutionTime><patchExecutionTime>140ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>8</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>access to local seed is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>15</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>access to local seed is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>40ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>62ms</time></test></testsExecutionTime><patchExecutionTime>123ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>the call to org.apache.commons.math3.random.AbstractWell::setSeed([I)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>Substituted 2 with 3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>Substituted 32 with 33</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>16</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>Substituted 4294967295 with 4294967296</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054744890145135894</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><block>11</block><killingTests/><suspValue>0.054744890145135894</suspValue><description>removed call to org/apache/commons/math3/random/AbstractWell::setSeed</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>41ms</time></test></testsExecutionTime><patchExecutionTime>71ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>16ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>22</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>27</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>36</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>47</index><block>8</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>53</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>64</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>22</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>27</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>36</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>47</index><block>8</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>53</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>64</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>22</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>27</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>36</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>47</index><block>8</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>53</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>64</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded using field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>88</index><block>10</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to field org.apache.commons.math3.random.AbstractWell.index is replaced by the call to org.apache.commons.math3.random.AbstractWell::setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>41ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>22</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>63ms</time></test></testsExecutionTime><patchExecutionTime>122ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>27</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>36</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>47</index><block>8</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>53</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>64</index><block>9</block><killingTests/><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to iRm1</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>22</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>27</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>36</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>47</index><block>8</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>53</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>64</index><block>9</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>120ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>22</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>27</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>36</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>47</index><block>8</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>53</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>64</index><block>9</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>22</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>27</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>36</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>47</index><block>8</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>53</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>64</index><block>9</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>49ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>243ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>22</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>27</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>36</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>47</index><block>8</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>53</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>64</index><block>9</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced access to v with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>53ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>269ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>22</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field v is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>27</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field v is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>36</index><block>7</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field v is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>215ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>47</index><block>8</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field v is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>155ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>53</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field v is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>64</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to field v is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>154</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>5</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>19</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>24</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>33</index><block>7</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>101ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>41</index><block>8</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>97ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>45</index><block>8</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local i is replaced by access to field index</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>54</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local i is replaced by access to field index</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>55</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>65</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local i is replaced by access to field index</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>67</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local l is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>68</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local l is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>73</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local i is replaced by access to field index</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>154</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>5</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>19</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>24</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>33</index><block>7</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>63ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>201ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>41</index><block>8</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>116ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>55</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>154</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>5</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>19</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>24</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>33</index><block>7</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>159ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>41</index><block>8</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>113ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>55</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>154</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>5</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>19</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>24</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>33</index><block>7</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>181ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>41</index><block>8</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>108ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>55</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>154</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>5</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>19</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>24</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>33</index><block>7</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>53ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>143ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>41</index><block>8</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>126ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>55</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>access to local seed is replaced by access to field i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>8</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>replaced call to currentTimeMillis with a call to nanoTime</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>29</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced call to min with a call to max</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>22</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>27</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>36</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>47</index><block>8</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>53</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>64</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>22</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>27</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>36</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>47</index><block>8</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>53</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>64</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>22</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>27</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>36</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>47</index><block>8</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>53</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>64</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>92</index><block>10</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the call to clear()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>92</index><block>10</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the call to clear()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>92</index><block>10</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the call to clear()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>92</index><block>10</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the call to clear()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>92</index><block>10</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the call to clear()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>the call to org.apache.commons.math3.random.AbstractWell::setSeed(J)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>92</index><block>10</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>the call to org.apache.commons.math3.random.AbstractWell::clear()V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>43ms</time></test></testsExecutionTime><patchExecutionTime>49ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>29</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>replaced call to java/lang/Math::min with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>38</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>49</index><block>8</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>20</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>23</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>66</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Substituted 1812433253 with 1812433254</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>41ms</time></test></testsExecutionTime><patchExecutionTime>57ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>69</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Substituted 30 with 31</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>76</index><block>9</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Substituted 4294967295 with 4294967296</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>90ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>87</index><block>10</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>Replaced long addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>57</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>70</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>71</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>72</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced long multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>35ms</time></test></testsExecutionTime><patchExecutionTime>102ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>75</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced long addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>77</index><block>9</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><block>7</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>86ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>49</index><block>8</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>144ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>8</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>removed call to java/lang/System::currentTimeMillis</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>removed call to java/lang/System::identityHashCode</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>29</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>removed call to java/lang/Math::min</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>38</index><block>7</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>114ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>49</index><block>8</block><killingTests>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>115ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>38</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>49</index><block>8</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>removed call to org/apache/commons/math3/random/AbstractWell::setSeed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><block>7</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>removed call to java/lang/System::arraycopy</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>92</index><block>10</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>removed call to org/apache/commons/math3/random/AbstractWell::clear</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>88</index><block>10</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.05402118045492148</suspValue><description>Removed assignment to member variable index</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>Substituted 19937 with 19938</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>Substituted 70 with 71</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>Substituted 179 with 180</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06647000940439916</suspValue><description>Substituted 449 with 450</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>Substituted 19937 with 19938</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>Substituted 70 with 71</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>Substituted 179 with 180</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>Substituted 449 with 450</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to iRm1 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>12</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to iRm2 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>28</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>30</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to i1 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>32</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>41</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to i2 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>43</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>50</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>52</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to i3 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>54</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>62</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>68</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>131</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>133</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>139</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>146</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>32</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>43</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>54</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>133</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>32</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>43</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>39ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>54</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>133</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded using field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>32</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>43</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>54</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>133</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>157</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local indexRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local indexRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>32</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local indexRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>43</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local indexRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>54</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local indexRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>133</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local indexRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>157</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local indexRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local indexRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>32</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local indexRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>43</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local indexRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>54</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local indexRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>133</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local indexRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>157</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to field index is replaced by access to local indexRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>63</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm2 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>76</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local v0 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>77</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local v0 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM1 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>82</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM1 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>90</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM2 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>93</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM3 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>94</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM3 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>103</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z0 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>115</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>116</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>134</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>140</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>141</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>147</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm2 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>156</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>160</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>161</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>167</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local bits to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>170</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>171</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>25ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>177</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local bits to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>180</index><block>2</block><killingTests/><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local bits to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>182</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local bits is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>63</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm2 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>76</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local v0 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>77</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local v0 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM1 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>82</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM1 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>90</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM2 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>93</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM3 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>94</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM3 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>103</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z0 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>115</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>116</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>134</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>140</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>141</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>147</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm2 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>156</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>160</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>161</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>167</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local indexRm1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>170</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>171</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>177</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local indexRm1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>180</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>182</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local bits is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>63</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm2 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>76</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local v0 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>77</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local v0 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM1 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>82</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM1 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>90</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM2 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>93</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM3 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>94</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM3 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>103</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z0 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>115</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>116</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>134</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>140</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>141</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>147</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm2 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>156</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>160</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>161</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>167</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local indexRm2 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>170</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>171</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>177</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local indexRm2 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>180</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>182</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local bits is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>63</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm2 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>76</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local v0 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>77</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local v0 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM1 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>82</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM1 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>90</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM2 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>93</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM3 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>94</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM3 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>103</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z0 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>115</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>116</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>134</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>140</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>141</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>147</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm2 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>156</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>160</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>161</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>167</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local v0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>170</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>171</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>177</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local v0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>180</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>182</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local bits is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>63</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm2 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>76</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local v0 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>77</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local v0 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM1 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>82</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM1 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>90</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM2 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>93</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM3 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>94</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM3 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>103</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z0 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>115</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>116</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>134</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>140</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>141</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>147</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm2 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>156</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>160</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>161</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>167</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local vM1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>170</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>171</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>177</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local vM1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>180</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>182</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local bits is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>63</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm2 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>76</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local v0 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>77</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local v0 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM1 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>82</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM1 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>90</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM2 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>93</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM3 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>94</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local vM3 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>103</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z0 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z1 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>115</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>116</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z2 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>134</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z3 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>140</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>141</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>147</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm2 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>156</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local indexRm1 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>160</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>161</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>167</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local vM2 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>170</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>171</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>177</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local vM2 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>19ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>180</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local z4 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>182</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>local bits is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>63</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm1 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm2 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>76</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local v0 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>77</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local v0 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM1 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>82</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM1 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>90</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM2 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>93</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM3 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>94</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM3 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z1 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>103</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z2 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z0 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z1 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z1 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>115</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z2 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>116</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z2 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z3 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z3 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>134</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z3 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>140</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm1 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>141</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>147</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm2 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>156</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm1 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>160</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>72ms</time></test></testsExecutionTime><patchExecutionTime>77ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>161</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>170</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>171</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>180</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>182</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local bits is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>63</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm1 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm2 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>76</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local v0 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>77</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local v0 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM1 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>82</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM1 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>90</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM2 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>93</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM3 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>94</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM3 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z1 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>103</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z2 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z0 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z1 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z1 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>36ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>115</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z2 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>116</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z2 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z3 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z3 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>134</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z3 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>140</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm1 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>141</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>147</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm2 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>156</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm1 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>160</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>161</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>170</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>171</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>180</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>182</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local bits is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>63</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm1 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm2 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>76</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local v0 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>77</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local v0 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM1 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>82</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM1 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>90</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM2 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>93</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM3 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>94</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM3 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z1 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>103</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z2 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z0 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z1 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z1 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>115</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z2 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>116</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z2 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z3 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z3 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>134</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z3 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>140</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm1 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>141</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>147</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm2 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>156</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm1 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>160</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>161</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>170</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>171</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>180</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>182</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local bits is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>63</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm1 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm2 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>76</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local v0 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>63ms</time></test></testsExecutionTime><patchExecutionTime>129ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>77</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local v0 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM1 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>82</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM1 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>90</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM2 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>32ms</time></test></testsExecutionTime><patchExecutionTime>91ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>93</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM3 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>94</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local vM3 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z1 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>103</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z2 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z0 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z1 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z1 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>115</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z2 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>116</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z2 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z3 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z3 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>134</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z3 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>140</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm1 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>141</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>147</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm2 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>156</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local indexRm1 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>160</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>161</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>170</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>171</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>180</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local z4 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>182</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>access to local bits is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to iRm1 is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>12</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to iRm2 is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>28</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>30</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to i1 is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>32</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>41</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to i2 is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>43</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>50</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>52</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to i3 is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>54</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>62</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>68</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>131</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>133</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>139</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>146</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to iRm1 is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>12</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to iRm2 is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>28</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>30</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to i1 is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>32</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>41</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to i2 is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>43</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>50</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>52</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to i3 is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>54</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>62</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>68</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>131</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>133</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>139</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>146</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to iRm1 is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>12</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to iRm2 is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>63ms</time></test></testsExecutionTime><patchExecutionTime>126ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>28</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>30</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to i1 is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>32</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>41</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to i2 is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>43</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>50</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>52</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to i3 is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>54</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>62</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>68</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>131</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>133</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to index is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>139</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>146</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>60</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Substituted -2147483648 with -2147483647</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>66</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Substituted 2147483647 with -2147483648</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>78</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Substituted 25 with 26</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>83</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Substituted 27 with 28</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>91</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Substituted 9 with 10</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>95</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>111</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Substituted 9 with 10</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>117</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Substituted 21 with 22</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>123</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Substituted 21 with 22</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>150</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Substituted -2147483648 with -2147483647</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>162</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Substituted 7 with 8</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>164</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Substituted -462547200 with -462547199</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>172</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Substituted 15 with 16</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>61ms</time></test></testsExecutionTime><patchExecutionTime>119ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>174</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Substituted -1685684224 with -1685684223</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>181</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Substituted 32 with 33</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>65</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>72</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>79</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>80</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>85</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>86</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>92</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>96</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>98</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>104</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>112</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>113</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>114</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>118</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>120</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>35ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>124</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>125</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>126</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>151</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>163</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>165</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>166</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>173</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>175</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>176</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>183</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>184</index><block>2</block><killingTests>org.apache.commons.math3.random.Well19937cTest.testNextUniformExclusiveEndpoints(org.apache.commons.math3.random.Well19937cTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.random.Well19937cTest.testNextInt2(org.apache.commons.math3.random.Well19937cTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformExclusiveEndpoints(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLong2(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>185</index><block>2</block><killingTests/><suspValue>0.13867504905630726</suspValue><description>replaced int return with 0 for org/apache/commons/math3/random/Well19937c::next</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>185</index><block>2</block><killingTests/><suspValue>0.13867504905630726</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>157</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.13867504905630726</suspValue><description>Removed assignment to member variable index</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.051639777949432225</suspValue><description>Substituted NaN with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.051639777949432225</suspValue><description>Removed assignment to member variable nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='898'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</killingTests><suspValue>0.051639777949432225</suspValue><description>Substituted NaN with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.random.ValueServerTest.testNextDigestFail(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testBoundariesDimensionMismatch(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testGaussianCase(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPoisson(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testDoubleDirect(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextLong2(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextLongNegativeRange(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLongExtremeValues(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testEmptyDigestFile(org.apache.commons.math3.random.ValueServerTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testLogWithBase(org.apache.commons.math3.util.FastMathTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextSecureHex(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testMinMaxDouble(org.apache.commons.math3.util.FastMathTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextSecureIntIAE(org.apache.commons.math3.random.RandomDataTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextSecureLongIAE(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextWeibull(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPoisson(org.apache.commons.math3.random.Well44497bTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextCauchy(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextSecureLongIAE(org.apache.commons.math3.random.RandomDataTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testWeightSumOverFlow(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextGaussian(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextInt2(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBooleanDirect(org.apache.commons.math3.random.Well512aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testFloatDirect(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testConfig(org.apache.commons.math3.random.Well19937aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPermutation(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextSecureLongIAE(org.apache.commons.math3.random.Well512aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.analysis.function.LogitTest.testDerivativesWithInverseFunction(org.apache.commons.math3.analysis.function.LogitTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.RandomDataTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNexBytes(org.apache.commons.math3.random.Well44497aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testReseed(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextInversionDeviate(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testFloatScalbSpecialCases(org.apache.commons.math3.util.FastMathTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testConfig(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.util.MathUtilsTest.testPermutedArrayHash(org.apache.commons.math3.util.MathUtilsTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testReseed(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testConfig(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well44497bTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testPreconditions(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testAcosSpecialCases(org.apache.commons.math3.util.FastMathTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.ResizableDoubleArrayTest.testWithInitialCapacity(org.apache.commons.math3.util.ResizableDoubleArrayTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testDoubleDirect(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testCovarianceConsistency(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGaussian(org.apache.commons.math3.random.Well19937cTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformExtremeValues(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testDensities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDensity(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBooleanDirect(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDensities(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testConsistency(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testFloatDirect(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformExtremeValues(org.apache.commons.math3.random.Well1024aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testPreconditions(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextIntNegativeRange(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions3(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextWeibull(org.apache.commons.math3.random.RandomDataTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well1024aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions1(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextLongIAE(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testNextAfter(org.apache.commons.math3.util.FastMathTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testSeeding(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testReseed(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPoisson(org.apache.commons.math3.random.Well1024aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testReferenceCode(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformIAE(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNexBoolean2(org.apache.commons.math3.random.Well44497bTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testSampling(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextExponential(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testValues(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testSeeding(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testPValueNearZero(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextSample(org.apache.commons.math3.random.Well44497aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestGoodnesOfFit2(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testOneSampleT(org.apache.commons.math3.stat.inference.TTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPermutation(org.apache.commons.math3.random.Well1024aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testSeeding(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testScaling(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDensities(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testMath905LargeNegative(org.apache.commons.math3.util.FastMathTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well512aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPoisson(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testReseed(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testBeta(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextWeibull(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformExtremeValues(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformExclusiveEndpoints(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testTwoSampleTHeterscedastic(org.apache.commons.math3.stat.inference.TTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformExclusiveEndpoints(org.apache.commons.math3.random.Well44497aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testPreconditions(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextInversionDeviate(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPermutation(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextSecureHex(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformIAE(org.apache.commons.math3.random.Well512aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testSampling(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextSecureIntIAE(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextIntNeg(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextLongDirect(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestGoodnesOfFit1(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testReseed(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextPoisson(org.apache.commons.math3.random.RandomDataTest)</name><time>40ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPermutation(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNexBytes(org.apache.commons.math3.random.Well44497bTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testMoments(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextLong2(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testProbabilities(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testPreconditions(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextInversionDeviate(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPermutation(org.apache.commons.math3.random.Well512aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextExponential(org.apache.commons.math3.random.RandomDataTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testPerfectNegative(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.RandomDataTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextFloatDirect(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testOneSampleTTest(org.apache.commons.math3.stat.inference.TTestTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextSecureIntIAE(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextIntIAE(org.apache.commons.math3.random.Well512aTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextSecureHex(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>36ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextLongIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextLongExtremeValues(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testSwissFertility(org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextLongPositiveRange(org.apache.commons.math3.random.RandomDataTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformExtremeValues(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInputSigmaNegative(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBooleanDirect(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextIntExtremeValues(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.RandomDataTest)</name><time>85ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testPreconditions1(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextSecureIntIAE(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testFloatNextAfterSpecialCases(org.apache.commons.math3.util.FastMathTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testConfig(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testMoments(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextCauchy(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLongDirect(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextWeibull(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testInputSigmaOutOfRange(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInitOutofbounds2(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testDensities(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextIntNeg(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testDoubleDirect(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextIntIAE(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testDegenerateInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextCauchy(org.apache.commons.math3.random.RandomDataTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testConfig(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testQuantiles(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextIntNeg(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testMath785(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testCauchyCase(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextIntNeg(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveMultiple(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextLongExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDensity(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextSecureHex(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextGaussian(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testInputSigmaDimensionMismatch(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testInitOutofbounds1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testLargeDegreesOfFreedom(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquare(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestIndependance2(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testStdErrorConsistency(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextLongNegativeRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextLongDirect(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInitOutofbounds1(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextLong2(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testConfig(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextInt2(org.apache.commons.math3.random.Well1024aTest)</name><time>40ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testDoubleDirect(org.apache.commons.math3.random.Well512aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testCumulativeProbabilitySpecial(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.VarianceTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.VarianceTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLongExtremeValues(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testOneWayAnovaUtils(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextInt2(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testCumulativeProbability2(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextLongNegativeRange(org.apache.commons.math3.random.RandomDataTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestIndependance3(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testPreconditions(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.util.MathArraysTest.testLinearCombination2(org.apache.commons.math3.util.MathArraysTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testPreconditions1(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHex(org.apache.commons.math3.random.Well19937cTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextFloatDirect(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextIntExtremeValues(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well1024aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testDotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testPreconditionPositiveWeights(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextIntNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformExclusiveEndpoints(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testConstants(org.apache.commons.math3.util.FastMathTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testFloatDirect(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextWeibull(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.stat.inference.MannWhitneyUTestTest.testBigDataSet(org.apache.commons.math3.stat.inference.MannWhitneyUTestTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBooleanDirect(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testLog1pSpecialCases(org.apache.commons.math3.util.FastMathTest)</name><time>271ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquare(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextIntExtremeValues(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDensities(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextIntNeg(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestGoodnesOfFit3(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testConsistency(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testAtan2(org.apache.commons.math3.util.FastMathTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextIntNegativeRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformExtremeValues(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextLongDirect(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPoisson(org.apache.commons.math3.random.ISAACTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testPValueNearZero(org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextLongExtremeValues(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextIntNeg(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.FDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testMath904(org.apache.commons.math3.util.FastMathTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest.testAggregate(org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeAboveTwo(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNexBoolean2(org.apache.commons.math3.random.Well512aTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquareZeroCount(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextIntExtremeValues(org.apache.commons.math3.random.Well44497aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextInt2(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextInversionDeviate(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testSwissFertility(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>41ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testOneSampleT(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testFloatDirect(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextGaussian(org.apache.commons.math3.random.Well44497aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testConsistency(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextLongPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextExponential(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testReferenceCode(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPoisson(org.apache.commons.math3.random.Well19937cTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextSecureHex(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextSample(org.apache.commons.math3.random.Well44497bTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testLogSpecialCases(org.apache.commons.math3.util.FastMathTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testConsistency(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testDoubleDirect(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformExtremeValues(org.apache.commons.math3.random.Well44497bTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testTwoSampleTHomoscedastic(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRandom(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPermutation(org.apache.commons.math3.random.Well44497bTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSignumFloat(org.apache.commons.math3.util.FastMathTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextExponential(org.apache.commons.math3.random.Well19937aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextInversionDeviate(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSample(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextExponential(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testPreconditions(org.apache.commons.math3.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testNonUnitWeightSum(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testMoments(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataTest)</name><time>55ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareZeroCount(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextWeibull(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextIntExtremeValues(org.apache.commons.math3.random.Well44497bTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testFloatDirect(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDensities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testSeeding(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNexBoolean2(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testReseed(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testPowSpecialCases(org.apache.commons.math3.util.FastMathTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath644(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well44497aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextCauchy(org.apache.commons.math3.random.Well44497aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformExclusiveEndpoints(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextPermutation(org.apache.commons.math3.random.RandomDataTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testUnmatchedArrays(org.apache.commons.math3.stat.inference.GTestTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextGaussian(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testIndicatorFloat(org.apache.commons.math3.util.FastMathTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testConsistency(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBooleanDirect(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testMinMaxFloat(org.apache.commons.math3.util.FastMathTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testConsistency(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape142(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>66ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testBetaRangeAboveOne(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntPositiveRange(org.apache.commons.math3.random.RandomDataTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNexBoolean2(org.apache.commons.math3.random.ISAACTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNexBoolean2(org.apache.commons.math3.random.Well44497aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonEqualCounts(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformExclusiveEndpoints(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testModes(org.apache.commons.math3.random.ValueServerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntIAE(org.apache.commons.math3.random.RandomDataTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testSeeding(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntNegativeRange(org.apache.commons.math3.random.RandomDataTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextInversionDeviate(org.apache.commons.math3.random.Well44497aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.TDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoreLargeValues(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNexBytes(org.apache.commons.math3.random.Well19937cTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformExtremeValues(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextFloatDirect(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testSmallDf(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformIAE(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNexBytes(org.apache.commons.math3.random.Well19937aTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMath280(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextGaussian(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextIntExtremeValues(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.util.ArithmeticUtilsTest.testGcdConsistency(org.apache.commons.math3.util.ArithmeticUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextLongPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testConsistency(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDensities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLong2(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testDoubleNextAfterSpecialCases(org.apache.commons.math3.util.FastMathTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonBadCounts(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextInt2(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNexBytes(org.apache.commons.math3.random.Well512aTest)</name><time>51ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.analysis.function.LogitTest.testValueWithInverseFunction(org.apache.commons.math3.analysis.function.LogitTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextLongIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>119ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testConfig(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well512aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testLongly(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testDoubleDirect(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformIAE(org.apache.commons.math3.random.Well19937aTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHex(org.apache.commons.math3.random.Well1024aTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformExclusiveEndpoints(org.apache.commons.math3.random.Well44497bTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testReseed(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHex(org.apache.commons.math3.random.Well44497bTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGaussian(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextIntExtremeValues(org.apache.commons.math3.random.Well512aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testSampling(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextGaussian(org.apache.commons.math3.random.ISAACTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testGTestIndependance(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testDensities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextSecureLongIAE(org.apache.commons.math3.random.Well44497aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextSample(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDensities(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testPreconditions2(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLongDirect(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextLongExtremeValues(org.apache.commons.math3.random.Well44497bTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextLongIAE(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextFloatDirect(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testDoubleDirect(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.Well44497bTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well44497aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLong2(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testReseed(org.apache.commons.math3.random.Well512aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testFloatDirect(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextUniformExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextInversionDeviate(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextSecureHex(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.Well1024aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextExponential(org.apache.commons.math3.random.Well512aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testAtan2SpecialCases(org.apache.commons.math3.util.FastMathTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testMoments(org.apache.commons.math3.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformIAE(org.apache.commons.math3.random.Well44497bTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testReferenceCode(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextIntIAE(org.apache.commons.math3.random.Well44497aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHex(org.apache.commons.math3.random.Well44497aTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testGetCovarianceMatrix(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testSampling(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testPaired(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testSampling(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextSample(org.apache.commons.math3.random.Well512aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.SynchronizedRandomGeneratorTest.testAdapter(org.apache.commons.math3.random.SynchronizedRandomGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testFixedSeed(org.apache.commons.math3.random.ValueServerTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveSingle(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextLongIAE(org.apache.commons.math3.random.Well19937aTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testTwoSampleTHomoscedastic(org.apache.commons.math3.stat.inference.TTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHex(org.apache.commons.math3.random.Well512aTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions2(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.RandomDataTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextWeibull(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.MeanTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.MeanTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextIntNeg(org.apache.commons.math3.random.Well1024aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.TDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextSecureLongIAE(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNexBoolean2(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testReferenceCode(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInputSigmaOutOfRange(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testConfig(org.apache.commons.math3.random.Well44497aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextGaussian(org.apache.commons.math3.random.RandomDataTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInputSigmaDimensionMismatch(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLongPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testSampling(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextSecureIntIAE(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextLong2(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testPreconditions(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextWeibull(org.apache.commons.math3.random.ISAACTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextLongDirect(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextHex(org.apache.commons.math3.random.RandomDataTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformExtremeValues(org.apache.commons.math3.random.ISAACTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testPreconditions(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testEmptyReplayFile(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestIndependance1(org.apache.commons.math3.stat.inference.GTestTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testConfig(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextLongIAE(org.apache.commons.math3.random.Well44497bTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testReseed(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testNormalApproximateProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextGamma(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.RandomDataTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testMoments(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextSecureIntIAE(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextInversionDeviate(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextSample(org.apache.commons.math3.random.RandomDataTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testBoundariesDimensionMismatch(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextFloatDirect(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape10(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>51ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonUnEqualCounts(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextCauchy(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextIntExtremeValues(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testFill(org.apache.commons.math3.random.ValueServerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNexBytes(org.apache.commons.math3.random.Well1024aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextFloatDirect(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextIntIAE(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDensities(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextWeibull(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testDoubleDirect(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testExpSpecialCases(org.apache.commons.math3.util.FastMathTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testSeeding(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testDensities(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformExclusiveEndpoints(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextCauchy(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPermutation(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testGTestGoodnesOfFit(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testFloatDirect(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>55ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextLong2(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextExponential(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextLongIAE(org.apache.commons.math3.random.RandomDataTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHex(org.apache.commons.math3.random.Well19937aTest)</name><time>54ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well19937cTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextExponential(org.apache.commons.math3.random.Well1024aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBooleanDirect(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testIndicatorDouble(org.apache.commons.math3.util.FastMathTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextSecureLongIAE(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDensity(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBooleanDirect(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextLongIAE(org.apache.commons.math3.random.Well44497aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testFloatDirect(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextCauchy(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextSample(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextExponential(org.apache.commons.math3.random.Well44497aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testInitOutofbounds2(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGamma(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextLongExtremeValues(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testDensities(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextInversionDeviate(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testParameterAccessors(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testLargeValues(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testSmallSamples(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPermutation(org.apache.commons.math3.random.Well44497aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testConsistency(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testReseed(org.apache.commons.math3.random.RandomDataTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testFloatDirect(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBeta(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>62ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextLongExtremeValues(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testConfig(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testSeeding(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPermutation(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextF(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>35ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextIntNeg(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNexBoolean2(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareIndependence(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well1024aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.TDistributionTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.stat.inference.MannWhitneyUTestTest.testMannWhitneyUSimple(org.apache.commons.math3.stat.inference.MannWhitneyUTestTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformExclusiveEndpoints(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextUniformExclusiveEndpoints(org.apache.commons.math3.random.RandomDataTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLongIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformIAE(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>74ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testAlpha(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testConsistency(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPoisson(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>41ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextIntIAE(org.apache.commons.math3.random.Well1024aTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testMath905LargePositive(org.apache.commons.math3.util.FastMathTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextLongDirect(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextUniformIAE(org.apache.commons.math3.random.RandomDataTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGamma(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextSample(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPoisson(org.apache.commons.math3.random.Well512aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest.testWilcoxonSignedRankSimple(org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextIntExtremeValues(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testSmallSamples(org.apache.commons.math3.stat.inference.TTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextSecureLongIAE(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextWeibull(org.apache.commons.math3.random.Well512aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextIntIAE(org.apache.commons.math3.random.Well44497bTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testConsistency(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testOneSampleTTest(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testQuantiles(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testReferenceCode(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testMakotoNishimura(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextIntIAE(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPermutation(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBooleanDirect(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextLongDirect(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.ResizableDoubleArrayTest.testWithInitialCapacityAndExpansionFactor(org.apache.commons.math3.util.ResizableDoubleArrayTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextLongNegativeRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testNextDigest(org.apache.commons.math3.random.ValueServerTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testSeeding(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNexBytes(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveXY(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testSampling(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testNegativeObservedCounts(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextInt2(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextLong2(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquareIndependence(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextSecureHex(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextSecureLongIAE(org.apache.commons.math3.random.Well1024aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextWeibull(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextT(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testInputSigmaNegative(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLong2(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextInversionDeviate(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLongExtremeValues(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testSampling(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest.testAggregationConsistency(org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestSetsComparisonBadCounts(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextFloatDirect(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformExtremeValues(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextIntExtremeValues(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.OneWayAnovaTest.testAnovaTest(org.apache.commons.math3.stat.inference.OneWayAnovaTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLongIAE(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testFloatDirect(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformExclusiveEndpoints(org.apache.commons.math3.random.Well19937aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextSample(org.apache.commons.math3.random.Well1024aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testBetaRangeBelowMinusOne(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testExtremeValues(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformIAE(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextFloatDirect(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextLongDirect(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.nistData(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextCauchy(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testDoubleDirect(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSample(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSample(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextInversionDeviate(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testPaired(org.apache.commons.math3.stat.inference.TTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testSampling(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextCauchy(org.apache.commons.math3.random.Well512aTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextLong2(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNexBoolean2(org.apache.commons.math3.random.Well1024aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextIntPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextIntNeg(org.apache.commons.math3.random.Well44497bTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testSeeding(org.apache.commons.math3.random.Well512aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextInt2(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.inference.OneWayAnovaTest.testAnovaPValue(org.apache.commons.math3.stat.inference.OneWayAnovaTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.FDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformExtremeValues(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextInt2(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testCumulativeProbabilityAgainstStackOverflow(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextSecureIntIAE(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLongDirect(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testSeeding(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testPreconditions2(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testAsinSpecialCases(org.apache.commons.math3.util.FastMathTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testMean(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextCauchy(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testReplay(org.apache.commons.math3.random.ValueServerTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testZeroExpectedCounts(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBooleanDirect(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformExclusiveEndpoints(org.apache.commons.math3.random.ISAACTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.summary.ProductTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.summary.ProductTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBooleanDirect(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testDensities(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testDoubleDirect(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLongIAE(org.apache.commons.math3.random.Well1024aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextChiSquare(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>49ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextLongExtremeValues(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testSignumDouble(org.apache.commons.math3.util.FastMathTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNexBoolean2(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testSmallDf(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>86ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDensity(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextInt2(org.apache.commons.math3.random.Well44497aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.RandomDataTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testDensity(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testConsistency(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMoments(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape100(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>66ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextFloatDirect(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPoisson(org.apache.commons.math3.random.Well44497aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPoisson(org.apache.commons.math3.random.Well19937aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testDensities(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions4(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextLongExtremeValues(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextLongPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testReference(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextIntExtremeValues(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testDoubleScalbSpecialCases(org.apache.commons.math3.util.FastMathTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextIntNeg(org.apache.commons.math3.random.Well44497aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextInt2(org.apache.commons.math3.random.ISAACTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testSampling(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNexBoolean2(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testInference(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testDensities(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextCauchy(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testConfig(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testNegativeMean(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextGaussian(org.apache.commons.math3.random.Well1024aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testPerfect(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextFloatDirect(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testReferenceCode(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGamma(org.apache.commons.math3.random.Well19937cTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextSecureIntIAE(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testReseed(org.apache.commons.math3.random.Well1024aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testDensity(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>4675ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.051639777949432225</suspValue><description>Removed assignment to member variable nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.07856742013183861</suspValue><description>replaced call to next with a call to nextInt</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>88</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.07856742013183861</suspValue><description>replaced call to next with a call to nextInt</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>57ms</time></test></testsExecutionTime><patchExecutionTime>145ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.07856742013183861</suspValue><description>the call to org.apache.commons.math3.random.BitsStreamGenerator::next(I)I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>88</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.07856742013183861</suspValue><description>the call to org.apache.commons.math3.random.BitsStreamGenerator::next(I)I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.07856742013183861</suspValue><description>the call to next(I)I is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>88</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.07856742013183861</suspValue><description>the call to next(I)I is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.07856742013183861</suspValue><description>the call to next(I)I is guarded returning field nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>88</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.07856742013183861</suspValue><description>the call to next(I)I is guarded returning field nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.07856742013183861</suspValue><description>replaced call to org/apache/commons/math3/random/BitsStreamGenerator::next with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.07856742013183861</suspValue><description>replaced call to org/apache/commons/math3/random/BitsStreamGenerator::next with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.07856742013183861</suspValue><description>Substituted 26 with 27</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.07856742013183861</suspValue><description>Substituted 26 with 27</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>13</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.07856742013183861</suspValue><description>Substituted 26 with 27</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>23</index><block>1</block><killingTests/><suspValue>0.07856742013183861</suspValue><description>Substituted 2.220446049250313E-16 with 1.0</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.07856742013183861</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>60ms</time></test></testsExecutionTime><patchExecutionTime>118ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>1</block><killingTests/><suspValue>0.07856742013183861</suspValue><description>Replaced bitwise OR with AND</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>1</block><killingTests/><suspValue>0.07856742013183861</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.07856742013183861</suspValue><description>removed call to org/apache/commons/math3/random/BitsStreamGenerator::next</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.07856742013183861</suspValue><description>removed call to org/apache/commons/math3/random/BitsStreamGenerator::next</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>63ms</time></test></testsExecutionTime><patchExecutionTime>128ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>25</index><block>1</block><killingTests/><suspValue>0.07856742013183861</suspValue><description>replaced double return with 0.0d for org/apache/commons/math3/random/BitsStreamGenerator::nextDouble</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><block>1</block><killingTests/><suspValue>0.07856742013183861</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math3/random/BitsStreamGenerator::nextDouble</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>27</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to log(D)D with a call to log(DD)D</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>27</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to log(D)D with a call to log(DD)D</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>27</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to log(D)D with a call to log(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>63ms</time></test></testsExecutionTime><patchExecutionTime>156ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>27</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to log(D)D with a call to log(DD)D</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>27</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to log(D)D with a call to log(DD)D</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>27</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to log(D)D with a call to log(DD)D</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>the access to nextGaussian is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>61ms</time></test></testsExecutionTime><patchExecutionTime>116ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>52</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.16984155512168936</suspValue><description>the access to nextGaussian is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>the access to nextGaussian is guarded using field nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>52</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.16984155512168936</suspValue><description>the access to nextGaussian is guarded using field nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>2</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>the access to field org.apache.commons.math3.random.BitsStreamGenerator.nextGaussian is replaced by the call to org.apache.commons.math3.random.BitsStreamGenerator::nextDouble()D</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>52</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.16984155512168936</suspValue><description>the access to field org.apache.commons.math3.random.BitsStreamGenerator.nextGaussian is replaced by the call to org.apache.commons.math3.random.BitsStreamGenerator::nextDouble()D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>the access to field org.apache.commons.math3.random.BitsStreamGenerator.nextGaussian is replaced by the call to org.apache.commons.math3.random.BitsStreamGenerator::nextGaussian()D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>39ms</time></test></testsExecutionTime><patchExecutionTime>96ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>52</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.16984155512168936</suspValue><description>the access to field org.apache.commons.math3.random.BitsStreamGenerator.nextGaussian is replaced by the call to org.apache.commons.math3.random.BitsStreamGenerator::nextGaussian()D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='36'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>45</index><block>3</block><killingTests>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>access to field nextGaussian is replaced by access to local x</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testSampling(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGamma(org.apache.commons.math3.random.Well19937aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextGaussian(org.apache.commons.math3.random.Well44497bTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.SynchronizedRandomGeneratorTest.testAdapter(org.apache.commons.math3.random.SynchronizedRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testFixedSeed(org.apache.commons.math3.random.ValueServerTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGaussian(org.apache.commons.math3.random.Well19937cTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.VarianceTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.VarianceTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGaussian(org.apache.commons.math3.random.Well19937aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testNextDigest(org.apache.commons.math3.random.ValueServerTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testSeeding(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextGaussian(org.apache.commons.math3.random.RandomDataTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.summary.ProductTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.summary.ProductTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextGaussian(org.apache.commons.math3.random.Well1024aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testSeeding(org.apache.commons.math3.random.Well44497aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testSampling(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testSeeding(org.apache.commons.math3.random.Well1024aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testSeeding(org.apache.commons.math3.random.Well512aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testSeeding(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextGaussian(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testSeeding(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextGaussian(org.apache.commons.math3.random.ISAACTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextGaussian(org.apache.commons.math3.random.Well512aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testModes(org.apache.commons.math3.random.ValueServerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testSeeding(org.apache.commons.math3.random.Well19937aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGamma(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testSampling(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextGaussian(org.apache.commons.math3.random.Well44497aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGamma(org.apache.commons.math3.random.Well19937cTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testSeeding(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testSeeding(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.MeanTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.MeanTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>246ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>58</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.16984155512168936</suspValue><description>access to field nextGaussian is replaced by access to local random</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='36'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>45</index><block>3</block><killingTests>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>access to field nextGaussian is replaced by access to local y</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testSampling(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGamma(org.apache.commons.math3.random.Well19937aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextGaussian(org.apache.commons.math3.random.Well44497bTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.SynchronizedRandomGeneratorTest.testAdapter(org.apache.commons.math3.random.SynchronizedRandomGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testFixedSeed(org.apache.commons.math3.random.ValueServerTest)</name><time>79ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGaussian(org.apache.commons.math3.random.Well19937cTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.VarianceTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.VarianceTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGaussian(org.apache.commons.math3.random.Well19937aTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testNextDigest(org.apache.commons.math3.random.ValueServerTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testSeeding(org.apache.commons.math3.random.ISAACTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextGaussian(org.apache.commons.math3.random.RandomDataTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.summary.ProductTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.summary.ProductTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextGaussian(org.apache.commons.math3.random.Well1024aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testSeeding(org.apache.commons.math3.random.Well44497aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testSampling(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testSeeding(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testSeeding(org.apache.commons.math3.random.Well512aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testSeeding(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextGaussian(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testSeeding(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextGaussian(org.apache.commons.math3.random.ISAACTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextGaussian(org.apache.commons.math3.random.Well512aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testModes(org.apache.commons.math3.random.ValueServerTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testSeeding(org.apache.commons.math3.random.Well19937aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGamma(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>76ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testSampling(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextGaussian(org.apache.commons.math3.random.Well44497aTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGamma(org.apache.commons.math3.random.Well19937cTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testSeeding(org.apache.commons.math3.random.Well44497bTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>69ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testSeeding(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.MeanTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.MeanTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>581ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='36'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>45</index><block>3</block><killingTests>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>access to field nextGaussian is replaced by access to local alpha</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testSampling(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGamma(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextGaussian(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.SynchronizedRandomGeneratorTest.testAdapter(org.apache.commons.math3.random.SynchronizedRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testFixedSeed(org.apache.commons.math3.random.ValueServerTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGaussian(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.VarianceTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.VarianceTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGaussian(org.apache.commons.math3.random.Well19937aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testNextDigest(org.apache.commons.math3.random.ValueServerTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testSeeding(org.apache.commons.math3.random.ISAACTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextGaussian(org.apache.commons.math3.random.RandomDataTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.summary.ProductTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.summary.ProductTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextGaussian(org.apache.commons.math3.random.Well1024aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testSeeding(org.apache.commons.math3.random.Well44497aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testSampling(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testSeeding(org.apache.commons.math3.random.Well1024aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testSeeding(org.apache.commons.math3.random.Well512aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testSeeding(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextGaussian(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testSeeding(org.apache.commons.math3.random.Well19937cTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextGaussian(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextGaussian(org.apache.commons.math3.random.Well512aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testModes(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testSeeding(org.apache.commons.math3.random.Well19937aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGamma(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testSampling(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextGaussian(org.apache.commons.math3.random.Well44497aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGamma(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testSeeding(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testSeeding(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.MeanTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.MeanTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>193ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>22</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>local y is replaced by local x to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>26</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>local x is replaced by local y to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>63ms</time></test></testsExecutionTime><patchExecutionTime>123ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>30</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>local alpha is replaced by local x to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>local alpha is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>34</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>local y is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>37</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>local r is replaced by local x to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>41</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>local alpha is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>42</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>local y is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>26</index><block>3</block><killingTests>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>local x is replaced by local alpha to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testSeeding(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>104ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>57ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>243ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>30</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>local alpha is replaced by local y to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>local alpha is replaced by local y to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>61ms</time></test></testsExecutionTime><patchExecutionTime>118ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>34</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>local y is replaced by local alpha to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>37</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>local r is replaced by local y to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>41</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>local alpha is replaced by local y to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>42</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>local y is replaced by local alpha to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>local alpha is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>34</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>local y is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>37</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>local r is replaced by local alpha to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>41</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>local alpha is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>42</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>local y is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>41</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>local alpha is replaced by local random to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>42</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>local y is replaced by local random to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>61ms</time></test></testsExecutionTime><patchExecutionTime>118ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>16</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>access to local x is replaced by access to field nextGaussian</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>22</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>access to local y is replaced by access to field nextGaussian</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>26</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>access to local x is replaced by access to field nextGaussian</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>30</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>access to local alpha is replaced by access to field nextGaussian</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>access to local alpha is replaced by access to field nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>64ms</time></test></testsExecutionTime><patchExecutionTime>119ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>34</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>access to local y is replaced by access to field nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>61ms</time></test></testsExecutionTime><patchExecutionTime>122ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>37</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>access to local r is replaced by access to field nextGaussian</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='36'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>41</index><block>3</block><killingTests>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>access to local alpha is replaced by access to field nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testSampling(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGamma(org.apache.commons.math3.random.Well19937aTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextGaussian(org.apache.commons.math3.random.Well44497bTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.SynchronizedRandomGeneratorTest.testAdapter(org.apache.commons.math3.random.SynchronizedRandomGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testFixedSeed(org.apache.commons.math3.random.ValueServerTest)</name><time>68ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGaussian(org.apache.commons.math3.random.Well19937cTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.VarianceTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.VarianceTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGaussian(org.apache.commons.math3.random.Well19937aTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testNextDigest(org.apache.commons.math3.random.ValueServerTest)</name><time>51ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testSeeding(org.apache.commons.math3.random.ISAACTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextGaussian(org.apache.commons.math3.random.RandomDataTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.summary.ProductTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.summary.ProductTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextGaussian(org.apache.commons.math3.random.Well1024aTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testSeeding(org.apache.commons.math3.random.Well44497aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testSampling(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testSeeding(org.apache.commons.math3.random.Well1024aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testSeeding(org.apache.commons.math3.random.Well512aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testSeeding(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextGaussian(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testSeeding(org.apache.commons.math3.random.Well19937cTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextGaussian(org.apache.commons.math3.random.ISAACTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextGaussian(org.apache.commons.math3.random.Well512aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testModes(org.apache.commons.math3.random.ValueServerTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testSeeding(org.apache.commons.math3.random.Well19937aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGamma(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>57ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testSampling(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextGaussian(org.apache.commons.math3.random.Well44497aTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGamma(org.apache.commons.math3.random.Well19937cTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testSeeding(org.apache.commons.math3.random.Well44497bTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>60ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>62ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testSeeding(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.MeanTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.MeanTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>752ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='36'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>42</index><block>3</block><killingTests>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>access to local y is replaced by access to field nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testSampling(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGamma(org.apache.commons.math3.random.Well19937aTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextGaussian(org.apache.commons.math3.random.Well44497bTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.SynchronizedRandomGeneratorTest.testAdapter(org.apache.commons.math3.random.SynchronizedRandomGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testFixedSeed(org.apache.commons.math3.random.ValueServerTest)</name><time>70ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGaussian(org.apache.commons.math3.random.Well19937cTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.VarianceTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.VarianceTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGaussian(org.apache.commons.math3.random.Well19937aTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testNextDigest(org.apache.commons.math3.random.ValueServerTest)</name><time>42ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testSeeding(org.apache.commons.math3.random.ISAACTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextGaussian(org.apache.commons.math3.random.RandomDataTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.summary.ProductTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.summary.ProductTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextGaussian(org.apache.commons.math3.random.Well1024aTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testSeeding(org.apache.commons.math3.random.Well44497aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testSampling(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testSeeding(org.apache.commons.math3.random.Well1024aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testSeeding(org.apache.commons.math3.random.Well512aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testSeeding(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextGaussian(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testSeeding(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextGaussian(org.apache.commons.math3.random.ISAACTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextGaussian(org.apache.commons.math3.random.Well512aTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testModes(org.apache.commons.math3.random.ValueServerTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testSeeding(org.apache.commons.math3.random.Well19937aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGamma(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>55ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testSampling(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextGaussian(org.apache.commons.math3.random.Well44497aTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGamma(org.apache.commons.math3.random.Well19937cTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testSeeding(org.apache.commons.math3.random.Well44497bTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>60ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>99ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testSeeding(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.MeanTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.MeanTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>751ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>5</index><block>2</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>10</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to nextDouble with a call to nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to nextDouble with a call to nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>16ms</time></test></testsExecutionTime><patchExecutionTime>76ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>27</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to log with a call to sqrt</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sqrt with a call to cosh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to cos with a call to sqrt</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>75ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sin with a call to sqrt</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>27</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to log with a call to cosh</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sqrt with a call to sinh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to cos with a call to cosh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sin with a call to cosh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>27</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to log with a call to sinh</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sqrt with a call to tanh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to cos with a call to sinh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sin with a call to sinh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>27</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to log with a call to tanh</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sqrt with a call to acosh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to cos with a call to tanh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sin with a call to tanh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>27</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to log with a call to acosh</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sqrt with a call to asinh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to cos with a call to acosh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>71ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sin with a call to acosh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>27</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to log with a call to asinh</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sqrt with a call to atanh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to cos with a call to asinh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>60ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sin with a call to asinh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>64ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>27</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to log with a call to atanh</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sqrt with a call to signum</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to cos with a call to atanh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>64ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sin with a call to atanh</description><testsExecutionTime><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testSeeding(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>54ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>93ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>27</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to log with a call to signum</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sqrt with a call to nextUp</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to cos with a call to signum</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sin with a call to signum</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>27</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to log with a call to nextUp</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sqrt with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>52ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to cos with a call to nextUp</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>32ms</time></test></testsExecutionTime><patchExecutionTime>59ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sin with a call to nextUp</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>27</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to log with a call to exp</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sqrt with a call to expm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to cos with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>48ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to sin with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>10</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>the call to org.apache.commons.math3.random.BitsStreamGenerator::nextDouble()D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>64ms</time></test></testsExecutionTime><patchExecutionTime>119ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>the call to org.apache.commons.math3.random.BitsStreamGenerator::nextDouble()D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>the access to nextGaussian is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>52</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.16984155512168936</suspValue><description>the access to nextGaussian is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>the access to nextGaussian is guarded returning field nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>52</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.16984155512168936</suspValue><description>the access to nextGaussian is guarded returning field nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>10</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>the call to nextDouble()D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>the call to nextDouble()D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>63ms</time></test></testsExecutionTime><patchExecutionTime>126ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>15</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>the call to nextDouble()D is guarded returning local x</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>10</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>the call to nextDouble()D is guarded returning field nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>61ms</time></test></testsExecutionTime><patchExecutionTime>116ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>the call to nextDouble()D is guarded returning field nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>27</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>replaced call to org/apache/commons/math3/util/FastMath::log with argument</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to org/apache/commons/math3/util/FastMath::sqrt with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to org/apache/commons/math3/util/FastMath::cos with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced call to org/apache/commons/math3/util/FastMath::sin with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>19</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>Substituted 6.283185307179586 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>25</index><block>3</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>Substituted -2.0 with 1.0</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>57</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.16984155512168936</suspValue><description>Substituted NaN with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>60ms</time></test></testsExecutionTime><patchExecutionTime>123ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>44</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>2</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>negated conditional</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>2</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>removed call to org/apache/commons/math3/random/BitsStreamGenerator::nextDouble</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>removed call to org/apache/commons/math3/random/BitsStreamGenerator::nextDouble</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>50ms</time></test></testsExecutionTime><patchExecutionTime>106ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>27</index><block>3</block><killingTests>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>removed call to org/apache/commons/math3/util/FastMath::log</description><testsExecutionTime><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testSeeding(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>84ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>50ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>236ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>removed call to org/apache/commons/math3/util/FastMath::sqrt</description><testsExecutionTime><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testSeeding(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>93ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>134ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>removed call to org/apache/commons/math3/util/FastMath::cos</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>removed call to org/apache/commons/math3/util/FastMath::sin</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>62</index><block>4</block><killingTests>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced double return with 0.0d for org/apache/commons/math3/random/BitsStreamGenerator::nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testSeeding(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>91ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>137ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>6</index><block>2</block><killingTests/><suspValue>0.1690308509457033</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='36'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testSampling(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGamma(org.apache.commons.math3.random.Well19937aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextGaussian(org.apache.commons.math3.random.Well44497bTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.SynchronizedRandomGeneratorTest.testAdapter(org.apache.commons.math3.random.SynchronizedRandomGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testFixedSeed(org.apache.commons.math3.random.ValueServerTest)</name><time>67ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGaussian(org.apache.commons.math3.random.Well19937cTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.VarianceTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.VarianceTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGaussian(org.apache.commons.math3.random.Well19937aTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testNextDigest(org.apache.commons.math3.random.ValueServerTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testSeeding(org.apache.commons.math3.random.ISAACTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextGaussian(org.apache.commons.math3.random.RandomDataTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.summary.ProductTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.summary.ProductTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextGaussian(org.apache.commons.math3.random.Well1024aTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testSeeding(org.apache.commons.math3.random.Well44497aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testSampling(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testSeeding(org.apache.commons.math3.random.Well1024aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testSeeding(org.apache.commons.math3.random.Well512aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testSeeding(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextGaussian(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testSeeding(org.apache.commons.math3.random.Well19937cTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextGaussian(org.apache.commons.math3.random.ISAACTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextGaussian(org.apache.commons.math3.random.Well512aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testModes(org.apache.commons.math3.random.ValueServerTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testSeeding(org.apache.commons.math3.random.Well19937aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGamma(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>60ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testSampling(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextGaussian(org.apache.commons.math3.random.Well44497aTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGamma(org.apache.commons.math3.random.Well19937cTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testSeeding(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>61ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>102ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testSeeding(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.MeanTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.MeanTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>726ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>62</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math3/random/BitsStreamGenerator::nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='36'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>45</index><block>3</block><killingTests>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</killingTests><suspValue>0.1690308509457033</suspValue><description>Removed assignment to member variable nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testSampling(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGamma(org.apache.commons.math3.random.Well19937aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextGaussian(org.apache.commons.math3.random.Well44497bTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.SynchronizedRandomGeneratorTest.testAdapter(org.apache.commons.math3.random.SynchronizedRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testFixedSeed(org.apache.commons.math3.random.ValueServerTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGaussian(org.apache.commons.math3.random.Well19937cTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.VarianceTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.VarianceTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGaussian(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testNextDigest(org.apache.commons.math3.random.ValueServerTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testSeeding(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataTest.testNextGaussian(org.apache.commons.math3.random.RandomDataTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.summary.ProductTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.summary.ProductTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextGaussian(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testSeeding(org.apache.commons.math3.random.Well44497aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testSampling(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testSeeding(org.apache.commons.math3.random.Well1024aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testSeeding(org.apache.commons.math3.random.Well512aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testSeeding(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextGaussian(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testSeeding(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextGaussian(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextGaussian(org.apache.commons.math3.random.Well512aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testModes(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testSeeding(org.apache.commons.math3.random.Well19937aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGamma(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testSampling(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextGaussian(org.apache.commons.math3.random.Well44497aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGamma(org.apache.commons.math3.random.Well19937cTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testSeeding(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testSeeding(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.MeanTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.MeanTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>246ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextGaussian</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>58</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.16984155512168936</suspValue><description>Removed assignment to member variable nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054312544659356844</suspValue><description>Removed assignment to member variable rand</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054312544659356844</suspValue><description>Removed assignment to member variable secRand</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>714</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06603381797442179</suspValue><description>the access to rand is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>717</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>13</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06603381797442179</suspValue><description>the access to rand is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>714</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06603381797442179</suspValue><description>the access to rand is guarded using field rand</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>717</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>13</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06603381797442179</suspValue><description>the access to rand is guarded using field rand</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>714</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06603381797442179</suspValue><description>the access to field org.apache.commons.math3.random.RandomDataGenerator.rand is replaced by the call to org.apache.commons.math3.random.RandomDataGenerator::getRan()Lorg/apache/commons/math3/random/RandomGenerator;</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>717</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>13</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06603381797442179</suspValue><description>the access to field org.apache.commons.math3.random.RandomDataGenerator.rand is replaced by the call to org.apache.commons.math3.random.RandomDataGenerator::getRan()Lorg/apache/commons/math3/random/RandomGenerator;</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>715</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to initRan with a call to reSeedSecure</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>715</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to initRan with a call to reSeed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>714</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06603381797442179</suspValue><description>the access to rand is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>717</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>13</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06603381797442179</suspValue><description>the access to rand is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>714</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06603381797442179</suspValue><description>the access to rand is guarded returning field rand</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>717</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>13</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06603381797442179</suspValue><description>the access to rand is guarded returning field rand</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>715</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>the call to initRan()V is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>715</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>the call to initRan()V is guarded returning field rand</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>715</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>the call to org.apache.commons.math3.random.RandomDataGenerator::initRan()V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>714</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06603381797442179</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>35ms</time></test></testsExecutionTime><patchExecutionTime>108ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>717</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>14</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06603381797442179</suspValue><description>replaced return value with null for org/apache/commons/math3/random/RandomDataGenerator::getRan</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>714</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06603381797442179</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>714</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06603381797442179</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>717</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06603381797442179</suspValue><description>mutated return of Object value for org/apache/commons/math3/random/RandomDataGenerator::getRan to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>getRan</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/random/RandomGenerator;</methodDescription><lineNumber>715</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>removed call to org/apache/commons/math3/random/RandomDataGenerator::initRan</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>54ms</time></test></testsExecutionTime><patchExecutionTime>67ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to &#60;init&#62;(J)V with a call to &#60;init&#62;([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>6</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>replaced call to currentTimeMillis with a call to nanoTime</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>removed call to org/apache/commons/math3/random/Well19937c::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>Replaced long addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>6</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>removed call to java/lang/System::currentTimeMillis</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>8</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>removed call to java/lang/System::identityHashCode</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>initRan</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>12</index><block>4</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06617825960083584</suspValue><description>Removed assignment to member variable rand</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>MethodNameMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>the call to factory method org.apache.commons.math3.random.RandomDataGenerator.getRan()Lorg/apache/commons/math3/random/RandomGenerator; is replaced by an instantiation of type org.apache.commons.math3.random.RandomAdaptorTest$ConstantGenerator using (D)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>MethodNameMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>the call to factory method org.apache.commons.math3.random.RandomDataGenerator.getRan()Lorg/apache/commons/math3/random/RandomGenerator; is replaced by an instantiation of type org.apache.commons.math3.random.SynchronizedRandomGenerator using (Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>MethodNameMutator_3</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>the call to factory method org.apache.commons.math3.random.RandomDataGenerator.getRan()Lorg/apache/commons/math3/random/RandomGenerator; is replaced by an instantiation of type org.apache.commons.math3.random.BitsStreamGenerator using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>MethodNameMutator_5</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>the call to factory method org.apache.commons.math3.random.RandomDataGenerator.getRan()Lorg/apache/commons/math3/random/RandomGenerator; is replaced by an instantiation of type org.apache.commons.math3.random.RandomAdaptorTest$ConstantGenerator using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>38ms</time></test></testsExecutionTime><patchExecutionTime>75ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>access to local seed is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>the call to org.apache.commons.math3.random.RandomDataGenerator::getRan()Lorg/apache/commons/math3/random/RandomGenerator; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>the call to getRan()Lorg/apache/commons/math3/random/RandomGenerator; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>the call to getRan()Lorg/apache/commons/math3/random/RandomGenerator; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>the call to getRan()Lorg/apache/commons/math3/random/RandomGenerator; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>the call to getRan()Lorg/apache/commons/math3/random/RandomGenerator; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>the call to getRan()Lorg/apache/commons/math3/random/RandomGenerator; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>the call to org.apache.commons.math3.random.RandomGenerator::setSeed(J)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>removed call to org/apache/commons/math3/random/RandomDataGenerator::getRan</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>648</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06632365324280728</suspValue><description>removed call to org/apache/commons/math3/random/RandomGenerator::setSeed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06814662756363819</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>68ms</time></test></testsExecutionTime><patchExecutionTime>80ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06814662756363819</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06814662756363819</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06814662756363819</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06814662756363819</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06814662756363819</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>77</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>21</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06814662756363819</suspValue><description>access to field random is replaced by access to local rng</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06814662756363819</suspValue><description>removed call to org/apache/commons/math3/random/RandomDataImpl::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06814662756363819</suspValue><description>Substituted 1.0E-6 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>61ms</time></test></testsExecutionTime><patchExecutionTime>122ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>11</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06814662756363819</suspValue><description>Removed assignment to member variable randomData</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06814662756363819</suspValue><description>Removed assignment to member variable solverAbsoluteAccuracy</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>21</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06814662756363819</suspValue><description>Removed assignment to member variable random</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to reSeed(J)V with a call to reSeed()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to reSeed(J)V with a call to reSeed()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to reSeed(J)V with a call to reSeed()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to reSeed(J)V with a call to reSeed()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to reSeed(J)V with a call to reSeed()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to reSeed(J)V with a call to reSeed()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the access to random is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the access to randomData is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the access to random is guarded using field random</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the access to randomData is guarded using field randomData</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>access to local seed is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>access to local seed is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>replaced call to reSeed with a call to reSeedSecure</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the access to random is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the access to randomData is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the access to random is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the access to randomData is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the access to random is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the access to randomData is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the call to reSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the call to reSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the call to reSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the call to reSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the call to reSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the call to org.apache.commons.math3.random.RandomGenerator::setSeed(J)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>the call to org.apache.commons.math3.random.RandomDataImpl::reSeed(J)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>removed call to org/apache/commons/math3/random/RandomGenerator::setSeed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractRealDistribution</mutatedClass><mutatedMethod>reseedRandomGenerator</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.3535533905932738</suspValue><description>removed call to org/apache/commons/math3/random/RandomDataImpl::reSeed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054473471070284336</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054473471070284336</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054473471070284336</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054473471070284336</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054473471070284336</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054473471070284336</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054473471070284336</suspValue><description>removed call to org/apache/commons/math3/random/RandomDataGenerator::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>11</index><block>0</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.054473471070284336</suspValue><description>Removed assignment to member variable delegate</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>replaced call to reSeed(J)V with a call to reSeed()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>replaced call to reSeed(J)V with a call to reSeed()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>replaced call to reSeed(J)V with a call to reSeed()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>63ms</time></test></testsExecutionTime><patchExecutionTime>128ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>replaced call to reSeed(J)V with a call to reSeed()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>replaced call to reSeed(J)V with a call to reSeed()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>replaced call to reSeed(J)V with a call to reSeed()V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>the access to delegate is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>the access to delegate is guarded using field delegate</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>the access to field org.apache.commons.math3.random.RandomDataImpl.delegate is replaced by the call to org.apache.commons.math3.random.RandomDataImpl::getDelegate()Lorg/apache/commons/math3/random/RandomDataGenerator;</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>access to local seed is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>replaced call to reSeed with a call to reSeedSecure</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>the access to delegate is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>the access to delegate is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>the access to delegate is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>the call to reSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>the call to reSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>the call to reSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>the call to reSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>the call to reSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>the call to org.apache.commons.math3.random.RandomDataGenerator::reSeed(J)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>reSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>461</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</killingTests><suspValue>0.06661733875264914</suspValue><description>removed call to org/apache/commons/math3/random/RandomDataGenerator::reSeed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
</mutations>
