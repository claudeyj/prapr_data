<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the access to start is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>9</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to start is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>15</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to lowerBound is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>80</index><block>26</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39223227027636803</suspValue><description>the access to upperBound is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the access to start is guarded using field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>9</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to start is guarded using field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>15</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to lowerBound is guarded using field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>80</index><block>26</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39223227027636803</suspValue><description>the access to upperBound is guarded using field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.start is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getStartPoint()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>9</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.start is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getStartPoint()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>15</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.lowerBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getStartPoint()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>80</index><block>26</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39223227027636803</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.upperBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getStartPoint()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.start is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getLowerBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>9</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.start is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getLowerBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>15</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.lowerBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getLowerBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>80</index><block>26</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39223227027636803</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.upperBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getLowerBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.start is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getUpperBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>9</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.start is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getUpperBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>15</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.lowerBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getUpperBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>80</index><block>26</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39223227027636803</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.upperBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getUpperBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>replaced access to start with an access to lowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>9</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>replaced access to start with an access to lowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>15</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>replaced access to lowerBound with an access to start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>80</index><block>26</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39223227027636803</suspValue><description>replaced access to upperBound with an access to start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>replaced access to start with an access to upperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>9</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>replaced access to start with an access to upperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>15</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>replaced access to lowerBound with an access to upperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>80</index><block>26</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39223227027636803</suspValue><description>replaced access to upperBound with an access to lowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the access to start is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>9</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to start is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>15</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to lowerBound is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>80</index><block>26</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39223227027636803</suspValue><description>the access to upperBound is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the access to start is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>9</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to start is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>15</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to lowerBound is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>80</index><block>26</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39223227027636803</suspValue><description>the access to upperBound is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the access to start is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>9</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to start is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>15</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to lowerBound is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>80</index><block>26</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39223227027636803</suspValue><description>the access to upperBound is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>18</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>81</index><block>26</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39223227027636803</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>18</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>16</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>81</index><block>26</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39223227027636803</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>18</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>16</index><block>19</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>checkParameters</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>81</index><block>26</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39223227027636803</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>35ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>MethodNameMutator_0</mutator><index>11</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the call to factory method [D.clone()Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>MethodNameMutator_1</mutator><index>11</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the call to factory method [D.clone()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.SimplePointCheckerTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>MethodNameMutator_2</mutator><index>11</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the call to factory method [D.clone()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.PointVectorValuePairTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>MethodNameMutator_3</mutator><index>11</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the call to factory method [D.clone()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.SimpleVectorValueCheckerTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the access to lowerBound is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>10</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the access to lowerBound is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the access to lowerBound is guarded using field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>10</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the access to lowerBound is guarded using field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.lowerBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getStartPoint()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>10</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.lowerBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getStartPoint()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.lowerBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getLowerBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>10</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.lowerBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getLowerBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.lowerBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getUpperBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>10</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.lowerBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getUpperBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>replaced access to lowerBound with an access to start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>10</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>replaced access to lowerBound with an access to start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>replaced access to lowerBound with an access to upperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>10</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>replaced access to lowerBound with an access to upperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>11</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the call to [D::clone()Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the access to lowerBound is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>10</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the access to lowerBound is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the access to lowerBound is guarded returning field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>10</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the access to lowerBound is guarded returning field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>11</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the call to clone()Ljava/lang/Object; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>11</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the call to clone()Ljava/lang/Object; is guarded returning field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>11</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>the call to clone()Ljava/lang/Object; is guarded returning field lowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>11</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>removed call to [D::clone</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>14</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>replaced return value with null for org/apache/commons/math3/optim/BaseMultivariateOptimizer::getLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getLowerBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><block>14</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.4</suspValue><description>mutated return of Object value for org/apache/commons/math3/optim/BaseMultivariateOptimizer::getLowerBound to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>MethodNameMutator_0</mutator><index>11</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the call to factory method [D.clone()Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>MethodNameMutator_1</mutator><index>11</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the call to factory method [D.clone()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.SimplePointCheckerTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>MethodNameMutator_2</mutator><index>11</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the call to factory method [D.clone()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.PointVectorValuePairTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>MethodNameMutator_3</mutator><index>11</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the call to factory method [D.clone()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.SimpleVectorValueCheckerTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the access to start is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the access to start is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the access to start is guarded using field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the access to start is guarded using field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.start is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getStartPoint()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.start is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getStartPoint()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.start is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getLowerBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.start is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getLowerBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.start is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getUpperBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.start is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getUpperBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>replaced access to start with an access to lowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>replaced access to start with an access to lowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>replaced access to start with an access to upperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>replaced access to start with an access to upperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>11</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the call to [D::clone()Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the access to start is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the access to start is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the access to start is guarded returning field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the access to start is guarded returning field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>11</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the call to clone()Ljava/lang/Object; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>11</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the call to clone()Ljava/lang/Object; is guarded returning field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>11</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>the call to clone()Ljava/lang/Object; is guarded returning field lowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>9</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>11</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>removed call to [D::clone</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>14</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>replaced return value with null for org/apache/commons/math3/optim/BaseMultivariateOptimizer::getStartPoint</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>9</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>9</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getStartPoint</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><block>11</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.401147778542877</suspValue><description>mutated return of Object value for org/apache/commons/math3/optim/BaseMultivariateOptimizer::getStartPoint to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>MethodNameMutator_0</mutator><index>11</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the call to factory method [D.clone()Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>MethodNameMutator_1</mutator><index>11</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the call to factory method [D.clone()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.SimplePointCheckerTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>MethodNameMutator_2</mutator><index>11</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the call to factory method [D.clone()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.PointVectorValuePairTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>MethodNameMutator_3</mutator><index>11</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the call to factory method [D.clone()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.SimpleVectorValueCheckerTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the access to upperBound is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the access to upperBound is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the access to upperBound is guarded using field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the access to upperBound is guarded using field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.upperBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getStartPoint()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.upperBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getStartPoint()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.upperBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getLowerBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.upperBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getLowerBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.upperBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getUpperBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the access to field org.apache.commons.math3.optim.BaseMultivariateOptimizer.upperBound is replaced by the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::getUpperBound()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>replaced access to upperBound with an access to start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>replaced access to upperBound with an access to start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>replaced access to upperBound with an access to lowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>replaced access to upperBound with an access to lowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>11</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the call to [D::clone()Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the access to upperBound is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the access to upperBound is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the access to upperBound is guarded returning field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the access to upperBound is guarded returning field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>11</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the call to clone()Ljava/lang/Object; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>11</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the call to clone()Ljava/lang/Object; is guarded returning field start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>11</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>the call to clone()Ljava/lang/Object; is guarded returning field lowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>15</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>11</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>removed call to [D::clone</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>14</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>replaced return value with null for org/apache/commons/math3/optim/BaseMultivariateOptimizer::getUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>15</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>15</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>getUpperBound</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><block>17</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40703866324070626</suspValue><description>mutated return of Object value for org/apache/commons/math3/optim/BaseMultivariateOptimizer::getUpperBound to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>66</lineNumber><mutator>MethodNameMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to factory method org.apache.commons.math3.optim.BaseOptimizer.optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>66</lineNumber><mutator>MethodNameMutator_1</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to factory method org.apache.commons.math3.optim.BaseOptimizer.optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.SimplePointCheckerTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>66</lineNumber><mutator>MethodNameMutator_2</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to factory method org.apache.commons.math3.optim.BaseOptimizer.optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.PointVectorValuePairTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>66</lineNumber><mutator>MethodNameMutator_3</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to factory method org.apache.commons.math3.optim.BaseOptimizer.optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.SimpleVectorValueCheckerTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>66</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to org.apache.commons.math3.optim.BaseOptimizer::optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>66</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to optimize([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>removed call to org/apache/commons/math3/optim/BaseOptimizer::optimize</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>replaced return value with null for org/apache/commons/math3/optim/BaseMultivariateOptimizer::optimize</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>mutated return of Object value for org/apache/commons/math3/optim/BaseMultivariateOptimizer::optimize to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>replaced access to start with an access to lowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>replaced access to start with an access to upperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>local arr$ is replaced by local optData to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>18</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>local i$ is replaced by local len$ to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>19</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>local len$ is replaced by local i$ to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>21</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>local arr$ is replaced by local optData to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>22</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>local i$ is replaced by local len$ to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the call to org.apache.commons.math3.optim.InitialGuess::getInitialGuess()[D is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the call to getInitialGuess()[D is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>72</index><block>8</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to checkParameters()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the call to getInitialGuess()[D is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>72</index><block>8</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to checkParameters()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the call to getInitialGuess()[D is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>72</index><block>8</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to checkParameters()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the call to getInitialGuess()[D is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>72</index><block>8</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to checkParameters()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the call to getInitialGuess()[D is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>72</index><block>8</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to checkParameters()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to org.apache.commons.math3.optim.BaseOptimizer::parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>72</index><block>8</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>the call to org.apache.commons.math3.optim.BaseMultivariateOptimizer::checkParameters()V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>67</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>Changed increment from 1 to -1</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>15</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>removed call to org/apache/commons/math3/optim/InitialGuess::getInitialGuess</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>44</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>44</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>removed call to org/apache/commons/math3/optim/BaseOptimizer::parseOptimizationData</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>72</index><block>8</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3634218921558155</suspValue><description>removed call to org/apache/commons/math3/optim/BaseMultivariateOptimizer::checkParameters</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseMultivariateOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseMultivariateOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>Removed assignment to member variable start</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>32ms</time></test></testsExecutionTime><patchExecutionTime>123ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>32</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>32</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>32</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>32</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>32</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>27ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>32</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>32</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>32</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>32</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>32</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>32</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>32</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>replaced call to &#60;init&#62;(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>48</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>access to field checker is replaced by access to local checker</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>removed call to org/apache/commons/math3/optim/BaseOptimizer$MaxEvalCallback::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>removed call to org/apache/commons/math3/util/Incrementor::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>31</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>removed call to org/apache/commons/math3/optim/BaseOptimizer$MaxIterCallback::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>32</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>removed call to org/apache/commons/math3/util/Incrementor::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>27</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>Removed assignment to member variable checker</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>21</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>Removed assignment to member variable evaluations</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>33</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.34740416688982556</suspValue><description>Removed assignment to member variable iterations</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getConvergenceChecker</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/optim/ConvergenceChecker;</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40824829046386296</suspValue><description>the access to checker is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getConvergenceChecker</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/optim/ConvergenceChecker;</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40824829046386296</suspValue><description>the access to checker is guarded using field checker</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getConvergenceChecker</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/optim/ConvergenceChecker;</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40824829046386296</suspValue><description>the access to field org.apache.commons.math3.optim.BaseOptimizer.checker is replaced by the call to org.apache.commons.math3.optim.BaseOptimizer::getConvergenceChecker()Lorg/apache/commons/math3/optim/ConvergenceChecker;</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getConvergenceChecker</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/optim/ConvergenceChecker;</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40824829046386296</suspValue><description>the access to checker is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getConvergenceChecker</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/optim/ConvergenceChecker;</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40824829046386296</suspValue><description>the access to checker is guarded returning field checker</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getConvergenceChecker</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/optim/ConvergenceChecker;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40824829046386296</suspValue><description>replaced return value with null for org/apache/commons/math3/optim/BaseOptimizer::getConvergenceChecker</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getConvergenceChecker</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/optim/ConvergenceChecker;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.40824829046386296</suspValue><description>mutated return of Object value for org/apache/commons/math3/optim/BaseOptimizer::getConvergenceChecker to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getIterations</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>1.0</suspValue><description>the access to iterations is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getIterations</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>1.0</suspValue><description>the access to iterations is guarded using field evaluations</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>52ms</time></test></testsExecutionTime><patchExecutionTime>60ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='28'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getIterations</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>1</block><killingTests/><suspValue>1.0</suspValue><description>replaced access to iterations with an access to evaluations</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testGetIterations(org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testConstrainedRosen(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>239ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testMaximize(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>364ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigar(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>170ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testSsDiffPow(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>387ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testTwoAxes(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>464ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testGetIterations(org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testTablet(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>207ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testRosen(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>234ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testDiffPow(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>185ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testRastrigin(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>886ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testElliRotated(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>256ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize2(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigTab(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>182ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testSphere(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>132ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize2(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testTrivial(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testDiagonalRosen(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>810ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testEllipse(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>275ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigarWithBoundaries(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>188ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize2(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testAckley(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>151ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaximize2(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>5184ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getIterations</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCount with a call to getMaximalCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getIterations</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>1.0</suspValue><description>the call to org.apache.commons.math3.util.Incrementor::getCount()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getIterations</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>1.0</suspValue><description>the access to iterations is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getIterations</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>1.0</suspValue><description>the call to getCount()I is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getIterations</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>1.0</suspValue><description>removed call to org/apache/commons/math3/util/Incrementor::getCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getIterations</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>1.0</suspValue><description>replaced int return with 0 for org/apache/commons/math3/optim/BaseOptimizer::getIterations</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='28'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>getIterations</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><block>1</block><killingTests/><suspValue>1.0</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testGetIterations(org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testConstrainedRosen(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>293ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testMaximize(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>421ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigar(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>231ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testSsDiffPow(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>406ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testTwoAxes(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>435ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testGetIterations(org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testTablet(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>216ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testRosen(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>224ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testDiffPow(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>264ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testRastrigin(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>904ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testElliRotated(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>305ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize2(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigTab(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>253ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testSphere(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>276ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize2(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testTrivial(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testDiagonalRosen(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>780ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testEllipse(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>237ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigarWithBoundaries(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>218ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize2(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testAckley(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>171ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaximize2(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest)</name><time>17ms</time></test></testsExecutionTime><patchExecutionTime>5800ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>replaced call to incrementCount()V with a call to incrementCount(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>replaced call to incrementCount()V with a call to incrementCount(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>replaced call to incrementCount()V with a call to incrementCount(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>replaced call to incrementCount()V with a call to incrementCount(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>replaced call to incrementCount()V with a call to incrementCount(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>replaced call to incrementCount()V with a call to incrementCount(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>the access to evaluations is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>the access to evaluations is guarded using field evaluations</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>replaced access to evaluations with an access to iterations</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>replaced call to incrementCount with a call to resetCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>the access to evaluations is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>the access to evaluations is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>the access to evaluations is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>the call to incrementCount()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>the call to incrementCount()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>the call to incrementCount()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>the call to incrementCount()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>the call to incrementCount()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>the call to org.apache.commons.math3.util.Incrementor::incrementCount()V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>incrementEvaluationCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.39009474880274697</suspValue><description>removed call to org/apache/commons/math3/util/Incrementor::incrementCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>143</lineNumber><mutator>MethodNameMutator_0</mutator><index>19</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the call to factory method org.apache.commons.math3.optim.BaseOptimizer.doOptimize()Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>143</lineNumber><mutator>MethodNameMutator_1</mutator><index>19</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the call to factory method org.apache.commons.math3.optim.BaseOptimizer.doOptimize()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.SimplePointCheckerTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>143</lineNumber><mutator>MethodNameMutator_2</mutator><index>19</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the call to factory method org.apache.commons.math3.optim.BaseOptimizer.doOptimize()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.PointVectorValuePairTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>143</lineNumber><mutator>MethodNameMutator_3</mutator><index>19</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the call to factory method org.apache.commons.math3.optim.BaseOptimizer.doOptimize()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.SimpleVectorValueCheckerTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the access to evaluations is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>141</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>14</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the access to iterations is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the access to evaluations is guarded using field evaluations</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>141</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>14</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the access to iterations is guarded using field evaluations</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>replaced access to evaluations with an access to iterations</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>141</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>14</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>replaced access to iterations with an access to evaluations</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>10</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>replaced call to resetCount with a call to incrementCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>40ms</time></test></testsExecutionTime><patchExecutionTime>106ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>141</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>replaced call to resetCount with a call to incrementCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>19</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the call to org.apache.commons.math3.optim.BaseOptimizer::doOptimize()Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the access to evaluations is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>141</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>14</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the access to iterations is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the call to parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>10</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the call to resetCount()V is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>141</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the call to resetCount()V is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>19</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the call to doOptimize()Ljava/lang/Object; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the call to org.apache.commons.math3.optim.BaseOptimizer::parseOptimizationData([Lorg/apache/commons/math3/optim/OptimizationData;)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>10</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the call to org.apache.commons.math3.util.Incrementor::resetCount()V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>141</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>the call to org.apache.commons.math3.util.Incrementor::resetCount()V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>19</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>removed call to org/apache/commons/math3/optim/BaseOptimizer::doOptimize</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>20</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>replaced return value with null for org/apache/commons/math3/optim/BaseOptimizer::optimize</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>mutated return of Object value for org/apache/commons/math3/optim/BaseOptimizer::optimize to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>removed call to org/apache/commons/math3/optim/BaseOptimizer::parseOptimizationData</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>removed call to org/apache/commons/math3/util/Incrementor::resetCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>optimize</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)Ljava/lang/Object;</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>removed call to org/apache/commons/math3/util/Incrementor::resetCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>28</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the access to evaluations is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>28</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the access to evaluations is guarded using field evaluations</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>28</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>replaced access to evaluations with an access to iterations</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>190</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>6</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>local arr$ is replaced by local optData to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>190</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>local i$ is replaced by local len$ to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>190</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>14</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>local len$ is replaced by local i$ to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>190</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>16</index><block>6</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>local arr$ is replaced by local optData to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>190</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>17</index><block>6</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>local i$ is replaced by local len$ to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>32</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>replaced call to setMaximalCount with a call to incrementCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>31</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the call to org.apache.commons.math3.optim.MaxEval::getMaxEval()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>28</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the access to evaluations is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>28</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the access to evaluations is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>28</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the access to evaluations is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>31</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the call to getMaxEval()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>32</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the call to setMaximalCount(I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>31</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the call to getMaxEval()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>32</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the call to setMaximalCount(I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>31</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the call to getMaxEval()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>32</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the call to setMaximalCount(I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>31</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the call to getMaxEval()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>32</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the call to setMaximalCount(I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>31</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the call to getMaxEval()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>32</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the call to setMaximalCount(I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>32</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the call to org.apache.commons.math3.util.Incrementor::setMaximalCount(I)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>15</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>54</index><block>10</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>Changed increment from 1 to -1</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>10</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>191</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><block>6</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><block>8</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>31</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>removed call to org/apache/commons/math3/optim/MaxEval::getMaxEval</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>191</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>24</index><block>6</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>40</index><block>8</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>191</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>24</index><block>6</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>40</index><block>8</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>15</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>15</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.35120936436995154</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseOptimizer.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.BaseOptimizer</mutatedClass><mutatedMethod>parseOptimizationData</mutatedMethod><methodDescription>([Lorg/apache/commons/math3/optim/OptimizationData;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>removed call to org/apache/commons/math3/util/Incrementor::setMaximalCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V</methodDescription><lineNumber>41</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1781741612749496</suspValue><description>the access to field org.apache.commons.math3.util.Incrementor.count is replaced by the call to org.apache.commons.math3.util.Incrementor::setMaximalCount(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>24</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1781741612749496</suspValue><description>the access to field org.apache.commons.math3.util.Incrementor.maximalCount is replaced by the call to org.apache.commons.math3.util.Incrementor::setMaximalCount(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V</methodDescription><lineNumber>41</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1781741612749496</suspValue><description>the access to field org.apache.commons.math3.util.Incrementor.count is replaced by the call to org.apache.commons.math3.util.Incrementor::incrementCount(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>24</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1781741612749496</suspValue><description>the access to field org.apache.commons.math3.util.Incrementor.maximalCount is replaced by the call to org.apache.commons.math3.util.Incrementor::incrementCount(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V</methodDescription><lineNumber>41</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1781741612749496</suspValue><description>replaced access to count with an access to maximalCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>24</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1781741612749496</suspValue><description>replaced access to maximalCount with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V</methodDescription><lineNumber>41</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1781741612749496</suspValue><description>access to field count is replaced by access to local max</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>24</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1781741612749496</suspValue><description>access to field maximalCount is replaced by access to local max</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>29</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1781741612749496</suspValue><description>access to field maxCountCallback is replaced by access to local cb</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1781741612749496</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1781741612749496</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>14ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1781741612749496</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1781741612749496</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>40ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1781741612749496</suspValue><description>Removed assignment to member variable count</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>24</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1781741612749496</suspValue><description>Removed assignment to member variable maximalCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILorg/apache/commons/math3/util/Incrementor$MaxCountExceededCallback;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>29</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1781741612749496</suspValue><description>Removed assignment to member variable maxCountCallback</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3360107525161235</suspValue><description>the access to count is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3360107525161235</suspValue><description>the access to count is guarded using field maximalCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3360107525161235</suspValue><description>the access to field org.apache.commons.math3.util.Incrementor.count is replaced by the call to org.apache.commons.math3.util.Incrementor::getMaximalCount()I</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3360107525161235</suspValue><description>the access to field org.apache.commons.math3.util.Incrementor.count is replaced by the call to org.apache.commons.math3.util.Incrementor::getCount()I</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3360107525161235</suspValue><description>replaced access to count with an access to maximalCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3360107525161235</suspValue><description>the access to count is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3360107525161235</suspValue><description>the access to count is guarded returning field maximalCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3360107525161235</suspValue><description>replaced int return with 0 for org/apache/commons/math3/util/Incrementor::getCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3360107525161235</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>the access to count is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>11</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>the access to maximalCount is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>the access to count is guarded using field maximalCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>11</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>the access to maximalCount is guarded using field maximalCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>the access to field org.apache.commons.math3.util.Incrementor.count is replaced by the call to org.apache.commons.math3.util.Incrementor::getMaximalCount()I</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>9</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>the access to field org.apache.commons.math3.util.Incrementor.count is replaced by the call to org.apache.commons.math3.util.Incrementor::setMaximalCount(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>11</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>the access to field org.apache.commons.math3.util.Incrementor.maximalCount is replaced by the call to org.apache.commons.math3.util.Incrementor::getMaximalCount()I</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>the access to field org.apache.commons.math3.util.Incrementor.count is replaced by the call to org.apache.commons.math3.util.Incrementor::getCount()I</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>9</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>the access to field org.apache.commons.math3.util.Incrementor.count is replaced by the call to org.apache.commons.math3.util.Incrementor::incrementCount(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>11</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>the access to field org.apache.commons.math3.util.Incrementor.maximalCount is replaced by the call to org.apache.commons.math3.util.Incrementor::getCount()I</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>replaced access to count with an access to maximalCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>9</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>replaced access to count with an access to maximalCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>11</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>replaced access to maximalCount with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>the access to count is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>11</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>the access to maximalCount is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>the access to count is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>11</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>the access to maximalCount is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>the access to count is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>11</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>the access to maximalCount is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>12</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>6</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>12</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>12</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>incrementCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>5</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.1862697142415222</suspValue><description>Removed assignment to member variable count</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>resetCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.18290108705624478</suspValue><description>the access to field org.apache.commons.math3.util.Incrementor.count is replaced by the call to org.apache.commons.math3.util.Incrementor::setMaximalCount(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>resetCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.18290108705624478</suspValue><description>the access to field org.apache.commons.math3.util.Incrementor.count is replaced by the call to org.apache.commons.math3.util.Incrementor::incrementCount(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>resetCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.18290108705624478</suspValue><description>replaced access to count with an access to maximalCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='29'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>resetCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.math3.util.IncrementorTest.testReset(org.apache.commons.math3.util.IncrementorTest)</killingTests><suspValue>0.18290108705624478</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testGetIterations(org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testConstrainedRosen(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>222ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testMaximize(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>354ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigar(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>192ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testSsDiffPow(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>413ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testTwoAxes(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>477ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testGetIterations(org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testTablet(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>223ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testRosen(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>220ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testDiffPow(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>254ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testRastrigin(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>861ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testElliRotated(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>244ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize2(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigTab(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>293ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testSphere(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>300ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize2(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testTrivial(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testDiagonalRosen(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>783ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testEllipse(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>232ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigarWithBoundaries(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>204ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize2(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.IncrementorTest.testReset(org.apache.commons.math3.util.IncrementorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testAckley(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest)</name><time>155ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaximize2(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest)</name><time>16ms</time></test></testsExecutionTime><patchExecutionTime>5529ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>resetCount</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.18290108705624478</suspValue><description>Removed assignment to member variable count</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>37ms</time></test></testsExecutionTime><patchExecutionTime>100ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>setMaximalCount</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.18615441264319965</suspValue><description>the access to field org.apache.commons.math3.util.Incrementor.maximalCount is replaced by the call to org.apache.commons.math3.util.Incrementor::setMaximalCount(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>setMaximalCount</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.18615441264319965</suspValue><description>the access to field org.apache.commons.math3.util.Incrementor.maximalCount is replaced by the call to org.apache.commons.math3.util.Incrementor::incrementCount(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>setMaximalCount</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.18615441264319965</suspValue><description>replaced access to maximalCount with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>setMaximalCount</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.18615441264319965</suspValue><description>access to field maximalCount is replaced by access to local max</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>setMaximalCount</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.18615441264319965</suspValue><description>access to local max is replaced by access to field maximalCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>setMaximalCount</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.18615441264319965</suspValue><description>access to local max is replaced by access to field count</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Incrementor.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Incrementor</mutatedClass><mutatedMethod>setMaximalCount</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.18615441264319965</suspValue><description>Removed assignment to member variable maximalCount</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MaxEval.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.MaxEval</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>40</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>21</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3741657386773941</suspValue><description>access to field maxEval is replaced by access to local max</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MaxEval.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.MaxEval</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3741657386773941</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>45ms</time></test></testsExecutionTime><patchExecutionTime>99ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MaxEval.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.MaxEval</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3741657386773941</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MaxEval.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.MaxEval</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3741657386773941</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MaxEval.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.MaxEval</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3741657386773941</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MaxEval.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.MaxEval</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>21</index><block>2</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3741657386773941</suspValue><description>Removed assignment to member variable maxEval</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MaxEval.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.MaxEval</mutatedClass><mutatedMethod>getMaxEval</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>49</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the access to maxEval is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MaxEval.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.MaxEval</mutatedClass><mutatedMethod>getMaxEval</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>49</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the access to maxEval is guarded using field maxEval</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MaxEval.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.MaxEval</mutatedClass><mutatedMethod>getMaxEval</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>49</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the access to field org.apache.commons.math3.optim.MaxEval.maxEval is replaced by the call to org.apache.commons.math3.optim.MaxEval::getMaxEval()I</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MaxEval.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.MaxEval</mutatedClass><mutatedMethod>getMaxEval</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>49</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the access to maxEval is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MaxEval.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.MaxEval</mutatedClass><mutatedMethod>getMaxEval</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>49</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>the access to maxEval is guarded returning field maxEval</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MaxEval.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.MaxEval</mutatedClass><mutatedMethod>getMaxEval</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>replaced int return with 0 for org/apache/commons/math3/optim/MaxEval::getMaxEval</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MaxEval.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.MaxEval</mutatedClass><mutatedMethod>getMaxEval</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3751046755079703</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([D)V</methodDescription><lineNumber>36</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>11</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3879917968315853</suspValue><description>access to field init is replaced by access to local startPoint</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([D)V</methodDescription><lineNumber>36</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3879917968315853</suspValue><description>the call to [D::clone()Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([D)V</methodDescription><lineNumber>36</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3879917968315853</suspValue><description>the call to clone()Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([D)V</methodDescription><lineNumber>36</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3879917968315853</suspValue><description>the call to clone()Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([D)V</methodDescription><lineNumber>36</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3879917968315853</suspValue><description>the call to clone()Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([D)V</methodDescription><lineNumber>36</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3879917968315853</suspValue><description>the call to clone()Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([D)V</methodDescription><lineNumber>36</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3879917968315853</suspValue><description>the call to clone()Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([D)V</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3879917968315853</suspValue><description>removed call to [D::clone</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([D)V</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>11</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3879917968315853</suspValue><description>Removed assignment to member variable init</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>getInitialGuess</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>45</lineNumber><mutator>MethodNameMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the call to factory method [D.clone()Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>getInitialGuess</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>45</lineNumber><mutator>MethodNameMutator_1</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the call to factory method [D.clone()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.SimplePointCheckerTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>getInitialGuess</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>45</lineNumber><mutator>MethodNameMutator_2</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the call to factory method [D.clone()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.PointVectorValuePairTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>getInitialGuess</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>45</lineNumber><mutator>MethodNameMutator_3</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the call to factory method [D.clone()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math3.optim.SimpleVectorValueCheckerTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>getInitialGuess</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>45</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to init is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>getInitialGuess</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>45</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to init is guarded using field init</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>getInitialGuess</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>45</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to field org.apache.commons.math3.optim.InitialGuess.init is replaced by the call to org.apache.commons.math3.optim.InitialGuess::getInitialGuess()[D</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>getInitialGuess</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>45</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the call to [D::clone()Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>getInitialGuess</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>45</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to init is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>42ms</time></test></testsExecutionTime><patchExecutionTime>99ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>getInitialGuess</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>45</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the access to init is guarded returning field init</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>getInitialGuess</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>45</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the call to clone()Ljava/lang/Object; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>getInitialGuess</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>45</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>the call to clone()Ljava/lang/Object; is guarded returning field init</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>getInitialGuess</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>removed call to [D::clone</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>getInitialGuess</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>replaced return value with null for org/apache/commons/math3/optim/InitialGuess::getInitialGuess</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>InitialGuess.java</sourceFile><mutatedClass>org.apache.commons.math3.optim.InitialGuess</mutatedClass><mutatedMethod>getInitialGuess</mutatedMethod><methodDescription>()[D</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.3890390100637099</suspValue><description>mutated return of Object value for org/apache/commons/math3/optim/InitialGuess::getInitialGuess to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Pair.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Pair</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)V</methodDescription><lineNumber>46</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.23094010767585033</suspValue><description>access to field key is replaced by access to local k</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Pair.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Pair</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.23094010767585033</suspValue><description>access to field value is replaced by access to local k</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>30ms</time></test></testsExecutionTime><patchExecutionTime>87ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Pair.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Pair</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)V</methodDescription><lineNumber>46</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.23094010767585033</suspValue><description>access to field key is replaced by access to local v</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Pair.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Pair</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.23094010767585033</suspValue><description>access to field value is replaced by access to local v</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Pair.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Pair</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)V</methodDescription><lineNumber>46</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.23094010767585033</suspValue><description>local k is replaced by local v to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Pair.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Pair</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.23094010767585033</suspValue><description>local v is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Pair.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Pair</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)V</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.23094010767585033</suspValue><description>Removed assignment to member variable key</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Pair.java</sourceFile><mutatedClass>org.apache.commons.math3.util.Pair</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</killingTests><suspValue>0.23094010767585033</suspValue><description>Removed assignment to member variable value</description><testsExecutionTime><test><name>org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
</mutations>
