<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>77</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced access to HALF_LOG_2_PI with an access to DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>77</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to field HALF_LOG_2_PI is replaced by access to local x</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>77</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to field HALF_LOG_2_PI is replaced by access to local g</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>77</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to field HALF_LOG_2_PI is replaced by access to local sum</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local sum is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local g to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>46</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local sum is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>53</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local sum is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>58</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local sum is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>61</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local g to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>62</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local g is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>69</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local g to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>79</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local sum is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>80</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local g to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>87</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>local ret is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>20ms</time></test></testsExecutionTime><patchExecutionTime>86ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local sum is replaced by local g to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>40</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>46</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local sum is replaced by local g to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>53</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local sum is replaced by local g to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>58</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local sum is replaced by local g to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>61</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>62</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local g is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>69</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>79</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local sum is replaced by local g to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>80</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>69</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local tmp to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>79</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local sum is replaced by local tmp to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>80</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local tmp to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local sum is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>40</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>53</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local sum is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>61</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>62</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local g is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>69</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>79</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local sum is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>80</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>87</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>access to local ret is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local sum is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>40</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>53</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local sum is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>61</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>62</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local g is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>69</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>79</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local sum is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>80</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>87</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>access to local ret is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to cos</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to cos</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to log10</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to log with a call to log10</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>64ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to java/lang/Math::log with argument</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to java/lang/Math::log with argument</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>49</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Changed increment from -1 to 1</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>18</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Substituted 4.7421875 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>22</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>39ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>55</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>64</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Substituted 0.5 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>70</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Substituted 0.5 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>20ms</time></test></testsExecutionTime><patchExecutionTime>111ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>43</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>44</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>45</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>57</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>63</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>65</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>71</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>74</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>76</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>78</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>81</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>83</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed call to java/lang/Math::log</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed call to java/lang/Math::log</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>88</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/special/Gamma::logGamma</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>88</index><block>5</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1091089451179962</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/special/Gamma::logGamma</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveIncrementsMutator</mutator><index>49</index><block>4</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>Removed increment -1</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>7</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to regularizedGammaP(DDDI)D with a call to regularizedGammaP(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>7</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to regularizedGammaP(DDDI)D with a call to regularizedGammaP(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>7</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to regularizedGammaP(DDDI)D with a call to regularizedGammaP(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>7</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to regularizedGammaP(DDDI)D with a call to regularizedGammaP(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>7</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to regularizedGammaP(DDDI)D with a call to regularizedGammaP(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>7</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to regularizedGammaP(DDDI)D with a call to regularizedGammaP(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>4</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>7</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to regularizedGammaP with a call to regularizedGammaQ</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>7</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to org/apache/commons/math/special/Gamma::regularizedGammaP with argument</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>19ms</time></test></testsExecutionTime><patchExecutionTime>73ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>5</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>Substituted 1.0E-8 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>76ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>Substituted 2147483647 with -2147483648</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>removed call to org/apache/commons/math/special/Gamma::regularizedGammaP</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>8</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/special/Gamma::regularizedGammaP</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><block>6</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/special/Gamma::regularizedGammaP</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>7</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>9</index><block>9</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>160</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>37</index><block>14</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>41</index><block>15</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>84ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>42</index><block>15</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>64</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>69</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>73</index><block>17</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local a to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>75</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local epsilon is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>78</index><block>18</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>85</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>88</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local a to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>91</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>421ms</time></test></testsExecutionTime><patchExecutionTime>449ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>92</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>93</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>94</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>98</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local a to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>101</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local sum is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>102</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>104</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local sum is replaced by local a to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>108</index><block>20</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>122</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>124</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>125</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>129</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>133</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local sum is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>186</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>138</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>local ret is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>3</index><block>7</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>9</index><block>9</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>13</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>160</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>37</index><block>14</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>41</index><block>15</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>42</index><block>15</block><killingTests>org.apache.commons.math.distribution.GammaDistributionTest.testProbabilities(org.apache.commons.math.distribution.GammaDistributionTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.ErfTest.testErf1960(org.apache.commons.math.special.ErfTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testSetMean(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf2807(org.apache.commons.math.special.ErfTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf3291(org.apache.commons.math.special.ErfTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testConsistency(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testQuantiles(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf2576(org.apache.commons.math.special.ErfTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.distribution.GammaDistributionTest.testProbabilities(org.apache.commons.math.distribution.GammaDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>64</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>69</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>73</index><block>17</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local x to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>75</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local epsilon is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>78</index><block>18</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>85</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>88</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local x to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>91</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>409ms</time></test></testsExecutionTime><patchExecutionTime>435ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>92</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>93</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>94</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>98</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local x to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>101</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local sum is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>102</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>104</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local sum is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>108</index><block>20</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>122</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>124</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>125</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>129</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>86ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>133</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local sum is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>186</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>138</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>local ret is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>64</index><block>17</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local n to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>69</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>73</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>89ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>75</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local epsilon is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>78</index><block>18</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>85</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>88</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>91</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>89ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>92</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>431ms</time></test></testsExecutionTime><patchExecutionTime>442ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>93</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>94</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local epsilon to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>98</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local epsilon to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>101</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local sum is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>102</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>104</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local sum is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>19ms</time></test></testsExecutionTime><patchExecutionTime>86ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>108</index><block>20</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>122</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>124</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>125</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>129</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>133</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local sum is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>186</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>138</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>local ret is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>69</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>73</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>75</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local epsilon is replaced by local an to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>78</index><block>18</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local an to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>85</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local an to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>88</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local an to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>91</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local n to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>92</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local an to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>93</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local an to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>94</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local an to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>924ms</time></test></testsExecutionTime><patchExecutionTime>934ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>98</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local n to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>101</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local sum is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>91ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>102</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>104</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local sum is replaced by local n to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>108</index><block>20</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local an to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>122</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local an to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>124</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local an to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>125</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local an to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>129</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local an to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>133</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local sum is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>73</index><block>17</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local sum to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>75</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local epsilon is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>78</index><block>18</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>85</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>88</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local sum to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>91</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local sum to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>92</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>93</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>94</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>98</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local sum to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>101</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local sum is replaced by local an to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>102</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local an is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>104</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>local sum is replaced by local an to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>108</index><block>20</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local n is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>122</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>124</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>125</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>129</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>133</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local sum is replaced by local an to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>7</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>9</index><block>9</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>13</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>160</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>37</index><block>14</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>41</index><block>15</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>42</index><block>15</block><killingTests>org.apache.commons.math.distribution.GammaDistributionTest.testProbabilities(org.apache.commons.math.distribution.GammaDistributionTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.ErfTest.testErf1960(org.apache.commons.math.special.ErfTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testSetMean(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf2807(org.apache.commons.math.special.ErfTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf3291(org.apache.commons.math.special.ErfTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testConsistency(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testQuantiles(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf2576(org.apache.commons.math.special.ErfTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.GammaDistributionTest.testProbabilities(org.apache.commons.math.distribution.GammaDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>64</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>69</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local an is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>73</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local an is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>75</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local epsilon is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>78</index><block>18</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local n is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>85</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local n is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>91</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local an is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>92</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>93</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>94</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>access to local n is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>101</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local sum is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>102</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local an is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>108</index><block>20</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local n is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>83ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>122</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>124</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>125</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>129</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>133</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local sum is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>186</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>138</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to local ret is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>7</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>9</index><block>9</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>13</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>160</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>37</index><block>14</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>41</index><block>15</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='13'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>42</index><block>15</block><killingTests>org.apache.commons.math.distribution.GammaDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.GammaDistributionTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.ErfTest.testErf3291(org.apache.commons.math.special.ErfTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.distribution.GammaDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.GammaDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testQuantiles(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf2576(org.apache.commons.math.special.ErfTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.GammaDistributionTest.testProbabilities(org.apache.commons.math.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testSetStandardDeviation(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testSetMean(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf1960(org.apache.commons.math.special.ErfTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf2807(org.apache.commons.math.special.ErfTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testConsistency(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.PoissonDistributionTest.testNormalApproximateProbability(org.apache.commons.math.distribution.PoissonDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>48ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>64</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>69</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local an is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>73</index><block>17</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>access to local an is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>75</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local epsilon is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>78</index><block>18</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local n is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>85</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local n is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>91</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local an is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>387ms</time></test></testsExecutionTime><patchExecutionTime>398ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>92</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>93</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>94</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local n is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>101</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local sum is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>102</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local an is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>108</index><block>20</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local n is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>122</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>124</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>125</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>129</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>133</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local sum is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>186</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>138</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to local ret is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>74</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to abs with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>126</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to log with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>132</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to exp with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>74</index><block>17</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>replaced call to abs with a call to cos</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>126</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to log with a call to cos</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>132</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to exp with a call to cos</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>74</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to abs with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>126</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to log with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>132</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to exp with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>74</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to abs with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>126</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to log with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>132</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to exp with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>74</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to abs with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>126</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to log with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>132</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to exp with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>74</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to abs with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>126</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to log with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>132</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to exp with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>74</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to abs with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>126</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to log with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>132</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to exp with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>74</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to abs with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>126</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to log with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>132</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to exp with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>74</index><block>17</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>replaced call to abs with a call to exp</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>126</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to log with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>132</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to exp with a call to log</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>74</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to abs with a call to log</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>126</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to log with a call to log10</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>132</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to exp with a call to log10</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>74</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to java/lang/Math::abs with argument</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>75ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>126</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to java/lang/Math::log with argument</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>130</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to org/apache/commons/math/special/Gamma::logGamma with argument</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>132</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to java/lang/Math::exp with argument</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>40</index><block>14</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='38'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>44</index><block>15</block><killingTests/><suspValue>0.16222142113076254</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.GammaDistributionTest.testValues(org.apache.commons.math.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.PoissonDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.distribution.GammaDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf2576(org.apache.commons.math.special.ErfTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.distribution.ChiSquareDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.ChiSquareDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquareIndependence(org.apache.commons.math.stat.inference.ChiSquareFactoryTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testConsistency(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math.distribution.PoissonDistributionTest)</name><time>41ms</time></test><test><name>org.apache.commons.math.distribution.ChiSquareDistributionTest.testConsistency(org.apache.commons.math.distribution.ChiSquareDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquare(org.apache.commons.math.stat.inference.ChiSquareFactoryTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.distribution.ChiSquareDistributionTest.testSmallDf(org.apache.commons.math.distribution.ChiSquareDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareIndependence(org.apache.commons.math.stat.inference.TestUtilsTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquare(org.apache.commons.math.stat.inference.TestUtilsTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic(org.apache.commons.math.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf3291(org.apache.commons.math.special.ErfTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquareLargeTestStatistic(org.apache.commons.math.stat.inference.ChiSquareFactoryTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testQuantiles(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquare(org.apache.commons.math.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.distribution.PoissonDistributionTest.testDegenerateInverseCumulativeProbability(org.apache.commons.math.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.distribution.GammaDistributionTest.testProbabilities(org.apache.commons.math.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.distribution.ChiSquareDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.ChiSquareDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testSetStandardDeviation(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.distribution.GammaDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.GammaDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareZeroCount(org.apache.commons.math.stat.inference.ChiSquareTestTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.GammaDistributionTest.testConsistency(org.apache.commons.math.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic(org.apache.commons.math.stat.inference.TestUtilsTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf1960(org.apache.commons.math.special.ErfTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testSetMean(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math.distribution.PoissonDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf2807(org.apache.commons.math.special.ErfTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.stat.inference.ChiSquareFactoryTest.testChiSquareZeroCount(org.apache.commons.math.stat.inference.ChiSquareFactoryTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.distribution.PoissonDistributionTest.testLargeMeanCumulativeProbability(org.apache.commons.math.distribution.PoissonDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.stat.inference.TestUtilsTest.testChiSquareZeroCount(org.apache.commons.math.stat.inference.TestUtilsTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.distribution.PoissonDistributionTest.testNormalApproximateProbability(org.apache.commons.math.distribution.PoissonDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.stat.inference.ChiSquareTestTest.testChiSquareIndependence(org.apache.commons.math.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>154ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>77</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>82</index><block>18</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>112</index><block>20</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>10</index><block>9</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>26</index><block>12</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>38</index><block>14</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>54ms</time></test></testsExecutionTime><patchExecutionTime>67ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>59</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>63</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>86</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>123</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed negation</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>65</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>87</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>95</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>96</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>97</index><block>19</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>103</index><block>19</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>127</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>128</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>131</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>134</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>12</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><block>14</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>79ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><block>15</block><killingTests>org.apache.commons.math.distribution.GammaDistributionTest.testProbabilities(org.apache.commons.math.distribution.GammaDistributionTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.ErfTest.testErf1960(org.apache.commons.math.special.ErfTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testSetMean(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf2807(org.apache.commons.math.special.ErfTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf3291(org.apache.commons.math.special.ErfTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testConsistency(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testQuantiles(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf2576(org.apache.commons.math.special.ErfTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.distribution.GammaDistributionTest.testProbabilities(org.apache.commons.math.distribution.GammaDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>77</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>82</index><block>18</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>112</index><block>20</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>74</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed call to java/lang/Math::abs</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>126</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed call to java/lang/Math::log</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>130</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed call to org/apache/commons/math/special/Gamma::logGamma</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>132</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed call to java/lang/Math::exp</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>139</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/special/Gamma::regularizedGammaP</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>28</index><block>12</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>28</index><block>12</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>16</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>40</index><block>14</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>44</index><block>15</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>77</index><block>17</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>82</index><block>18</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>112</index><block>20</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>16</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>40</index><block>14</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>44</index><block>15</block><killingTests>org.apache.commons.math.distribution.GammaDistributionTest.testProbabilities(org.apache.commons.math.distribution.GammaDistributionTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.ErfTest.testErf1960(org.apache.commons.math.special.ErfTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testSetMean(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf2807(org.apache.commons.math.special.ErfTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf3291(org.apache.commons.math.special.ErfTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testConsistency(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testQuantiles(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.special.ErfTest.testErf2576(org.apache.commons.math.special.ErfTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testCumulativeProbabilities(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.GammaDistributionTest.testProbabilities(org.apache.commons.math.distribution.GammaDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>77</index><block>17</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>82</index><block>18</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>112</index><block>20</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaP</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>139</index><block>22</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/special/Gamma::regularizedGammaP</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>7</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced call to regularizedGammaQ(DDDI)D with a call to regularizedGammaQ(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>7</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced call to regularizedGammaQ(DDDI)D with a call to regularizedGammaQ(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>7</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced call to regularizedGammaQ(DDDI)D with a call to regularizedGammaQ(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>7</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced call to regularizedGammaQ(DDDI)D with a call to regularizedGammaQ(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>7</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced call to regularizedGammaQ(DDDI)D with a call to regularizedGammaQ(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>7</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced call to regularizedGammaQ(DDDI)D with a call to regularizedGammaQ(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>4</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>82ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>83ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>7</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced call to regularizedGammaQ with a call to regularizedGammaP</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>7</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced call to org/apache/commons/math/special/Gamma::regularizedGammaQ with argument</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>5</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>Substituted 1.0E-8 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>87ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>6</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>Substituted 2147483647 with -2147483648</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>80ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed call to org/apache/commons/math/special/Gamma::regularizedGammaQ</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>8</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/special/Gamma::regularizedGammaQ</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DD)D</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><block>23</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/special/Gamma::regularizedGammaQ</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(D)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DI)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DI)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DI)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DI)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(D)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DI)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DI)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(D)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(D)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(D)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>54ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(D)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>24</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>9</index><block>26</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>27</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>235</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>25</index><block>29</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19245008972987526</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>37</index><block>31</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>38</index><block>31</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>41</index><block>32</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>61</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>68</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>69</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local epsilon is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>76</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>78</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>79</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>83</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>87</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local ret is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>92ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>89</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local ret is replaced by local a to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>92</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local ret is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>3</index><block>24</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>9</index><block>26</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>13</index><block>27</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>235</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>25</index><block>29</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19245008972987526</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>37</index><block>31</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>38</index><block>31</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>41</index><block>32</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>61</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>68</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>69</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local epsilon is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>76</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>78</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>79</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>83</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>87</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local ret is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>86ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>89</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local ret is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>92</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local ret is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>76</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local x is replaced by local ret to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>78</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local a is replaced by local ret to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>79</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local x is replaced by local ret to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>83</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local a is replaced by local ret to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>87</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local ret is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>89</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>local ret is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>92</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local ret is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>24</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>9</index><block>26</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>93ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>13</index><block>27</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>235</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>25</index><block>29</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19245008972987526</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>37</index><block>31</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>38</index><block>31</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>41</index><block>32</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>61</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>68</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>69</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local epsilon is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>76</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>78</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>79</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>83</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>87</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local ret is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>92</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local ret is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>24</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>9</index><block>26</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>13</index><block>27</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>235</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>25</index><block>29</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19245008972987526</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>37</index><block>31</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>95ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>38</index><block>31</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>41</index><block>32</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>61</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>68</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>69</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local epsilon is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>76</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>78</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>79</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>83</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local a is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>87</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local ret is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>92</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>access to local ret is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>45ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>24</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>7</index><block>25</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>80</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to log with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>86</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to exp with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>80</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to log with a call to cos</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>86</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to exp with a call to cos</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>80</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to log with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>86</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to exp with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>80</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to log with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>86</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to exp with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>80</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to log with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>86</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to exp with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>80</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to log with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>86</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to exp with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>80</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to log with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>86</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to exp with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>80</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to log with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>86</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to exp with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>80</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to log with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>86</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to exp with a call to log</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>80</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to log with a call to log10</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>86</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to exp with a call to log10</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the call to org.apache.commons.math.util.ContinuedFraction::evaluate(DDI)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the call to evaluate(DDI)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the call to evaluate(DDI)D is guarded returning local a</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the call to evaluate(DDI)D is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the call to evaluate(DDI)D is guarded returning field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the call to evaluate(DDI)D is guarded returning field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to org/apache/commons/math/util/ContinuedFraction::evaluate with argument</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>80</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to java/lang/Math::log with argument</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>84</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to org/apache/commons/math/special/Gamma::logGamma with argument</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>86</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to java/lang/Math::exp with argument</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>12</index><block>26</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><block>27</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>40</index><block>31</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>44</index><block>32</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>243</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>62</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>removed call to org/apache/commons/math/special/Gamma$1::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>10</index><block>26</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>20ms</time></test></testsExecutionTime><patchExecutionTime>73ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>27</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>235</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>26</index><block>29</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19245008972987526</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>42</index><block>32</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>66</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>77</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>removed negation</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>72</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>81</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>82</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>85</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>88</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>24</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>25</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>26</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>27</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>235</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>29</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19245008972987526</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><block>31</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><block>32</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>85ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>24</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>25</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>71</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>removed call to org/apache/commons/math/util/ContinuedFraction::evaluate</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>80</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>removed call to java/lang/Math::log</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>84</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>removed call to org/apache/commons/math/special/Gamma::logGamma</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>86</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>removed call to java/lang/Math::exp</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>93</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/special/Gamma::regularizedGammaQ</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>24</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>8</index><block>25</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>235</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>28</index><block>29</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19245008972987526</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>24</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>8</index><block>25</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>235</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>28</index><block>29</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19245008972987526</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>12</index><block>26</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>16</index><block>27</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>40</index><block>31</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>44</index><block>32</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>12</index><block>26</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>16</index><block>27</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>40</index><block>31</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>44</index><block>32</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>regularizedGammaQ</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>93</index><block>34</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/special/Gamma::regularizedGammaQ</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>36</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local n is replaced by local maxIterations to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>37</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local maxIterations is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>39</index><block>2</block><killingTests/><suspValue>0.12126781251816648</suspValue><description>local relativeError is replaced by local x to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local epsilon is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>49</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local n is replaced by local maxIterations to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>50</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>56</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local n is replaced by local maxIterations to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>57</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>62</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>63</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>65</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local b is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p0 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>72</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>73</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>75</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local b is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q0 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>82</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>85</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>160</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>161</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>166</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local r is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>167</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>172</index><block>10</block><killingTests/><suspValue>0.12126781251816648</suspValue><description>local relativeError is replaced by local x to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>175</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>176</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>178</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>181</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>182</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p0 is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>185</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>186</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>189</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>190</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q0 is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>193</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>194</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>172</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>200</index><block>11</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local n is replaced by local maxIterations to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>172</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>201</index><block>11</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local maxIterations is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>222</index><block>13</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local x is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local relativeError is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>40</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local epsilon is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>50</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local x is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>57</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local x is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>62</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>63</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>65</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p0 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>72</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>73</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>75</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q0 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>82</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>85</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>160</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>161</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>166</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local r is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>167</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>172</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local relativeError is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>175</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>176</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>24ms</time></test></testsExecutionTime><patchExecutionTime>84ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>178</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>181</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>182</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p0 is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>185</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>186</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>189</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>190</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q0 is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>193</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>194</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>222</index><block>13</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local relativeError is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>40</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local epsilon is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>50</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local x is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>57</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local x is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>62</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local a is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>63</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>65</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local b is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p0 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>72</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local a is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>73</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>75</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local b is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q0 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>82</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>85</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>160</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>161</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>166</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local r is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>167</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>172</index><block>10</block><killingTests/><suspValue>0.12126781251816648</suspValue><description>local relativeError is replaced by local p0 to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>175</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>176</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>178</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local p0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>181</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>182</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p0 is replaced by local p1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>185</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>186</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local p0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>189</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>190</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q0 is replaced by local p0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>193</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>194</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local p0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>222</index><block>13</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local relativeError is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>40</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local epsilon is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>50</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local x is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>57</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local x is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>62</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local a is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>63</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>65</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local b is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p0 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>72</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local a is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>73</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>75</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local b is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>83ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q0 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>82</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>85</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>160</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>161</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>166</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local r is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>167</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>172</index><block>10</block><killingTests/><suspValue>0.12126781251816648</suspValue><description>local relativeError is replaced by local p1 to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>175</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>176</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>178</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local p1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>181</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>31ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>182</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p0 is replaced by local q0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>185</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>186</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local q0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>189</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>190</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q0 is replaced by local p1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>193</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>194</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local p1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>222</index><block>13</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local relativeError is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>40</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local epsilon is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>50</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local x is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>57</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local x is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>62</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local a is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>63</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>65</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local b is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p0 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>72</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local a is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>73</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>75</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local b is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q0 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>82</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>85</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>160</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>161</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>166</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local r is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>167</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>172</index><block>10</block><killingTests/><suspValue>0.12126781251816648</suspValue><description>local relativeError is replaced by local q0 to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>175</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>176</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>178</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local q0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>181</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>182</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p0 is replaced by local q1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>185</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>186</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local q1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>189</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>190</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q0 is replaced by local q1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>193</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>194</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local q0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>0ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>222</index><block>13</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local relativeError is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>40</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local epsilon is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>50</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local x is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>57</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local x is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>62</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local a is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>63</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>65</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local b is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p0 is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>72</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local a is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>73</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>75</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local b is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q0 is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>82</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>85</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>160</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>161</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>166</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local r is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>167</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>172</index><block>10</block><killingTests/><suspValue>0.12126781251816648</suspValue><description>local relativeError is replaced by local q1 to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>175</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>176</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>178</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local q1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>181</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>182</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p0 is replaced by local c to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>185</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p2 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>186</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local p1 is replaced by local c to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>189</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>190</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q0 is replaced by local c to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>193</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q2 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>194</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local q1 is replaced by local c to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>222</index><block>13</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>local c is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local p1 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local q1 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>79ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local relativeError is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>40</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local epsilon is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>50</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>57</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>62</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>63</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local p1 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>65</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local b is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local p0 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>72</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>73</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local q1 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>75</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local b is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local q0 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>82</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local p2 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>85</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local q2 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>160</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local p2 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>161</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local q2 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>166</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local r is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>167</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local c is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>37ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>175</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local p2 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>176</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local q2 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>181</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local p1 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>185</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local p2 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>189</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local q1 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>193</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local q2 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>222</index><block>13</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>access to local c is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to getA with a call to getB</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>51</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to getA with a call to getB</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>58</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to getB with a call to getA</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>83</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to isInfinite with a call to isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>86</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to isInfinite with a call to isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>171</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to abs with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>171</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to abs with a call to cos</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>171</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to abs with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>171</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to abs with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>171</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to abs with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>171</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to abs with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>171</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to abs with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>171</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to abs with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>171</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to abs with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>171</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to abs with a call to log</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>the call to org.apache.commons.math.util.ContinuedFraction::getA(ID)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>51</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>the call to org.apache.commons.math.util.ContinuedFraction::getA(ID)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>58</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>the call to org.apache.commons.math.util.ContinuedFraction::getB(ID)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>the call to getA(ID)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>51</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>the call to getA(ID)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>87ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>58</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>the call to getB(ID)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>the call to getA(ID)D is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>51</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>the call to getA(ID)D is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>58</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>the call to getB(ID)D is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>the call to getA(ID)D is guarded returning local epsilon</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>51</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>the call to getA(ID)D is guarded returning local epsilon</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>58</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>the call to getB(ID)D is guarded returning local epsilon</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>the call to getA(ID)D is guarded returning field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>51</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>the call to getA(ID)D is guarded returning field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>58</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>the call to getB(ID)D is guarded returning field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to org/apache/commons/math/util/ContinuedFraction::getA with argument</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>51</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to org/apache/commons/math/util/ContinuedFraction::getA with argument</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>58</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to org/apache/commons/math/util/ContinuedFraction::getB with argument</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>171</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced call to java/lang/Math::abs with argument</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>38</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>42</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>202</index><block>11</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>83ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>45</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Changed increment from 1 to -1</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>83ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>28</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>32</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Substituted 1.7976931348623157E308 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>169</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>64</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>67</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>68</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>74</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>77</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>78</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>162</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>168</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>170</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>177</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>84</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>87</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>202</index><block>11</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>removed call to org/apache/commons/math/util/ContinuedFraction::getA</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>51</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>removed call to org/apache/commons/math/util/ContinuedFraction::getA</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>58</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>removed call to org/apache/commons/math/util/ContinuedFraction::getB</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>83</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>removed call to java/lang/Double::isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>86</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>removed call to java/lang/Double::isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>171</index><block>10</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>removed call to java/lang/Math::abs</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>223</index><block>13</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/util/ContinuedFraction::evaluate</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>84</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>87</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>84</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>87</index><block>4</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>38</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>42</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>202</index><block>11</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>38</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>42</index><block>2</block><killingTests/><suspValue>0.12126781251816648</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>202</index><block>11</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>78ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>223</index><block>13</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/util/ContinuedFraction::evaluate</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveIncrementsMutator</mutator><index>45</index><block>3</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.12126781251816648</suspValue><description>Removed increment 1</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>243</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>Removed assignment to member variable val$a</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>248</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to val$a is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>248</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to val$a is guarded using local x</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>248</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to val$a is guarded using field val$a</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>248</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to field val$a is replaced by access to local x</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>248</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to local x is replaced by access to field val$a</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>248</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to val$a is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>248</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to val$a is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>248</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to val$a is guarded returning field val$a</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>Substituted 2.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/special/Gamma$1::getA</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>78ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/special/Gamma$1::getA</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to val$a is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to val$a is guarded using local x</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to val$a is guarded using field val$a</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>access to field val$a is replaced by access to local x</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to val$a is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to val$a is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to val$a is guarded returning field val$a</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>9</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/special/Gamma$1::getB</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/special/Gamma$1::getB</description><testsExecutionTime><test><name>org.apache.commons.math.special.GammaTest.testRegularizedGammaPositivePositive(org.apache.commons.math.special.GammaTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
</mutations>
