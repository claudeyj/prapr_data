<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to copyOf([I)[I with a call to copyOf([II)[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to copyOf([I)[I with a call to copyOf([II)[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to copyOf([I)[I with a call to copyOf([II)[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>115ms</time></test></testsExecutionTime><patchExecutionTime>204ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to copyOf([I)[I with a call to copyOf([II)[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>55ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to copyOf([I)[I with a call to copyOf([II)[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to copyOf([I)[I with a call to copyOf([II)[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>21</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to dimension is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>28</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to dimension is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>172</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>36</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to last is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>46</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to last is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>61</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to dimension is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>78</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to uniCounterOffset is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>120ms</time></test></testsExecutionTime><patchExecutionTime>183ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>97</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to uniCounterOffset is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>99</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to last is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>114ms</time></test></testsExecutionTime><patchExecutionTime>183ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>46</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to last is guarded using local tS</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>120ms</time></test></testsExecutionTime><patchExecutionTime>182ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>61</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to dimension is guarded using local tS</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>78</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to uniCounterOffset is guarded using local size</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>97</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to uniCounterOffset is guarded using local size</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>99</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to last is guarded using local tS</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>21</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.dimension is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getDimension()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>28</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.dimension is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getDimension()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>172</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>36</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.last is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getDimension()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>46</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.last is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getDimension()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>121ms</time></test></testsExecutionTime><patchExecutionTime>185ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>61</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.dimension is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getDimension()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>78</index><block>3</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.uniCounterOffset is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSizes()[I</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>97</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.uniCounterOffset is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSizes()[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>99</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.last is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getDimension()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>120ms</time></test></testsExecutionTime><patchExecutionTime>181ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>21</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.dimension is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSize()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>28</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.dimension is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSize()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>172</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>36</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.last is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSize()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>46</index><block>0</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.last is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSize()I</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>61</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.dimension is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSize()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>99</index><block>4</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.last is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSize()I</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>21</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced access to dimension with an access to totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>28</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced access to dimension with an access to totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>172</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>36</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced access to last with an access to dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>46</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced access to last with an access to dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>61</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced access to dimension with an access to totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>78</index><block>3</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>replaced access to uniCounterOffset with an access to size</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>97</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced access to uniCounterOffset with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>99</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced access to last with an access to dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>21</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced access to dimension with an access to last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>28</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced access to dimension with an access to last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>172</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>36</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced access to last with an access to totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>46</index><block>0</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>replaced access to last with an access to totalSize</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>61</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced access to dimension with an access to last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>99</index><block>4</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>replaced access to last with an access to totalSize</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to field size is replaced by access to local size</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>23</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to field uniCounterOffset is replaced by access to local size</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>46</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to field last is replaced by access to local tS</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>61</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to field dimension is replaced by access to local tS</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>97ms</time></test></testsExecutionTime><patchExecutionTime>164ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>78</index><block>3</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>access to field uniCounterOffset is replaced by access to local size</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>97</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to field uniCounterOffset is replaced by access to local size</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>99</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to field last is replaced by access to local tS</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>187</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>118</index><block>6</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to field totalSize is replaced by access to local tS</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>46</index><block>0</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>access to field last is replaced by access to local i</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>61</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to field dimension is replaced by access to local i</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>61</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to field dimension is replaced by access to local count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>44</index><block>0</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>local i is replaced by local tS to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>54</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local i is replaced by local tS to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>59</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local j is replaced by local tS to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>79ms</time></test></testsExecutionTime><patchExecutionTime>139ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>65</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local count is replaced by local tS to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>67</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local j is replaced by local tS to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>70</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local count is replaced by local tS to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>79</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local i is replaced by local tS to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>80</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local count is replaced by local tS to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>120ms</time></test></testsExecutionTime><patchExecutionTime>190ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>84</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local tS is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>86</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local i is replaced by local tS to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>89</index><block>3</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>local tS is replaced by local i to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>54</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local i is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>59</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local j is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>65</index><block>2</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>local count is replaced by local i to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>67</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local j is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>70</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local count is replaced by local i to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>79</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local i is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>80</index><block>3</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>local count is replaced by local i to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>84</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local tS is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>114ms</time></test></testsExecutionTime><patchExecutionTime>177ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>86</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local i is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>89</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local tS is replaced by local count to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>59</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local j is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>65</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local count is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>67</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local j is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>70</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local count is replaced by local j to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>21</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to dimension is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>28</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to dimension is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>172</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>36</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to last is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>46</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to last is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>61</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to dimension is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>78</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to uniCounterOffset is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>97</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to uniCounterOffset is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>99</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to last is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>21</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to dimension is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>28</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to dimension is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>172</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>36</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to last is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>46</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to last is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>61</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to dimension is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>78</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to uniCounterOffset is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>97</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to uniCounterOffset is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>99</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to last is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>21</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to dimension is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>171</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>28</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to dimension is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>172</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>36</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to last is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>46</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to last is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>61</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to dimension is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>78</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to uniCounterOffset is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>97</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to uniCounterOffset is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>99</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to last is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to org/apache/commons/math/util/MathUtils::copyOf with argument</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>47</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>122ms</time></test></testsExecutionTime><patchExecutionTime>180ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>62</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>105</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>73</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Changed increment from 1 to -1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>92</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Changed increment from 1 to -1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>29</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>41</index><block>0</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>Substituted 0 with 1</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>50</index><block>1</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>Substituted 1 with 0</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>55</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>100</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>56</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>69</index><block>2</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>Replaced integer multiplication with division</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>88</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Replaced integer multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><block>0</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>negated conditional</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>105</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed call to org/apache/commons/math/util/MathUtils::copyOf</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>47</index><block>0</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>62</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>105</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>47</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>62</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>105</index><block>4</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>123ms</time></test></testsExecutionTime><patchExecutionTime>181ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Removed assignment to member variable dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Removed assignment to member variable size</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>23</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Removed assignment to member variable uniCounterOffset</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>31</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Removed assignment to member variable last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>118</index><block>6</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Removed assignment to member variable totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveIncrementsMutator</mutator><index>92</index><block>3</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>Removed increment 1</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>6</index><block>19</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to dimension is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>29</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to dimension is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>43</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to size is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>68</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to uniCounterOffset is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>119ms</time></test></testsExecutionTime><patchExecutionTime>180ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>86</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to last is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>29</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to dimension is guarded using local count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>43</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to size is guarded using local c</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>68</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to uniCounterOffset is guarded using local c</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>86</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to last is guarded using local count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>6</index><block>19</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to dimension is guarded using field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>29</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to dimension is guarded using field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>43</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to size is guarded using field uniCounterOffset</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>68</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to uniCounterOffset is guarded using field uniCounterOffset</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>86</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to last is guarded using field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>6</index><block>19</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.dimension is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getDimension()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>29</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.dimension is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getDimension()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>43</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.size is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSizes()[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>68</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.uniCounterOffset is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSizes()[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>86</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.last is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getDimension()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>6</index><block>19</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.dimension is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSize()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>29</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.dimension is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSize()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>86</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.last is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSize()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>6</index><block>19</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced access to dimension with an access to totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>125ms</time></test></testsExecutionTime><patchExecutionTime>189ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>29</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced access to dimension with an access to totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>43</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced access to size with an access to uniCounterOffset</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>68</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced access to uniCounterOffset with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>86</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to last with an access to dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>6</index><block>19</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced access to dimension with an access to last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>29</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced access to dimension with an access to last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>86</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to last with an access to totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>29</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to field dimension is replaced by access to local count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>43</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to field size is replaced by access to local c</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>68</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to field uniCounterOffset is replaced by access to local c</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>86</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to field last is replaced by access to local count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>29</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to field dimension is replaced by access to local i</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>27</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>local i is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>265</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>34</index><block>22</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>local i is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>39</index><block>22</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>local index is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>41</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>local index is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>44</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>local i is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>66</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>local count is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>69</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>local i is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>72</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>local i is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>76</index><block>25</block><killingTests/><suspValue>0.5773502691896258</suspValue><description>local count is replaced by local i to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>39</index><block>22</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>local index is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>41</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>local index is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>120ms</time></test></testsExecutionTime><patchExecutionTime>187ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>44</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>local i is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>66</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>local count is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>69</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>local i is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>118ms</time></test></testsExecutionTime><patchExecutionTime>184ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>72</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>local i is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>76</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>local count is replaced by local index to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>19</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local c is replaced by access to field uniCounterOffset</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>121ms</time></test></testsExecutionTime><patchExecutionTime>191ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>27</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local i is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>265</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>33</index><block>22</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local c is replaced by access to field uniCounterOffset</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>265</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>34</index><block>22</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local i is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>39</index><block>22</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local index is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>41</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local index is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>44</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local i is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>66</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local count is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>69</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local i is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>71</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local c is replaced by access to field uniCounterOffset</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>72</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local i is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>83</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local count is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>84</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local c is replaced by access to field uniCounterOffset</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>19</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local c is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>27</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local i is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>265</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>33</index><block>22</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local c is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>265</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>34</index><block>22</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local i is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>39</index><block>22</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local index is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>41</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local index is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>44</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local i is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>66</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local count is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>69</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local i is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>71</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local c is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>72</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local i is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>83</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local count is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>84</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local c is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>27</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local i is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>265</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>34</index><block>22</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local i is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>39</index><block>22</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local index is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>119ms</time></test></testsExecutionTime><patchExecutionTime>182ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>41</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local index is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>125ms</time></test></testsExecutionTime><patchExecutionTime>193ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>44</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local i is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>66</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local count is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>69</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local i is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>72</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local i is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>83</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local count is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>6</index><block>19</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to dimension is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>29</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to dimension is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>43</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to size is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>68</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to uniCounterOffset is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>86</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to last is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>29</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to dimension is guarded returning local count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>43</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to size is guarded returning local count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>68</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to uniCounterOffset is guarded returning local count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>86</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to last is guarded returning local count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>6</index><block>19</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to dimension is guarded returning field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>29</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to dimension is guarded returning field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>43</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to size is guarded returning field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>68</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to uniCounterOffset is guarded returning field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>86</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to last is guarded returning field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>30</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>40</index><block>22</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>46</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>79</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>Changed increment from 1 to -1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>263</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>20</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>24</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>74</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>Replaced integer multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>75</index><block>25</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>88</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><block>19</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><block>22</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>89</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced int return with 0 for org/apache/commons/math/util/MultidimensionalCounter::getCount</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>7</index><block>19</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>7</index><block>19</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>30</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>40</index><block>22</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>46</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>30</index><block>21</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>40</index><block>22</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>46</index><block>23</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>([I)I</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>89</index><block>26</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>7</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to totalSize is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>222</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to dimension is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>39</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to last is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>227</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>48</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to uniCounterOffset is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>112</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to last is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>7</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to totalSize is guarded using local index</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>222</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to dimension is guarded using local index</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>39</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to last is guarded using local index</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>119ms</time></test></testsExecutionTime><patchExecutionTime>178ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>227</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>48</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to uniCounterOffset is guarded using local indices</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>112</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to last is guarded using local index</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>7</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to totalSize is guarded using field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>222</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to dimension is guarded using field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>39</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to last is guarded using field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>227</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>48</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to uniCounterOffset is guarded using field uniCounterOffset</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>112</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to last is guarded using field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>7</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.totalSize is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getDimension()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>222</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.dimension is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getDimension()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>39</index><block>12</block><killingTests/><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.last is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getDimension()I</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>227</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>48</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.uniCounterOffset is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSizes()[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>112</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.last is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getDimension()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>7</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.totalSize is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSize()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>222</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.dimension is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSize()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>39</index><block>12</block><killingTests/><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.last is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSize()I</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>112</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.last is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSize()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>121ms</time></test></testsExecutionTime><patchExecutionTime>189ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>7</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to totalSize with an access to dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>222</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced access to dimension with an access to totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>39</index><block>12</block><killingTests/><suspValue>1.0</suspValue><description>replaced access to last with an access to dimension</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>227</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>48</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced access to uniCounterOffset with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>112</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced access to last with an access to dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>7</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to totalSize with an access to last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>222</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced access to dimension with an access to last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>95ms</time></test></testsExecutionTime><patchExecutionTime>154ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>39</index><block>12</block><killingTests/><suspValue>1.0</suspValue><description>replaced access to last with an access to totalSize</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>112</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced access to last with an access to totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>7</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to field totalSize is replaced by access to local index</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>222</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to field dimension is replaced by access to local index</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>39</index><block>12</block><killingTests/><suspValue>1.0</suspValue><description>access to field last is replaced by access to local index</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>227</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>48</index><block>13</block><killingTests/><suspValue>1.0</suspValue><description>access to field uniCounterOffset is replaced by access to local indices</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>112</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to field last is replaced by access to local index</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>116ms</time></test></testsExecutionTime><patchExecutionTime>176ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>39</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to field last is replaced by access to local count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>112</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to field last is replaced by access to local count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>39</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to field last is replaced by access to local i</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>112</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to field last is replaced by access to local idx</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>37</index><block>12</block><killingTests/><suspValue>1.0</suspValue><description>local i is replaced by local index to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>227</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>49</index><block>13</block><killingTests/><suspValue>1.0</suspValue><description>local i is replaced by local index to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>54</index><block>13</block><killingTests/><suspValue>1.0</suspValue><description>local count is replaced by local index to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>55</index><block>13</block><killingTests/><suspValue>1.0</suspValue><description>local index is replaced by local count to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>59</index><block>14</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>60</index><block>14</block><killingTests/><suspValue>1.0</suspValue><description>local offset is replaced by local index to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>62</index><block>14</block><killingTests/><suspValue>1.0</suspValue><description>local count is replaced by local index to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>72</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>73</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local offset is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>75</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local index to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>234</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>79</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local i is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>234</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>80</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local idx is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>238</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>92</index><block>16</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>238</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>93</index><block>16</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local index is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>97</index><block>17</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>98</index><block>17</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local idx is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>100</index><block>17</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local index to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>1004ms</time></test></testsExecutionTime><patchExecutionTime>1070ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>113</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local idx is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>37</index><block>12</block><killingTests/><suspValue>1.0</suspValue><description>local i is replaced by local count to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>227</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>49</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local i is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>120ms</time></test></testsExecutionTime><patchExecutionTime>185ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>54</index><block>13</block><killingTests/><suspValue>1.0</suspValue><description>local count is replaced by local i to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>55</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local index is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>59</index><block>14</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>60</index><block>14</block><killingTests/><suspValue>1.0</suspValue><description>local offset is replaced by local count to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>62</index><block>14</block><killingTests/><suspValue>1.0</suspValue><description>local count is replaced by local i to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>72</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>73</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local offset is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>75</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local i to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>234</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>79</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local i is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>234</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>80</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local idx is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>238</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>92</index><block>16</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local idx to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>238</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>93</index><block>16</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local index is replaced by local idx to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>97</index><block>17</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local idx to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>98</index><block>17</block><killingTests/><suspValue>1.0</suspValue><description>local idx is replaced by local count to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>100</index><block>17</block><killingTests/><suspValue>1.0</suspValue><description>local count is replaced by local idx to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>113</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local idx is replaced by local count to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>227</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>49</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local i is replaced by local idx to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>54</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local idx to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>55</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local index is replaced by local idx to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>59</index><block>14</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local idx to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>60</index><block>14</block><killingTests/><suspValue>1.0</suspValue><description>local offset is replaced by local i to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>62</index><block>14</block><killingTests/><suspValue>1.0</suspValue><description>local count is replaced by local idx to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>72</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local idx to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>73</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local offset is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>75</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local idx to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>234</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>79</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local i is replaced by local idx to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>105ms</time></test></testsExecutionTime><patchExecutionTime>166ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>234</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>80</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local idx is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>54</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local offset to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>55</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local index is replaced by local offset to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>59</index><block>14</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local offset to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>60</index><block>14</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local offset is replaced by local idx to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>62</index><block>14</block><killingTests/><suspValue>1.0</suspValue><description>local count is replaced by local offset to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>72</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local offset to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>73</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local offset is replaced by local idx to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>75</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local count is replaced by local offset to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>234</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>79</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local i is replaced by local offset to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>234</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>80</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>local idx is replaced by local offset to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>9</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local index is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local index is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>37</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local i is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>227</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>49</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local i is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>54</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local count is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>55</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local index is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>59</index><block>14</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local count is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>60</index><block>14</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local offset is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>72</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local count is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>73</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local offset is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>119ms</time></test></testsExecutionTime><patchExecutionTime>189ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>234</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>78</index><block>15</block><killingTests/><suspValue>1.0</suspValue><description>access to local indices is replaced by access to field uniCounterOffset</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>234</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>79</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local i is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>234</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>80</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local idx is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>238</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>92</index><block>16</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local count is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>238</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>93</index><block>16</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local index is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>97</index><block>17</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local count is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>118ms</time></test></testsExecutionTime><patchExecutionTime>187ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>98</index><block>17</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local idx is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>110</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local indices is replaced by access to field uniCounterOffset</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>113</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local idx is replaced by access to field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>245</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>117</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local indices is replaced by access to field uniCounterOffset</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>9</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local index is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local index is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>37</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local i is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>227</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>49</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local i is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>54</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local count is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>55</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local index is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>59</index><block>14</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local count is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>60</index><block>14</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local offset is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>72</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local count is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>73</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local offset is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>111ms</time></test></testsExecutionTime><patchExecutionTime>172ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>234</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>78</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local indices is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>234</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>79</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local i is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>234</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>80</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local idx is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>238</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>92</index><block>16</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local count is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>238</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>93</index><block>16</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local index is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>97</index><block>17</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local count is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>98</index><block>17</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local idx is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>110</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local indices is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>113</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local idx is replaced by access to field totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>245</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>117</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local indices is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>9</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local index is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>101ms</time></test></testsExecutionTime><patchExecutionTime>164ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local index is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>37</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local i is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>227</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>49</index><block>13</block><killingTests/><suspValue>1.0</suspValue><description>access to local i is replaced by access to field last</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>54</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local count is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>55</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local index is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>59</index><block>14</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local count is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>60</index><block>14</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local offset is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>72</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local count is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>73</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local offset is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>234</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>79</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local i is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>234</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>80</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local idx is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>238</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>92</index><block>16</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local count is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>238</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>93</index><block>16</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local index is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>97</index><block>17</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local count is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>239</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>98</index><block>17</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local idx is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>113</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local idx is replaced by access to field last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>7</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to totalSize is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>222</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to dimension is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>116ms</time></test></testsExecutionTime><patchExecutionTime>179ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>39</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to last is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>227</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>48</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to uniCounterOffset is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>119ms</time></test></testsExecutionTime><patchExecutionTime>179ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>112</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to last is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>39</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to last is guarded returning local indices</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>227</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>48</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to uniCounterOffset is guarded returning local indices</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>112</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to last is guarded returning local indices</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>7</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to totalSize is guarded returning field uniCounterOffset</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>222</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to dimension is guarded returning field uniCounterOffset</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>39</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to last is guarded returning field uniCounterOffset</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>227</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>48</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to uniCounterOffset is guarded returning field uniCounterOffset</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>112</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to last is guarded returning field uniCounterOffset</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>125ms</time></test></testsExecutionTime><patchExecutionTime>185ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>40</index><block>12</block><killingTests/><suspValue>1.0</suspValue><description>changed conditional boundary</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>56</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>94</index><block>16</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>65</index><block>14</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Changed increment from 1 to -1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>69</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Changed increment from -1 to 1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>84</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Changed increment from 1 to -1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>240</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>103</index><block>17</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Changed increment from 1 to -1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>107</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Changed increment from -1 to 1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>121ms</time></test></testsExecutionTime><patchExecutionTime>177ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>224</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>30</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>34</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>226</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>43</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>88</index><block>16</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>61</index><block>14</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>120ms</time></test></testsExecutionTime><patchExecutionTime>132ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>74</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>99</index><block>17</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>96ms</time></test></testsExecutionTime><patchExecutionTime>151ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>94</index><block>16</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>245</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>118</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced return value with null for org/apache/commons/math/util/MultidimensionalCounter::getCounts</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>122ms</time></test></testsExecutionTime><patchExecutionTime>189ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>8</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>122ms</time></test></testsExecutionTime><patchExecutionTime>181ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>40</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>56</index><block>13</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>94</index><block>16</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>8</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>40</index><block>12</block><killingTests/><suspValue>1.0</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>56</index><block>13</block><killingTests/><suspValue>1.0</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>94</index><block>16</block><killingTests/><suspValue>1.0</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>245</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>118</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>mutated return of Object value for org/apache/commons/math/util/MultidimensionalCounter::getCounts to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveIncrementsMutator</mutator><index>65</index><block>14</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Removed increment 1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveIncrementsMutator</mutator><index>69</index><block>15</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Removed increment -1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveIncrementsMutator</mutator><index>84</index><block>15</block><killingTests/><suspValue>1.0</suspValue><description>Removed increment 1</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>240</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveIncrementsMutator</mutator><index>103</index><block>17</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Removed increment 1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getCounts</mutatedMethod><methodDescription>(I)[I</methodDescription><lineNumber>242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveIncrementsMutator</mutator><index>107</index><block>18</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Removed increment -1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>205</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to dimension is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>205</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to dimension is guarded using field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>205</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.dimension is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getDimension()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>205</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.dimension is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSize()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>29ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>205</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to dimension with an access to totalSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>205</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testAccessors(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to dimension with an access to last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testAccessors(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>205</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to dimension is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>205</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to dimension is guarded returning field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testAccessors(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced int return with 0 for org/apache/commons/math/util/MultidimensionalCounter::getDimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testAccessors(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testAccessors(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testAccessors(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>281</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>27</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to totalSize is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>281</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>27</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to totalSize is guarded using field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>120ms</time></test></testsExecutionTime><patchExecutionTime>182ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>281</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>27</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.totalSize is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getDimension()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>281</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>27</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter.totalSize is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter::getSize()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>281</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>27</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced access to totalSize with an access to dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>281</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>27</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced access to totalSize with an access to last</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>281</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>27</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to totalSize is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>281</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>27</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to totalSize is guarded returning field dimension</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>27</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced int return with 0 for org/apache/commons/math/util/MultidimensionalCounter::getSize</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>getSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>27</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>iterator</mutatedMethod><methodDescription>()Lorg/apache/commons/math/util/MultidimensionalCounter$Iterator;</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to org/apache/commons/math/util/MultidimensionalCounter$Iterator::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>iterator</mutatedMethod><methodDescription>()Lorg/apache/commons/math/util/MultidimensionalCounter$Iterator;</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced return value with null for org/apache/commons/math/util/MultidimensionalCounter::iterator</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter</mutatedClass><mutatedMethod>iterator</mutatedMethod><methodDescription>()Lorg/apache/commons/math/util/MultidimensionalCounter$Iterator;</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>mutated return of Object value for org/apache/commons/math/util/MultidimensionalCounter::iterator to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>12</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to this$0 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to counter is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter$Iterator.counter is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter$Iterator::getCounts()[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>12</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to this$0 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to counter is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>12</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to this$0 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to counter is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>12</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to this$0 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to counter is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>Substituted -1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>27</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>Substituted -1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to org/apache/commons/math/util/MultidimensionalCounter::access$000</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>26</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to org/apache/commons/math/util/MultidimensionalCounter::access$100</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>Removed assignment to member variable this$0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>Removed assignment to member variable counter</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/MultidimensionalCounter;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>Removed assignment to member variable count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>147</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to counter is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>147</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to counter is guarded using field counter</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>147</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter$Iterator.counter is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter$Iterator::getCounts()[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>147</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local dim is replaced by access to field count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>147</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to counter is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>147</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to counter is guarded returning local dim</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>147</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to counter is guarded returning field count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>7</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced int return with 0 for org/apache/commons/math/util/MultidimensionalCounter$Iterator::getCount</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><block>12</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>121ms</time></test></testsExecutionTime><patchExecutionTime>177ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to this$0 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to counter is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>18</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to this$0 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to this$0 is guarded using field this$0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to counter is guarded using field counter</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>18</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to this$0 is guarded using field this$0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter$Iterator.counter is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter$Iterator::getCounts()[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local i is replaced by access to field count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>15</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local i is replaced by access to field count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local i is replaced by access to field count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to this$0 is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to counter is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>18</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to this$0 is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced boolean return with false for org/apache/commons/math/util/MultidimensionalCounter$Iterator::hasNext</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>27</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>removed call to org/apache/commons/math/util/MultidimensionalCounter::access$000</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>19</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>removed call to org/apache/commons/math/util/MultidimensionalCounter::access$200</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>24</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>24</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>MethodNameMutator_0</mutator><index>58</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.Integer.valueOf(I)Ljava/lang/Integer; is replaced by an instantiation of type java.lang.Integer using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>MethodNameMutator_4</mutator><index>58</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.Integer.valueOf(I)Ljava/lang/Integer; is replaced by an instantiation of type java.lang.Integer using (I)V</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>58</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(I)Ljava/lang/Integer; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Integer;</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>58</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(I)Ljava/lang/Integer; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Integer;</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>58</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(I)Ljava/lang/Integer; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Integer;</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>58</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(I)Ljava/lang/Integer; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Integer;</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>58</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(I)Ljava/lang/Integer; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Integer;</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>58</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(I)Ljava/lang/Integer; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Integer;</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>58</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(I)Ljava/lang/Integer; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Integer;</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>58</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(I)Ljava/lang/Integer; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Integer;</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>58</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(I)Ljava/lang/Integer; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Integer;</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>58</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(I)Ljava/lang/Integer; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Integer;</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>58</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(I)Ljava/lang/Integer; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Integer;</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>58</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(I)Ljava/lang/Integer; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Integer;</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>6</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to this$0 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>13</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to counter is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>17</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to this$0 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>35</index><block>9</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to counter is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>53ms</time></test></testsExecutionTime><patchExecutionTime>62ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>53</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to count is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>6</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to this$0 is guarded using field this$0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>13</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to counter is guarded using field counter</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>17</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to this$0 is guarded using field this$0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>35</index><block>9</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to counter is guarded using field counter</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>53</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to count is guarded using field count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>13</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter$Iterator.counter is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter$Iterator::getCounts()[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>35</index><block>9</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter$Iterator.counter is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter$Iterator::getCounts()[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>53</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.util.MultidimensionalCounter$Iterator.count is replaced by the call to org.apache.commons.math.util.MultidimensionalCounter$Iterator::getCount()I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>8</index><block>6</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local i is replaced by access to field count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>14</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local i is replaced by access to field count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>19</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local i is replaced by access to field count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>36</index><block>9</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>access to local i is replaced by access to field count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>6</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to this$0 is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>13</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to counter is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>17</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to this$0 is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>35</index><block>9</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to counter is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>53</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>the access to count is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>9</index><block>6</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>59</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>replaced Integer return value with 0 for org/apache/commons/math/util/MultidimensionalCounter$Iterator::next</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>47</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Changed increment from -1 to 1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>21</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>39</index><block>9</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>54</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>40</index><block>9</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>55</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>6</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>6</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>removed call to org/apache/commons/math/util/MultidimensionalCounter::access$100</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>18</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>removed call to org/apache/commons/math/util/MultidimensionalCounter::access$200</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>58</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/Integer::valueOf</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>23</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>23</index><block>7</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>9</index><block>6</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>9</index><block>6</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>59</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>mutated return of Object value for org/apache/commons/math/util/MultidimensionalCounter$Iterator::next to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>57</index><block>11</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Removed assignment to member variable count</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MultidimensionalCounter.java</sourceFile><mutatedClass>org.apache.commons.math.util.MultidimensionalCounter$Iterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Integer;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveIncrementsMutator</mutator><index>47</index><block>10</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>1.0</suspValue><description>Removed increment -1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([I)[I</methodDescription><lineNumber>2220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>replaced call to copyOf([II)[I with a call to copyOf([I)[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([I)[I</methodDescription><lineNumber>2220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>replaced call to copyOf([II)[I with a call to copyOf([I)[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([I)[I</methodDescription><lineNumber>2220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>replaced call to copyOf([II)[I with a call to copyOf([I)[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([I)[I</methodDescription><lineNumber>2220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>replaced call to copyOf([II)[I with a call to copyOf([I)[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([I)[I</methodDescription><lineNumber>2220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>replaced call to copyOf([II)[I with a call to copyOf([I)[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([I)[I</methodDescription><lineNumber>2220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>replaced call to copyOf([II)[I with a call to copyOf([I)[I</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([I)[I</methodDescription><lineNumber>2220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>replaced call to org/apache/commons/math/util/MathUtils::copyOf with argument</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([I)[I</methodDescription><lineNumber>2220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>removed call to org/apache/commons/math/util/MathUtils::copyOf</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([I)[I</methodDescription><lineNumber>2220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>replaced return value with null for org/apache/commons/math/util/MathUtils::copyOf</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([I)[I</methodDescription><lineNumber>2220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>mutated return of Object value for org/apache/commons/math/util/MathUtils::copyOf to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([II)[I</methodDescription><lineNumber>2244</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>local source is replaced by local output to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([II)[I</methodDescription><lineNumber>2244</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>local output is replaced by local source to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([II)[I</methodDescription><lineNumber>2244</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>local source is replaced by local output to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>103ms</time></test></testsExecutionTime><patchExecutionTime>150ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([II)[I</methodDescription><lineNumber>2245</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>19</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>local output is replaced by local source to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([II)[I</methodDescription><lineNumber>2243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>access to local len is replaced by access to field NAN_GAP</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([II)[I</methodDescription><lineNumber>2244</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>access to local len is replaced by access to field NAN_GAP</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([II)[I</methodDescription><lineNumber>2243</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>access to local len is replaced by access to field SGN_MASK_FLOAT</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([II)[I</methodDescription><lineNumber>2244</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>access to local len is replaced by access to field SGN_MASK_FLOAT</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([II)[I</methodDescription><lineNumber>2244</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>replaced call to min with a call to max</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([II)[I</methodDescription><lineNumber>2244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>replaced call to org/apache/commons/math/util/FastMath::min with argument</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>109ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([II)[I</methodDescription><lineNumber>2244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([II)[I</methodDescription><lineNumber>2244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([II)[I</methodDescription><lineNumber>2244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>removed call to org/apache/commons/math/util/FastMath::min</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([II)[I</methodDescription><lineNumber>2245</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>20</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>replaced return value with null for org/apache/commons/math/util/MathUtils::copyOf</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([II)[I</methodDescription><lineNumber>2245</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>mutated return of Object value for org/apache/commons/math/util/MathUtils::copyOf to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>copyOf</mutatedMethod><methodDescription>([II)[I</methodDescription><lineNumber>2244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>removed call to java/lang/System::arraycopy</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3784</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.05360562674188974</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3784</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.05360562674188974</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3784</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.05360562674188974</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>63ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3784</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>9</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.05360562674188974</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>165ms</time></test></testsExecutionTime><patchExecutionTime>256ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3784</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.05360562674188974</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3784</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.05360562674188974</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>49ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3784</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.05360562674188974</suspValue><description>replaced int return with 0 for org/apache/commons/math/util/FastMath::min</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3784</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.05360562674188974</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3784</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.05360562674188974</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3784</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</killingTests><suspValue>0.05360562674188974</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.util.MultidimensionalCounterTest.testIterationConsistency(org.apache.commons.math.util.MultidimensionalCounterTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
</mutations>
