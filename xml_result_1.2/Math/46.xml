<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>the access to isNaN is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>26ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>146ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isNaN is replaced by the call to org.apache.commons.math.complex.Complex::isNaN()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>43ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>186ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isNaN is replaced by the call to org.apache.commons.math.complex.Complex::isInfinite()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>139ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>replaced access to isNaN with an access to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>26ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>167ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>replaced access to isNaN with an access to isZero</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>10ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>121ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='11'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>access to field real is replaced by access to local real</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='9'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>access to field imaginary is replaced by access to local real</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>access to field real is replaced by access to local imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='9'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>access to field imaginary is replaced by access to local imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='11'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>local real is replaced by local imaginary to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>49ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='9'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>local imaginary is replaced by local real to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='12'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>18</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>local real is replaced by local imaginary to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>21</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>local imaginary is replaced by local real to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>37</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>local real is replaced by local imaginary to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>118ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='48'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>local imaginary is replaced by local real to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>122ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='37'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>53</index><block>7</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>local real is replaced by local imaginary to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>95ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>57</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>local imaginary is replaced by local real to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>45ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>145ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>83ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>38</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>replaced call to isInfinite with a call to isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>145ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='48'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>41</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>replaced call to isInfinite with a call to isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>27ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>155ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>the access to isNaN is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>130ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>the access to isNaN is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>19ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>138ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>the access to isNaN is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>109ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>44</index><block>6</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='31'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>47</index><block>7</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>46ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>115ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>54</index><block>7</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>26ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>133ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>32ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>148ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>61</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>19ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>129ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='37'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>64</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>19ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>116ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='31'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>93ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='31'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>70ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='37'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><block>7</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>91ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>23ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>132ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='12'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>38</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed call to java/lang/Double::isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>29ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>9ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>188ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='48'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>41</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed call to java/lang/Double::isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>18ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>115ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>65ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>12ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>12ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>12ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>81ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='31'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>39</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>83ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='48'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>42</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>46ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>144ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>56</index><block>7</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>22ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>151ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>15ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>122ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='12'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>20ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>30ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>28ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>53ms</time></test></testsExecutionTime><patchExecutionTime>196ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>29ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>142ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>39</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>15ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>143ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='31'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>42</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>37ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>117ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='37'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>56</index><block>7</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>40ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>119ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>33ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>143ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='11'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Removed assignment to member variable real</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='9'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Removed assignment to member variable imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>30</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Removed assignment to member variable isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>49</index><block>7</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Removed assignment to member variable isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>66</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Removed assignment to member variable isZero</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testExpNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtractInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSubtract(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSqrtNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbs(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCoshNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testLogNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testPowNaNBase(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsTrue(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testpowNull(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testHashCode(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanhNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testSinNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructorNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testCosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsSame(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConjugateNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testTanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testEqualsClass(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>110ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>253</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>253</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>253</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>15ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>49ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>253</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>253</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>0ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>253</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>8</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>11</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>52ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>20</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the access to isZero is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>25</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to isZero is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>8</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded using field isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>11</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded using field isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>20</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the access to isZero is guarded using field isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>60ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>25</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to isZero is guarded using field isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>8</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isNaN is replaced by the call to org.apache.commons.math.complex.Complex::isNaN()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>11</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isNaN is replaced by the call to org.apache.commons.math.complex.Complex::isNaN()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>20</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isZero is replaced by the call to org.apache.commons.math.complex.Complex::isNaN()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>25</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isZero is replaced by the call to org.apache.commons.math.complex.Complex::isNaN()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>8</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isNaN is replaced by the call to org.apache.commons.math.complex.Complex::isInfinite()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='14'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>11</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideInf(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isNaN is replaced by the call to org.apache.commons.math.complex.Complex::isInfinite()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideInf(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivide(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideImaginary(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>20</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isZero is replaced by the call to org.apache.commons.math.complex.Complex::isInfinite()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>25</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isZero is replaced by the call to org.apache.commons.math.complex.Complex::isInfinite()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>8</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced access to isNaN with an access to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='14'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>11</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideInf(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced access to isNaN with an access to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivide(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideImaginary(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>20</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>replaced access to isZero with an access to isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>25</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to isZero with an access to isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>27</index><block>16</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to NaN with an access to I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>30</index><block>17</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to INF with an access to I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>8</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced access to isNaN with an access to isZero</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>11</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced access to isNaN with an access to isZero</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>20</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>replaced access to isZero with an access to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>25</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to isZero with an access to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>27</index><block>16</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to NaN with an access to INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>30</index><block>17</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to INF with an access to NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>27</index><block>16</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to NaN with an access to ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>30</index><block>17</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to INF with an access to ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>27</index><block>16</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to NaN with an access to ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>30</index><block>17</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to INF with an access to ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>27</index><block>16</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to field NaN is replaced by access to local this</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>30</index><block>17</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to field INF is replaced by access to local this</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>27</index><block>16</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to field NaN is replaced by access to local divisor</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>30</index><block>17</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to field INF is replaced by access to local divisor</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>253</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>local divisor is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>14ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>111ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>7</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>local this is replaced by local divisor to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='15'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>10</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtan(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>local divisor is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideInf(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivide(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtan(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanInf(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideImaginary(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>52ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>19</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>local divisor is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>24</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>local this is replaced by local divisor to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>253</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>7</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>10</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>19</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>access to local divisor is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>24</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>253</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>7</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>46ms</time></test></testsExecutionTime><patchExecutionTime>70ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>10</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>59ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>19</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>access to local divisor is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>24</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>253</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>7</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>10</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>57ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>19</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>access to local divisor is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>24</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>253</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>7</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>10</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>58ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>19</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>access to local divisor is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>24</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>253</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>7</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>10</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>20ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>9ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>72ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>19</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>access to local divisor is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>24</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>253</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to the local divisor is replaced a call divisor.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>49ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>7</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>10</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to the local divisor is replaced a call divisor.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>19</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the access to the local divisor is replaced a call divisor.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>24</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>58ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>8</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>11</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>59ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>20</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the access to isZero is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>36ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>61ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>25</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to isZero is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>8</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>11</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>20</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the access to isZero is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>25</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to isZero is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>8</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded returning field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>11</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded returning field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>20</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the access to isZero is guarded returning field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>25</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to isZero is guarded returning field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>54ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>32</index><block>17</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced return value with null for org/apache/commons/math/complex/Complex::divide</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>9</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='15'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>12</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtan(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>28ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>111ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>28ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideInf(org.apache.commons.math.complex.ComplexTest)</name><time>29ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>21ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivide(org.apache.commons.math.complex.ComplexTest)</name><time>19ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideInf(org.apache.commons.math.complex.ComplexTest)</name><time>14ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>23ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtan(org.apache.commons.math.complex.ComplexTest)</name><time>14ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanInf(org.apache.commons.math.complex.ComplexTest)</name><time>25ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>27ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>21ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>28ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivide(org.apache.commons.math.complex.ComplexTest)</name><time>22ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideImaginary(org.apache.commons.math.complex.ComplexTest)</name><time>16ms</time></test></testsExecutionTime><patchExecutionTime>454ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>21</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>26</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>9</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>22ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>12ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>18ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>22ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>15ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>12ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>139ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>12</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>21</index><block>14</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>26</index><block>15</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>38ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><block>17</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>mutated return of Object value for org/apache/commons/math/complex/Complex::divide to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>253</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>removed call to org/apache/commons/math/util/MathUtils::checkNotNull</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideReal(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testScalarDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>checkNotNull</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>2334</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.05817297271631501</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>33ms</time></test></testsExecutionTime><patchExecutionTime>148ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>checkNotNull</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>2334</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.05817297271631501</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>checkNotNull</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>2334</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.05817297271631501</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
</mutations>
