<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/SortedMap;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Comparator;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Comparator;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Comparator;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Map;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Map;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>69ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Map;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Map;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/SortedMap;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Map;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Map;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/SortedMap;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Comparator;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Comparator;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/SortedMap;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/SortedMap;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/SortedMap;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Comparator;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>removed call to java/util/TreeMap::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>11</index><block>0</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>Removed assignment to member variable freqTable</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>MethodNameMutator_0</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to factory method java.lang.Long.valueOf(J)Ljava/lang/Long; is replaced by an instantiation of type java.lang.Long using (J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>MethodNameMutator_4</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to factory method java.lang.Long.valueOf(J)Ljava/lang/Long; is replaced by an instantiation of type java.lang.Long using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>0ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>97ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(C)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>64ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(C)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(C)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(C)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(Ljava/lang/Integer;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(Ljava/lang/Integer;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(Ljava/lang/Integer;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(Ljava/lang/Integer;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(C)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(C)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(Ljava/lang/Integer;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(Ljava/lang/Integer;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>0ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to addValue(Ljava/lang/Comparable;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to addValue(Ljava/lang/Comparable;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to addValue(Ljava/lang/Comparable;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to addValue(Ljava/lang/Comparable;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to addValue(Ljava/lang/Comparable;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to org.apache.commons.math.stat.Frequency::addValue(Ljava/lang/Comparable;)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>removed call to java/lang/Long::valueOf</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>MethodNameMutator_0</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to factory method java.lang.Long.valueOf(J)Ljava/lang/Long; is replaced by an instantiation of type java.lang.Long using (J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>MethodNameMutator_4</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to factory method java.lang.Long.valueOf(J)Ljava/lang/Long; is replaced by an instantiation of type java.lang.Long using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(C)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(C)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(C)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(C)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(Ljava/lang/Integer;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(Ljava/lang/Integer;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(Ljava/lang/Integer;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(Ljava/lang/Integer;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(C)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>90ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(C)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>58ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(Ljava/lang/Integer;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(Ljava/lang/Integer;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>58ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>57ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>48ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to addValue(Ljava/lang/Comparable;)V with a call to addValue(J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local v is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to addValue(Ljava/lang/Comparable;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to addValue(Ljava/lang/Comparable;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to addValue(Ljava/lang/Comparable;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to addValue(Ljava/lang/Comparable;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to addValue(Ljava/lang/Comparable;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to org.apache.commons.math.stat.Frequency::addValue(Ljava/lang/Comparable;)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>removed call to java/lang/Long::valueOf</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>8</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>removed call to org/apache/commons/math/stat/Frequency::addValue</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>MethodNameMutator_0</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to factory method java.util.TreeMap.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>115ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>MethodNameMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to factory method java.lang.Long.valueOf(J)Ljava/lang/Long; is replaced by an instantiation of type java.lang.Long using (J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>MethodNameMutator_0</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to factory method java.util.TreeMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>MethodNameMutator_0</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to factory method java.lang.Long.valueOf(J)Ljava/lang/Long; is replaced by an instantiation of type java.lang.Long using (J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>MethodNameMutator_0</mutator><index>49</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to factory method java.util.TreeMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>MethodNameMutator_1</mutator><index>22</index><block>2</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>the call to factory method java.util.TreeMap.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math.estimation.GaussNewtonEstimatorTest$Circle using (DD)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>MethodNameMutator_1</mutator><index>36</index><block>3</block><killingTests/><suspValue>0.17677669529663687</suspValue><description>the call to factory method java.util.TreeMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math.estimation.GaussNewtonEstimatorTest$Circle using (DD)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>MethodNameMutator_1</mutator><index>49</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to factory method java.util.TreeMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math.estimation.GaussNewtonEstimatorTest$Circle using (DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>MethodNameMutator_3</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to factory method java.util.TreeMap.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest$Circle using (DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>MethodNameMutator_3</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to factory method java.util.TreeMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest$Circle using (DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>92ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>MethodNameMutator_3</mutator><index>49</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to factory method java.util.TreeMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest$Circle using (DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>MethodNameMutator_4</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to factory method java.lang.Long.valueOf(J)Ljava/lang/Long; is replaced by an instantiation of type java.lang.Long using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>MethodNameMutator_4</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to factory method java.lang.Long.valueOf(J)Ljava/lang/Long; is replaced by an instantiation of type java.lang.Long using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>52ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>0ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>149</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.CatchTypeWideningMutator_0</mutator><index>54</index><block>5</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>catch type java/lang/ClassCastException is replaced with java/lang/RuntimeException</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the access to freqTable is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>32</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the access to freqTable is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>42</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to freqTable is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the access to freqTable is guarded using field freqTable</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>32</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the access to freqTable is guarded using field freqTable</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>42</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to freqTable is guarded using field freqTable</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local v is replaced by local obj to be used</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>21</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local obj is replaced by local v to be used</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>local obj is replaced by local v to be used</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>43</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>local obj is replaced by local v to be used</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to get with a call to remove</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to get with a call to lowerKey</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to get with a call to floorKey</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to get with a call to ceilingKey</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to get with a call to higherKey</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to java.util.TreeMap::get(Ljava/lang/Object;)Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to java.util.TreeMap::put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>45</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to java.lang.Long::longValue()J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>49</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to java.util.TreeMap::put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the access to freqTable is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>32</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the access to freqTable is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>42</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to freqTable is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the access to freqTable is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>32</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the access to freqTable is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>42</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to freqTable is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the access to freqTable is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>32</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the access to freqTable is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>42</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to freqTable is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to get(Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>59ms</time></test></testsExecutionTime><patchExecutionTime>68ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>45</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to longValue()J is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>49</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to get(Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>45</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to longValue()J is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>49</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to get(Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>45</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to longValue()J is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>49</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to get(Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>45</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to longValue()J is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>49</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to get(Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>the call to put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>45</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to longValue()J is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>49</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to java/util/TreeMap::get with argument</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>replaced call to java/util/TreeMap::put with argument</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>49</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to java/util/TreeMap::put with argument</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>34</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>Substituted 1 with 2</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>46</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>Substituted 1 with 2</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>47</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>Replaced long addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed call to java/util/TreeMap::get</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed call to java/lang/Long::valueOf</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed call to java/util/TreeMap::put</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>45</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>removed call to java/lang/Long::longValue</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>removed call to java/lang/Long::valueOf</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>49</index><block>4</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>removed call to java/util/TreeMap::put</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>28</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>addValue</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>28</index><block>2</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.17677669529663687</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>MethodNameMutator_0</mutator><index>23</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to factory method java.util.TreeMap.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>MethodNameMutator_1</mutator><index>23</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to factory method java.util.TreeMap.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math.estimation.GaussNewtonEstimatorTest$Circle using (DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>MethodNameMutator_3</mutator><index>23</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to factory method java.util.TreeMap.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest$Circle using (DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>255</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.CatchTypeWideningMutator_0</mutator><index>38</index><block>16</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>catch type java/lang/ClassCastException is replaced with java/lang/RuntimeException</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>21</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to freqTable is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>21</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to freqTable is guarded using field freqTable</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>43</index><block>16</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local result is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>23</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to get with a call to remove</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>23</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to get with a call to lowerKey</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>23</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to get with a call to floorKey</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>23</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to get with a call to ceilingKey</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>23</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to get with a call to higherKey</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>23</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to java.util.TreeMap::get(Ljava/lang/Object;)Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>33</index><block>15</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to java.lang.Long::longValue()J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>21</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to freqTable is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>21</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to freqTable is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>21</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to freqTable is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>23</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to get(Ljava/lang/Object;)Ljava/lang/Object; is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>33</index><block>15</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to longValue()J is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>23</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to get(Ljava/lang/Object;)Ljava/lang/Object; is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>33</index><block>15</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to longValue()J is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>23</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to get(Ljava/lang/Object;)Ljava/lang/Object; is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>33</index><block>15</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to longValue()J is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>23</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to java/util/TreeMap::get with argument</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>16</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>249</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>23</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed call to java/util/TreeMap::get</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>33</index><block>15</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>removed call to java/lang/Long::longValue</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>44</index><block>16</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCount</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>29</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>29</index><block>14</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCount</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>44</index><block>16</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced return of long value with value + 1 for org/apache/commons/math/stat/Frequency::getCount</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>MethodNameMutator_0</mutator><index>5</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to factory method java.lang.Long.valueOf(J)Ljava/lang/Long; is replaced by an instantiation of type java.lang.Long using (J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>MethodNameMutator_4</mutator><index>5</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to factory method java.lang.Long.valueOf(J)Ljava/lang/Long; is replaced by an instantiation of type java.lang.Long using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>5</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>5</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>5</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>5</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>48ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>5</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>5</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>5</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>5</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>5</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>5</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>77ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>5</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>89ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>5</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>85ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local v is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq with a call to getCount</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to org.apache.commons.math.stat.Frequency::getCumFreq(Ljava/lang/Comparable;)J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to getCumFreq(Ljava/lang/Comparable;)J is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to getCumFreq(Ljava/lang/Comparable;)J is guarded returning local v</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to getCumFreq(Ljava/lang/Comparable;)J is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed call to java/lang/Long::valueOf</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>6</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed call to org/apache/commons/math/stat/Frequency::getCumFreq</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>7</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>444</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><block>41</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced return of long value with value + 1 for org/apache/commons/math/stat/Frequency::getCumFreq</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>MethodNameMutator_0</mutator><index>51</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to factory method java.util.TreeMap.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>121ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>MethodNameMutator_0</mutator><index>79</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to factory method java.util.TreeMap.firstKey()Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>MethodNameMutator_0</mutator><index>92</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to factory method java.util.TreeMap.lastKey()Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>MethodNameMutator_1</mutator><index>51</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to factory method java.util.TreeMap.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math.estimation.GaussNewtonEstimatorTest$Circle using (DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>MethodNameMutator_1</mutator><index>79</index><block>31</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>the call to factory method java.util.TreeMap.firstKey()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math.estimation.GaussNewtonEstimatorTest$Circle using (DD)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>MethodNameMutator_1</mutator><index>92</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to factory method java.util.TreeMap.lastKey()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math.estimation.GaussNewtonEstimatorTest$Circle using (DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>MethodNameMutator_3</mutator><index>51</index><block>28</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>the call to factory method java.util.TreeMap.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest$Circle using (DD)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>MethodNameMutator_3</mutator><index>79</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to factory method java.util.TreeMap.firstKey()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest$Circle using (DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>102ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>MethodNameMutator_3</mutator><index>92</index><block>33</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>the call to factory method java.util.TreeMap.lastKey()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest$Circle using (DD)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(Ljava/lang/Comparable;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>0ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(Ljava/lang/Comparable;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(Ljava/lang/Comparable;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(Ljava/lang/Comparable;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>24ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(Ljava/lang/Comparable;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(Ljava/lang/Comparable;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq(J)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>401</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.CatchTypeWideningMutator_0</mutator><index>66</index><block>30</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>catch type java/lang/ClassCastException is replaced with java/lang/RuntimeException</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>388</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>28</index><block>27</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>49</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>78</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>91</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>388</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>28</index><block>27</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded using field freqTable</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>49</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded using field freqTable</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>78</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded using field freqTable</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>91</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded using field freqTable</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getCumFreq with a call to getCount</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>51</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to get with a call to remove</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>79</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to firstKey with a call to lastKey</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>92</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to lastKey with a call to firstKey</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>51</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to get with a call to lowerKey</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>79</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to firstKey with a call to clone</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>76ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>92</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to lastKey with a call to clone</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>51</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to get with a call to floorKey</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>51</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to get with a call to ceilingKey</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>51</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to get with a call to higherKey</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>382</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>4</index><block>23</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>the call to org.apache.commons.math.stat.Frequency::getSumFreq()J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>22</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to java.lang.Integer::longValue()J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to org.apache.commons.math.stat.Frequency::getCumFreq(J)J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>388</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>29</index><block>27</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to java.util.TreeMap::comparator()Ljava/util/Comparator; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>51</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to java.util.TreeMap::get(Ljava/lang/Object;)Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>61</index><block>29</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to java.lang.Long::longValue()J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>79</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to java.util.TreeMap::firstKey()Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>80</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to java.util.Comparator::compare(Ljava/lang/Object;Ljava/lang/Object;)I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>92</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to java.util.TreeMap::lastKey()Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>93</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to java.util.Comparator::compare(Ljava/lang/Object;Ljava/lang/Object;)I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>408</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>98</index><block>34</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>the call to org.apache.commons.math.stat.Frequency::getSumFreq()J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>388</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>28</index><block>27</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>49</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>78</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>91</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>20ms</time></test></testsExecutionTime><patchExecutionTime>90ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>49</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>78</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>91</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>388</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>28</index><block>27</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>49</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>78</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>91</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to freqTable is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>382</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>4</index><block>23</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>the call to getSumFreq()J is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>22</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to longValue()J is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to getCumFreq(J)J is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>388</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>29</index><block>27</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to comparator()Ljava/util/Comparator; is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>51</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to get(Ljava/lang/Object;)Ljava/lang/Object; is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>61</index><block>29</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to longValue()J is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>79</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to firstKey()Ljava/lang/Object; is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>80</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to compare(Ljava/lang/Object;Ljava/lang/Object;)I is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>92</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to lastKey()Ljava/lang/Object; is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>93</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to compare(Ljava/lang/Object;Ljava/lang/Object;)I is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>408</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>98</index><block>34</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>the call to getSumFreq()J is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>51</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to get(Ljava/lang/Object;)Ljava/lang/Object; is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>61</index><block>29</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to longValue()J is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>79</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to firstKey()Ljava/lang/Object; is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>80</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to compare(Ljava/lang/Object;Ljava/lang/Object;)I is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>92</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to lastKey()Ljava/lang/Object; is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>93</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to compare(Ljava/lang/Object;Ljava/lang/Object;)I is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>408</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>98</index><block>34</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>the call to getSumFreq()J is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>382</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>4</index><block>23</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>the call to getSumFreq()J is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>22</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to longValue()J is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to getCumFreq(J)J is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>388</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>29</index><block>27</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to comparator()Ljava/util/Comparator; is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>51</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to get(Ljava/lang/Object;)Ljava/lang/Object; is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>61</index><block>29</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to longValue()J is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>79</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to firstKey()Ljava/lang/Object; is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>80</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to compare(Ljava/lang/Object;Ljava/lang/Object;)I is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>92</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to lastKey()Ljava/lang/Object; is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>93</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to compare(Ljava/lang/Object;Ljava/lang/Object;)I is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>408</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>98</index><block>34</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>the call to getSumFreq()J is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to org/apache/commons/math/stat/Frequency::getCumFreq with argument</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>51</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to java/util/TreeMap::get with argument</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>81</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>94</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>390</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>40</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed call to org/apache/commons/math/stat/Frequency$NaturalComparator::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>382</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>5</index><block>23</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>44</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>382</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><block>23</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>25</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>389</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><block>27</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>396</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>81</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>94</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>382</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>23</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>removed call to org/apache/commons/math/stat/Frequency::getSumFreq</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>22</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed call to java/lang/Integer::longValue</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>23</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed call to org/apache/commons/math/stat/Frequency::getCumFreq</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>388</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>29</index><block>27</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed call to java/util/TreeMap::comparator</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>395</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>51</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed call to java/util/TreeMap::get</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>397</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>61</index><block>29</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed call to java/lang/Long::longValue</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>79</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed call to java/util/TreeMap::firstKey</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>80</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed call to java/util/Comparator::compare</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>92</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed call to java/util/TreeMap::lastKey</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>93</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed call to java/util/Comparator::compare</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>408</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>98</index><block>34</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>removed call to org/apache/commons/math/stat/Frequency::getSumFreq</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>24</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>408</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>99</index><block>34</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getCumFreq</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>382</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>7</index><block>23</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>16</index><block>25</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>389</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>34</index><block>27</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>396</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>57</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>382</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>7</index><block>23</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>16</index><block>25</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>389</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>34</index><block>27</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>396</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>57</index><block>28</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>81</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>94</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>81</index><block>31</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>407</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>94</index><block>33</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>24</index><block>26</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced return of long value with value + 1 for org/apache/commons/math/stat/Frequency::getCumFreq</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumFreq</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)J</methodDescription><lineNumber>408</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>99</index><block>34</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced return of long value with value + 1 for org/apache/commons/math/stat/Frequency::getCumFreq</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq(Ljava/lang/Comparable;)J with a call to getCumFreq(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>492</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>8</index><block>42</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>access to local sumFreq is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>22</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local sumFreq is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getCumFreq with a call to getCount</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>41ms</time></test></testsExecutionTime><patchExecutionTime>55ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>491</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>4</index><block>42</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>the call to org.apache.commons.math.stat.Frequency::getSumFreq()J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to org.apache.commons.math.stat.Frequency::getCumFreq(Ljava/lang/Comparable;)J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>491</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>4</index><block>42</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>the call to getSumFreq()J is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to getCumFreq(Ljava/lang/Comparable;)J is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>492</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>42</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>492</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><block>42</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>491</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>42</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>removed call to org/apache/commons/math/stat/Frequency::getSumFreq</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>20</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed call to org/apache/commons/math/stat/Frequency::getCumFreq</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>25</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getCumPct</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>492</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>11</index><block>42</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>492</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>11</index><block>42</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getCumPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><block>44</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/stat/Frequency::getCumPct</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>MethodNameMutator_0</mutator><index>6</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method java.lang.Long.valueOf(J)Ljava/lang/Long; is replaced by an instantiation of type java.lang.Long using (J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>MethodNameMutator_4</mutator><index>6</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method java.lang.Long.valueOf(J)Ljava/lang/Long; is replaced by an instantiation of type java.lang.Long using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>6</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>6</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>6</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>86ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>6</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>62ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>71ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>75ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>66ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>64ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>48ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>55ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>79ms</time></test></testsExecutionTime><patchExecutionTime>112ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>6</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>6</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>6</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>6</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>6</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>6</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>6</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>6</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>155ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to getPct with a call to getCumPct</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to org.apache.commons.math.stat.Frequency::getPct(Ljava/lang/Comparable;)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to getPct(Ljava/lang/Comparable;)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>6</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to java/lang/Long::valueOf</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to org/apache/commons/math/stat/Frequency::getPct</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>8</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><block>21</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/stat/Frequency::getPct</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>MethodNameMutator_0</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.Long.valueOf(J)Ljava/lang/Long; is replaced by an instantiation of type java.lang.Long using (J)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>MethodNameMutator_4</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.Long.valueOf(J)Ljava/lang/Long; is replaced by an instantiation of type java.lang.Long using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>58ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>81ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;I)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to valueOf(J)Ljava/lang/Long; with a call to valueOf(Ljava/lang/String;)Ljava/lang/Long;</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct(Ljava/lang/Comparable;)D with a call to getPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>access to local v is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getPct with a call to getCumPct</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>the call to org.apache.commons.math.stat.Frequency::getPct(Ljava/lang/Comparable;)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>the call to getPct(Ljava/lang/Comparable;)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/Long::valueOf</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>removed call to org/apache/commons/math/stat/Frequency::getPct</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(J)D</methodDescription><lineNumber>342</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/stat/Frequency::getPct</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(J)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(C)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(I)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount(Ljava/lang/Comparable;)J with a call to getCount(Ljava/lang/Object;)J</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>317</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>8</index><block>18</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local sumFreq is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>0ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>22</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>access to local sumFreq is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to getCount with a call to getCumFreq</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>316</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to org.apache.commons.math.stat.Frequency::getSumFreq()J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>the call to org.apache.commons.math.stat.Frequency::getCount(Ljava/lang/Comparable;)J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>316</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to getSumFreq()J is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>the call to getCount(Ljava/lang/Comparable;)J is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>317</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>18</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>317</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><block>18</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>316</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed call to org/apache/commons/math/stat/Frequency::getSumFreq</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>20</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>removed call to org/apache/commons/math/stat/Frequency::getCount</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>25</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>317</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>11</index><block>18</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>317</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>11</index><block>18</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Comparable;)D</methodDescription><lineNumber>320</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><block>20</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.5</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/stat/Frequency::getPct</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>71ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(I)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(J)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>90ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>61ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(C)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to getCumPct(Ljava/lang/Comparable;)D with a call to getCumPct(Ljava/lang/Object;)D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>83ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>6</index><block>17</block><killingTests/><suspValue>1.0</suspValue><description>replaced call to getCumPct with a call to getPct</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>the call to org.apache.commons.math.stat.Frequency::getCumPct(Ljava/lang/Comparable;)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>the call to getCumPct(Ljava/lang/Comparable;)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>6</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>removed call to org/apache/commons/math/stat/Frequency::getCumPct</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>7</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/stat/Frequency::getPct</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getPct</mutatedMethod><methodDescription>(Ljava/lang/Object;)D</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><block>17</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>1.0</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/stat/Frequency::getPct</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>8</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to freqTable is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>8</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to freqTable is guarded using field freqTable</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>218</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>19</index><block>10</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>access to local result is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>29</index><block>11</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>access to local result is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>9</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to java.util.TreeMap::values()Ljava/util/Collection; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>10</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to java.util.Collection::iterator()Ljava/util/Iterator; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>15</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to java.util.Iterator::hasNext()Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>218</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>21</index><block>10</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to java.util.Iterator::next()Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>218</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>23</index><block>10</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to java.lang.Long::longValue()J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>8</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to freqTable is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>8</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to freqTable is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>8</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to freqTable is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>9</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to values()Ljava/util/Collection; is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>10</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to iterator()Ljava/util/Iterator; is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>15</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to hasNext()Z is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>218</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>21</index><block>10</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to next()Ljava/lang/Object; is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>218</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>23</index><block>10</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to longValue()J is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>9</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to values()Ljava/util/Collection; is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>10</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to iterator()Ljava/util/Iterator; is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>15</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to hasNext()Z is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>218</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>21</index><block>10</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to next()Ljava/lang/Object; is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>218</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>23</index><block>10</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to longValue()J is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>9</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to values()Ljava/util/Collection; is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>10</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to iterator()Ljava/util/Iterator; is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>15</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to hasNext()Z is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>218</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>21</index><block>10</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to next()Ljava/lang/Object; is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>218</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>23</index><block>10</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to longValue()J is guarded returning field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>3</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>10</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>Replaced long addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>9</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>removed call to java/util/TreeMap::values</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>removed call to java/util/Collection::iterator</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>15</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>removed call to java/util/Iterator::hasNext</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>23</index><block>10</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>removed call to java/lang/Long::longValue</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>30</index><block>11</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>replaced long return with 0 for org/apache/commons/math/stat/Frequency::getSumFreq</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>16</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>16</index><block>9</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency</mutatedClass><mutatedMethod>getSumFreq</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>30</index><block>11</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>replaced return of long value with value + 1 for org/apache/commons/math/stat/Frequency::getSumFreq</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency$NaturalComparator</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Ljava/lang/Comparable;Ljava/lang/Comparable;)I</methodDescription><lineNumber>561</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local o1 is replaced by local o2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency$NaturalComparator</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Ljava/lang/Comparable;Ljava/lang/Comparable;)I</methodDescription><lineNumber>561</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local o2 is replaced by local o1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency$NaturalComparator</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Ljava/lang/Comparable;Ljava/lang/Comparable;)I</methodDescription><lineNumber>561</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to java.lang.Comparable::compareTo(Ljava/lang/Object;)I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency$NaturalComparator</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Ljava/lang/Comparable;Ljava/lang/Comparable;)I</methodDescription><lineNumber>561</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to compareTo(Ljava/lang/Object;)I is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency$NaturalComparator</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Ljava/lang/Comparable;Ljava/lang/Comparable;)I</methodDescription><lineNumber>561</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed call to java/lang/Comparable::compareTo</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency$NaturalComparator</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Ljava/lang/Comparable;Ljava/lang/Comparable;)I</methodDescription><lineNumber>561</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced int return with 0 for org/apache/commons/math/stat/Frequency$NaturalComparator::compare</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Frequency.java</sourceFile><mutatedClass>org.apache.commons.math.stat.Frequency$NaturalComparator</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Ljava/lang/Comparable;Ljava/lang/Comparable;)I</methodDescription><lineNumber>561</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.stat.FrequencyTest.testPcts(org.apache.commons.math.stat.FrequencyTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>85ms</patchExecutionTime></mutation>
</mutations>
