<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>6</index><block>0</block><killingTests/><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>6</index><block>0</block><killingTests/><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>4ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>6</index><block>0</block><killingTests/><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>6</index><block>0</block><killingTests/><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>4ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>6</index><block>0</block><killingTests/><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>replaced call to &#60;init&#62;(ID)V with a call to &#60;init&#62;(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.15811388300841897</suspValue><description>Substituted 16 with 17</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced access to mask with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced access to mask with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>125</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>32</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to field missingEntries is replaced by access to local missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to field mask is replaced by access to local expectedSize</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to field mask is replaced by access to local capacity</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>122</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>local capacity is replaced by local expectedSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>19</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>local capacity is replaced by local expectedSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>124</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>25</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>local capacity is replaced by local expectedSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>36</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>local capacity is replaced by local expectedSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced call to computeCapacity with a call to nextPowerOfTwo</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced call to computeCapacity with a call to perturb</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced call to computeCapacity with a call to changeIndexSign</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>121</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced call to computeCapacity with a call to hashOf</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced call to org/apache/commons/math/util/OpenIntToDoubleHashMap::computeCapacity with argument</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>39ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>37</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>38</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::computeCapacity</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Removed assignment to member variable keys</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>21</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Removed assignment to member variable values</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>27</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Removed assignment to member variable states</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>32</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Removed assignment to member variable missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Removed assignment to member variable mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to keys is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to keys is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>23</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to keys is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>36</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>52</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to states is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>55</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to states is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>63</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to missingEntries is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to size is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>75</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to mask is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to count is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to size is guarded using local length</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>75</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to mask is guarded using local length</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to count is guarded using local length</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap.size is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::size()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>75</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap.mask is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::size()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap.count is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::size()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to size with an access to mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>70</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to size with an access to mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>75</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to mask with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>76</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to mask with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to count with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>82</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to count with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to size with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>70</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to size with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>75</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to mask with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>76</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to mask with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to count with an access to mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>82</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to count with an access to mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to field size is replaced by access to local length</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>70</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to field size is replaced by access to local length</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>75</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to field mask is replaced by access to local length</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>76</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to field mask is replaced by access to local length</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to field count is replaced by access to local length</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>82</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to field count is replaced by access to local length</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>133</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>2</block><killingTests/><suspValue>0.2581988897471611</suspValue><description>local this is replaced by local source to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>7</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local source is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local this is replaced by local source to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>19</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local source is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local this is replaced by local source to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>29</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local this is replaced by local source to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>35</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local source is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>38</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local this is replaced by local source to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>45</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local this is replaced by local source to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>51</index><block>2</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testCopy(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local source is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testCopy(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>54</index><block>2</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testCopy(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local this is replaced by local source to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testCopy(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>61</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local this is replaced by local source to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>62</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local source is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>67</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local this is replaced by local source to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>68</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local source is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>73</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local this is replaced by local source to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>74</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local source is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>79</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local this is replaced by local source to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>55ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>80</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local source is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to keys is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to keys is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>23</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to keys is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>36</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>52</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to states is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>55</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to states is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>63</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to missingEntries is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to size is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>75</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to mask is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to count is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to keys is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to keys is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>23</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to keys is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>36</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>52</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to states is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>55</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to states is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>63</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to missingEntries is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to size is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>75</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to mask is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to count is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to keys is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to keys is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>23</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to keys is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>36</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>52</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to states is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>55</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to states is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>63</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to missingEntries is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>69</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to size is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>42ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>75</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to mask is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>81</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to count is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>21</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>24</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>37</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>40</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>53</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>56</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>removed call to java/lang/System::arraycopy</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>removed call to java/lang/System::arraycopy</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>58</index><block>2</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testCopy(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>removed call to java/lang/System::arraycopy</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testCopy(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>16</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Removed assignment to member variable keys</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>32</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Removed assignment to member variable values</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>48</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Removed assignment to member variable states</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>64</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Removed assignment to member variable missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>70</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Removed assignment to member variable size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>76</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Removed assignment to member variable mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>82</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Removed assignment to member variable count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>157</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>21</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>local capacity is replaced by local expectedSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>26</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>local powerOfTwo is replaced by local expectedSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>27</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>local capacity is replaced by local expectedSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>31</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local capacity is replaced by local expectedSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>26</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>local powerOfTwo is replaced by local capacity to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>27</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>local capacity is replaced by local powerOfTwo to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>31</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local capacity is replaced by local powerOfTwo to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local expectedSize is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>11</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>access to local expectedSize is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>157</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>21</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>access to local capacity is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>26</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>access to local powerOfTwo is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>27</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>access to local capacity is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>31</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local capacity is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local expectedSize is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>11</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>access to local expectedSize is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>157</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>21</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>access to local capacity is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>26</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>access to local powerOfTwo is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>27</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>access to local capacity is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>31</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local capacity is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local expectedSize is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>11</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>access to local expectedSize is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>157</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>21</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>access to local capacity is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>16ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>26</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>access to local powerOfTwo is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>27</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>access to local capacity is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>31</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local capacity is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to ceil with a call to sqrt</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>157</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>22</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to highestOneBit with a call to lowestOneBit</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to ceil with a call to cosh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>157</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>22</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to highestOneBit with a call to numberOfLeadingZeros</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to ceil with a call to sinh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>157</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>22</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to highestOneBit with a call to numberOfTrailingZeros</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to ceil with a call to tanh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>157</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>22</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to highestOneBit with a call to bitCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to ceil with a call to acosh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>157</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>22</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to highestOneBit with a call to reverse</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to ceil with a call to asinh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>157</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>22</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to highestOneBit with a call to signum</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to ceil with a call to atanh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>157</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>22</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to highestOneBit with a call to reverseBytes</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to ceil with a call to signum</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to ceil with a call to nextUp</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to ceil with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to org/apache/commons/math/util/FastMath::ceil with argument</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>22</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>replaced call to java/lang/Integer::highestOneBit with argument</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>Substituted 0.5 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>14</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>Replaced float division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>removed call to org/apache/commons/math/util/FastMath::ceil</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>22</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>removed call to java/lang/Integer::highestOneBit</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>32</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced int return with 0 for org/apache/commons/math/util/OpenIntToDoubleHashMap::computeCapacity</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>28</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>28</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.1336306209562122</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>computeCapacity</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the access to mask is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>27</index><block>19</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to states is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the access to mask is guarded using local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the access to mask is guarded using field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>27</index><block>19</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to states is guarded using field states</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap.mask is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::size()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced access to mask with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced access to mask with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to field mask is replaced by access to local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to field mask is replaced by access to local hash</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>8</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>local hash is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>local key is replaced by local hash to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>17</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>local index is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>28</index><block>19</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local index is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>local key is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>17</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>local index is replaced by local hash to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>28</index><block>19</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local index is replaced by local hash to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>210</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local key is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>8</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local hash is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local key is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>17</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>28</index><block>19</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>210</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local key is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>8</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local hash is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local key is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>17</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>28</index><block>19</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>210</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local key is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>8</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local hash is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local key is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>17</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>28</index><block>19</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>210</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local key is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>8</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local hash is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local key is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>17</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local index is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>28</index><block>19</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local index is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>210</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local key is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>8</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local hash is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local key is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>17</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local index is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>28</index><block>19</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local index is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>210</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced call to hashOf with a call to computeCapacity</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>210</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>4</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced call to hashOf with a call to nextPowerOfTwo</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>210</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>4</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced call to hashOf with a call to perturb</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>210</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>4</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced call to hashOf with a call to changeIndexSign</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::containsKey(II)Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the access to mask is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>216</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>27</index><block>19</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to states is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to containsKey(II)Z is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>4</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced call to org/apache/commons/math/util/OpenIntToDoubleHashMap::hashOf with argument</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>115ms</time></test></testsExecutionTime><patchExecutionTime>179ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>23</index><block>18</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced boolean return with false for org/apache/commons/math/util/OpenIntToDoubleHashMap::containsKey</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>34</index><block>20</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5</suspValue><description>replaced boolean return with true for org/apache/commons/math/util/OpenIntToDoubleHashMap::containsKey</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>22</index><block>18</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>33</index><block>20</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><block>19</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::hashOf</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::containsKey</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>19</index><block>17</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>30</index><block>19</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>19</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>30</index><block>19</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><block>18</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testIterator(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>34</index><block>20</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>6</index><block>57</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>the access to states is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>13</index><block>58</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>the access to keys is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>6</index><block>57</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>the access to states is guarded using field states</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>13</index><block>58</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>the access to keys is guarded using field keys</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>56</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>local key is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>7</index><block>57</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>local index is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>14</index><block>58</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>local index is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>36ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>16</index><block>58</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>local key is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>56</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local key is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>7</index><block>57</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutAndGet(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testGetFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutAndGet(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>14</index><block>58</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>16</index><block>58</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local key is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testGetFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>56</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local key is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>7</index><block>57</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>14</index><block>58</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testGetFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>16</index><block>58</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local key is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testGetFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>56</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local key is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>7</index><block>57</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutAndGet(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testGetFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutAndGet(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>14</index><block>58</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>16</index><block>58</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local key is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testGetFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>56</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local key is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>7</index><block>57</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local index is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>14</index><block>58</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local index is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testGetFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>16</index><block>58</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local key is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>56</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local key is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>7</index><block>57</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutAndGet(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local index is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testGetFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutAndGet(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>14</index><block>58</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local index is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>16</index><block>58</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>access to local key is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testGetFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>6</index><block>57</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>the access to states is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>13</index><block>58</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>the access to keys is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>23</index><block>60</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>replaced boolean return with false for org/apache/commons/math/util/OpenIntToDoubleHashMap::containsKey</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testGetFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>23</index><block>60</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>replaced boolean return with true for org/apache/commons/math/util/OpenIntToDoubleHashMap::containsKey</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>57</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>18</index><block>59</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testGetFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>25ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>21</index><block>60</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>56</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>57</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><block>58</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>4</index><block>56</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>10</index><block>57</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutAndGet(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testGetFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutAndGet(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>17</index><block>58</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testGetFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>4</index><block>56</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>10</index><block>57</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>17</index><block>58</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>containsKey</mutatedMethod><methodDescription>(II)Z</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><block>60</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13736056394868904</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>394</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to keys is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>11</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to states is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>396</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>18</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>25</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>28</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to missingEntries is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>398</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>34</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to size is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>399</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>42</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to count is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>28</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to missingEntries is guarded using local previous</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>398</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>34</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to size is guarded using local index</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>399</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>42</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to count is guarded using local index</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>394</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to keys is guarded using field keys</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>11</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to states is guarded using field states</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>396</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>18</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded using field values</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>25</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded using field values</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>28</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to missingEntries is guarded using field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>398</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>34</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to size is guarded using field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>399</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>42</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to count is guarded using field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>398</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>34</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap.size is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::size()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='15'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>399</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>42</index><block>61</block><killingTests/><suspValue>0.2581988897471611</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap.count is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::size()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testAdd(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>15ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testMultiply(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>11ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemove2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>19ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemove(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>29ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMapFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>26ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testMultiply2(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testScalarAdd(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testPremultiply(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testContainsKey(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>18ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testPlusMinus(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>9ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testTranspose(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>13ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>184ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>398</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>34</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to size with an access to mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>398</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>37</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to size with an access to mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='15'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>399</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>42</index><block>61</block><killingTests/><suspValue>0.2581988897471611</suspValue><description>replaced access to count with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testAdd(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testMultiply(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemove2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>14ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemove(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>22ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMapFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testMultiply2(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testScalarAdd(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testPremultiply(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testContainsKey(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>20ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testPlusMinus(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testTranspose(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>117ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>399</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>45</index><block>61</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to count with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>398</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>34</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to size with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>398</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>37</index><block>61</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to size with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>399</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>42</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to count with an access to mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>399</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>45</index><block>61</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced access to count with an access to mask</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>28</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to field missingEntries is replaced by access to local previous</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>398</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>34</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to field size is replaced by access to local index</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>398</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>37</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to field size is replaced by access to local index</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>399</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>42</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to field count is replaced by access to local index</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='15'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>399</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>45</index><block>61</block><killingTests/><suspValue>0.2581988897471611</suspValue><description>access to field count is replaced by access to local index</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testAdd(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testMultiply(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemove2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>14ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemove(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>19ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMapFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testMultiply2(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testScalarAdd(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testPremultiply(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testContainsKey(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>22ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testPlusMinus(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testTranspose(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>97ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>394</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>5</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>12</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>396</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>19</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>26</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>400</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>48</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local previous is replaced by access to field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>394</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>5</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>12</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>396</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>19</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>26</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>394</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>5</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>12</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>396</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>19</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>26</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>394</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>5</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>12</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>396</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>19</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>26</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>394</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>5</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>12</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>396</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>19</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>26</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>394</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to keys is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>11</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to states is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>396</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>18</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>25</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>28</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to missingEntries is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>398</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>34</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to size is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>399</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>42</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to count is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>25</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded returning local previous</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>28</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to missingEntries is guarded returning local previous</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>398</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>34</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to size is guarded returning local previous</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>399</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>42</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to count is guarded returning local previous</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>394</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to keys is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>395</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>11</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to states is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>396</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>18</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>25</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to values is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>397</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>28</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to missingEntries is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>398</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>34</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to size is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>399</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>42</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the access to count is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>394</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>6</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>395</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>13</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Substituted 2 with 3</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>398</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>35</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='15'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>399</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>43</index><block>61</block><killingTests/><suspValue>0.2581988897471611</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testAdd(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testMultiply(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemove2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>18ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemove(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>26ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMapFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testMultiply2(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testScalarAdd(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testPremultiply(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testContainsKey(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>23ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testPlusMinus(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testTranspose(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>141ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>398</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>36</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>399</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>44</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>400</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>49</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/util/OpenIntToDoubleHashMap::doRemove</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>400</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>49</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/util/OpenIntToDoubleHashMap::doRemove</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>398</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>37</index><block>61</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Removed assignment to member variable size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='15'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>doRemove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>399</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>45</index><block>61</block><killingTests/><suspValue>0.2581988897471611</suspValue><description>Removed assignment to member variable count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testAdd(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testMultiply(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemove2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>15ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemove(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>19ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMapFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testMultiply2(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testScalarAdd(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testPremultiply(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testContainsKey(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>20ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testPlusMinus(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealMatrixTest.testTranspose(org.apache.commons.math.linear.SparseRealMatrixTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>94ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to keys is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>6</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to states is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>9</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to mask is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>9</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to mask is guarded using local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to keys is guarded using field keys</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>6</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to states is guarded using field states</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>9</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to mask is guarded using field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>9</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap.mask is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::size()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>9</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced access to mask with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>9</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced access to mask with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>9</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to field mask is replaced by access to local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>7</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>7</index><block>27</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>7</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>7</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>7</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to keys is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>6</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to states is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>9</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to mask is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>4</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to keys is guarded returning local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>6</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to states is guarded returning local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>9</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to mask is guarded returning local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to keys is guarded returning field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>6</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to states is guarded returning field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>9</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to mask is guarded returning field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>10</index><block>27</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced call to org/apache/commons/math/util/OpenIntToDoubleHashMap::findInsertionIndex with argument</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>27</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::findInsertionIndex</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>38ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>11</index><block>27</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced int return with 0 for org/apache/commons/math/util/OpenIntToDoubleHashMap::findInsertionIndex</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>259</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><block>27</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>28</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local key is replaced by local mask to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>273</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>8</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local hash is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>273</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>9</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local mask is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local index is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>275</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>20</index><block>29</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local index is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>273</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>8</index><block>28</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local hash is replaced by local mask to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>9ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>273</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>9</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local mask is replaced by local hash to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local index is replaced by local mask to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>275</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>20</index><block>29</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local index is replaced by local mask to be used</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local index is replaced by local hash to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>275</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>20</index><block>29</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local index is replaced by local hash to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>28</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>273</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>8</index><block>28</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local hash is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>273</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>9</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local mask is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>275</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>20</index><block>29</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>28</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>273</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>8</index><block>28</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local hash is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>273</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>9</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local mask is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>275</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>20</index><block>29</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>28</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>273</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>8</index><block>28</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local hash is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>273</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>9</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local mask is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>275</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>20</index><block>29</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>28</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced call to hashOf with a call to computeCapacity</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>4</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced call to hashOf with a call to nextPowerOfTwo</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>4</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced call to hashOf with a call to perturb</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>272</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>4</index><block>28</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced call to hashOf with a call to changeIndexSign</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>4</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced call to org/apache/commons/math/util/OpenIntToDoubleHashMap::hashOf with argument</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>273</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>274</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::hashOf</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>275</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>21</index><block>29</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced int return with 0 for org/apache/commons/math/util/OpenIntToDoubleHashMap::findInsertionIndex</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>274</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>274</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>findInsertionIndex</mutatedMethod><methodDescription>([I[BII)I</methodDescription><lineNumber>275</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><block>29</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>56ms</time></test></testsExecutionTime><patchExecutionTime>65ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>the access to mask is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>186</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>30</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>the access to states is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>187</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>37</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>the access to missingEntries is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>the access to mask is guarded using local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>the access to mask is guarded using field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>186</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>30</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>the access to states is guarded using field states</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>187</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>37</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>the access to missingEntries is guarded using field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap.mask is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::size()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>replaced access to mask with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>replaced access to mask with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to field mask is replaced by access to local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to field mask is replaced by access to local hash</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>local hash is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>local key is replaced by local hash to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>local index is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>186</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>31</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>local index is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>local key is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>local index is replaced by local hash to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>186</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>31</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>local index is replaced by local hash to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local key is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local hash is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local key is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>186</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>31</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local key is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local hash is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local key is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>186</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>31</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local key is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local hash is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local key is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>186</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>31</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local key is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local hash is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local key is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local index is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>186</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>31</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>access to local index is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local key is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local hash is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local key is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>access to local index is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>186</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>31</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>access to local index is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>replaced call to hashOf with a call to computeCapacity</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>replaced call to hashOf with a call to nextPowerOfTwo</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>replaced call to hashOf with a call to perturb</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>replaced call to hashOf with a call to changeIndexSign</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::containsKey(II)Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>the access to mask is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>186</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>30</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>the access to states is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>187</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>37</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>the access to missingEntries is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>the access to mask is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>186</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>30</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>the access to states is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>187</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>37</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>the access to missingEntries is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>the call to containsKey(II)Z is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>the call to containsKey(II)Z is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>replaced call to org/apache/commons/math/util/OpenIntToDoubleHashMap::hashOf with argument</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::hashOf</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::containsKey</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>38</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/util/OpenIntToDoubleHashMap::get</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>19</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>33</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>19</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.14285714285714285</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>33</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.17407765595569785</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>38</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/util/OpenIntToDoubleHashMap::get</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>15</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>local h is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>16</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>local h is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>20</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>local h is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>478</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local key is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>478</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local key is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>478</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>7</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local key is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>15</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local h is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>16</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local h is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>20</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local h is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>478</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local key is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>478</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local key is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>478</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>7</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local key is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>15</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local h is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>16</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local h is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>20</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local h is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>478</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local key is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>478</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>4</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local key is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>478</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>7</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local key is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>15</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local h is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>16</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local h is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>20</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local h is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>478</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>5</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Substituted 20 with 21</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>478</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Substituted 12 with 13</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>17</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Substituted 7 with 8</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>21</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Substituted 4 with 5</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>478</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>478</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>9</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>478</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>478</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>18</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>19</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>24</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced int return with 0 for org/apache/commons/math/util/OpenIntToDoubleHashMap::hashOf</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>hashOf</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>24</index><block>69</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>iterator</mutatedMethod><methodDescription>()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator;</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>7</index><block>26</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>iterator</mutatedMethod><methodDescription>()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator;</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>8</index><block>26</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced return value with null for org/apache/commons/math/util/OpenIntToDoubleHashMap::iterator</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>iterator</mutatedMethod><methodDescription>()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator;</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><block>26</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>mutated return of Object value for org/apache/commons/math/util/OpenIntToDoubleHashMap::iterator to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>411</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>10</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to missingEntries is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>39</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to keys is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>419</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>46</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to states is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>420</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>53</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to values is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>65</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to size is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>82</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to count is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>411</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>10</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to missingEntries is guarded using local value</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>65</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to size is guarded using local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>82</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to count is guarded using local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>411</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>10</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to missingEntries is guarded using field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>39</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to keys is guarded using field keys</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>419</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>46</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to states is guarded using field states</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>420</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>53</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to values is guarded using field values</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>65</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to size is guarded using field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>82</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to count is guarded using field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>65</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap.size is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::size()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>82</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap.count is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::size()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>65</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced access to size with an access to mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>68</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced access to size with an access to mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>82</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced access to count with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>85</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced access to count with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>65</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced access to size with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>68</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced access to size with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>82</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced access to count with an access to mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>85</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced access to count with an access to mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>411</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>10</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to field missingEntries is replaced by access to local value</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>65</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to field size is replaced by access to local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>68</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to field size is replaced by access to local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>82</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to field count is replaced by access to local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>85</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to field count is replaced by access to local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>65</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to field size is replaced by access to local index</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>68</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to field size is replaced by access to local index</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>82</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to field count is replaced by access to local index</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>85</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to field count is replaced by access to local index</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>413</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>18</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local index is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local index is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>41</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local key is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>419</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>47</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local index is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>420</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>54</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local index is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>420</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>55</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local value is replaced by local previous to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>428</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>88</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>local previous is replaced by local value to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>413</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>18</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>40</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>41</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>419</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>47</index><block>63</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>420</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>54</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>420</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>55</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local value is replaced by access to field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>428</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>88</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local previous is replaced by access to field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>62</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>413</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>18</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>40</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>41</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>419</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>47</index><block>63</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>420</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>54</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>4</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>413</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>18</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>40</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>41</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>419</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>47</index><block>63</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>420</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>54</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>4</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>413</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>18</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>40</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>41</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>419</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>47</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>420</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>54</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>4</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>413</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>18</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>40</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>29ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>41</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local key is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>419</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>47</index><block>63</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>27ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>420</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>54</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>access to local index is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>5</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::findInsertionIndex(I)I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>423</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>72</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::shouldGrowTable()Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>411</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>10</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to missingEntries is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>52ms</time></test></testsExecutionTime><patchExecutionTime>58ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>39</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to keys is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>419</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>46</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to states is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>420</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>53</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to values is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>65</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to size is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>82</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to count is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>411</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>10</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to missingEntries is guarded returning local value</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>39</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to keys is guarded returning local value</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>419</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>46</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to states is guarded returning local value</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>420</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>53</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to values is guarded returning local value</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>65</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to size is guarded returning local value</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>82</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to count is guarded returning local value</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>411</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>10</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to missingEntries is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>418</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>39</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to keys is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>419</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>46</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to states is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>420</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>53</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to values is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>65</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to size is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>82</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to count is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the call to findInsertionIndex(I)I is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>423</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>72</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the call to shouldGrowTable()Z is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>5</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the call to findInsertionIndex(I)I is guarded returning local value</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>423</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>72</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the call to shouldGrowTable()Z is guarded returning local value</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>423</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>72</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the call to shouldGrowTable()Z is guarded returning local previous</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>5</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the call to findInsertionIndex(I)I is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>423</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>72</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the call to shouldGrowTable()Z is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>5</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced call to org/apache/commons/math/util/OpenIntToDoubleHashMap::findInsertionIndex with argument</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>413</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>19</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>412</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>419</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>48</index><block>63</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>66</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>83</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>67</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>84</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>413</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>421</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>423</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>73</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>62</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::findInsertionIndex</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>423</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>72</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::shouldGrowTable</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>89</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/util/OpenIntToDoubleHashMap::put</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>421</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>60</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>423</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>73</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>421</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>60</index><block>63</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>423</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>73</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>413</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>19</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>413</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>19</index><block>62</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>89</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/util/OpenIntToDoubleHashMap::put</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>68</index><block>64</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>Removed assignment to member variable size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>put</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>426</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>85</index><block>65</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>Removed assignment to member variable count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>18</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>18</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>18</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>18</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>18</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>18</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to containsKey(II)Z with a call to containsKey(I)Z</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>10</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to mask is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>10</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to mask is guarded using local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>10</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to mask is guarded using field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>10</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap.mask is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::size()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>10</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced access to mask with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>10</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced access to mask with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>10</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to field mask is replaced by access to local key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>10</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to field mask is replaced by access to local hash</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>8</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>local hash is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>16</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>local key is replaced by local hash to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>17</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>local index is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>357</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>23</index><block>48</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local index is replaced by local key to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>16</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>local key is replaced by local index to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>17</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>local index is replaced by local hash to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>357</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>23</index><block>48</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local index is replaced by local hash to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>354</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local key is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>8</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local hash is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>16</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local key is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>17</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>357</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>23</index><block>48</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>354</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local key is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>8</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local hash is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>16</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local key is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>17</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>357</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>23</index><block>48</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field RESIZE_MULTIPLIER</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>354</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local key is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>8</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local hash is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>16</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local key is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>17</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>357</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>23</index><block>48</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field PERTURB_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>354</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local key is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>8</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local hash is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>16</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local key is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>17</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local index is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>357</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>23</index><block>48</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>354</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local key is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>8</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local hash is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>16</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local key is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>17</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local index is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>357</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>23</index><block>48</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>access to local index is replaced by access to field mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>354</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to hashOf with a call to computeCapacity</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>357</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>24</index><block>48</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to doRemove with a call to get</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>9ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>354</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>4</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to hashOf with a call to nextPowerOfTwo</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>357</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>24</index><block>48</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to doRemove with a call to remove</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>354</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>4</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to hashOf with a call to perturb</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>354</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>4</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to hashOf with a call to changeIndexSign</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>18</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::containsKey(II)Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>357</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>24</index><block>48</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::doRemove(I)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>10</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to mask is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>10</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to mask is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>18</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to containsKey(II)Z is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>357</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>24</index><block>48</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to doRemove(I)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>18</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to containsKey(II)Z is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>357</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>24</index><block>48</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to doRemove(I)D is guarded returning field missingEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>354</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>4</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to org/apache/commons/math/util/OpenIntToDoubleHashMap::hashOf with argument</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>355</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>354</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::hashOf</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>18</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::containsKey</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>357</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>24</index><block>48</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::doRemove</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>357</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>25</index><block>48</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/util/OpenIntToDoubleHashMap::remove</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>19</index><block>47</block><killingTests>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty(org.apache.commons.math.util.OpenIntToDoubleHashMapTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>356</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>19</index><block>47</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>357</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><block>48</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/util/OpenIntToDoubleHashMap::remove</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to size is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>7</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to mask is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to size is guarded using field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>7</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to mask is guarded using field DEFAULT_EXPECTED_SIZE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap.size is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::size()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>7</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap.mask is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::size()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced access to size with an access to mask</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>7</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced access to mask with an access to size</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced access to size with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>7</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced access to mask with an access to count</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to size is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>7</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>the access to mask is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>20</index><block>68</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced boolean return with false for org/apache/commons/math/util/OpenIntToDoubleHashMap::shouldGrowTable</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>20</index><block>68</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced boolean return with true for org/apache/commons/math/util/OpenIntToDoubleHashMap::shouldGrowTable</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>14</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>11</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>Substituted 0.5 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>15</index><block>67</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>18</index><block>68</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>9</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>12</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>Replaced float multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>14</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>14</index><block>66</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap</mutatedClass><mutatedMethod>shouldGrowTable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><block>68</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.13483997249264842</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(ID)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(ID)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(ID)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(ID)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(ID)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(D)V with a call to &#60;init&#62;(ID)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>77</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>22</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.linear.OpenMapRealVector.epsilon is replaced by the call to org.apache.commons.math.linear.OpenMapRealVector::set(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to field virtualSize is replaced by access to local dimension</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='5'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>77</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>22</index><block>0</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>access to field epsilon is replaced by access to local epsilon</description><testsExecutionTime><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Removed assignment to member variable virtualSize</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Removed assignment to member variable entries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='5'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>22</index><block>0</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>Removed assignment to member variable epsilon</description><testsExecutionTime><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(ID)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(ID)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(ID)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(ID)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(ID)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V with a call to &#60;init&#62;(ID)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to epsilon is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.linear.OpenMapRealVector.epsilon is replaced by the call to org.apache.commons.math.linear.OpenMapRealVector::getSparsity()D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>25</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math.linear.OpenMapRealVector.epsilon is replaced by the call to org.apache.commons.math.linear.OpenMapRealVector::set(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>1</block><killingTests/><suspValue>0.4472135954999579</suspValue><description>local this is replaced by local v to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local this is replaced by local v to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local v is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local this is replaced by local v to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>16</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local v is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local this is replaced by local v to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>local v is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced call to getDimension with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to org.apache.commons.math.linear.OpenMapRealVector::getDimension()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>17</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to org.apache.commons.math.linear.OpenMapRealVector::getEntries()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to epsilon is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to epsilon is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>182</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to epsilon is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to getDimension()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>17</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to getEntries()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to getDimension()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>17</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to getEntries()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to getDimension()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>17</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to getEntries()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to getDimension()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>17</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to getEntries()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>69ms</time></test></testsExecutionTime><patchExecutionTime>77ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to getDimension()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>17</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the call to getEntries()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed call to org/apache/commons/math/linear/OpenMapRealVector::getDimension</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>17</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed call to org/apache/commons/math/linear/OpenMapRealVector::getEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Removed assignment to member variable virtualSize</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>19</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Removed assignment to member variable entries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/OpenMapRealVector;)V</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>25</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Removed assignment to member variable epsilon</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;(Lorg/apache/commons/math/linear/RealVector;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;(Lorg/apache/commons/math/linear/RealVector;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;(Lorg/apache/commons/math/linear/RealVector;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([Ljava/lang/Double;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([Ljava/lang/Double;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([Ljava/lang/Double;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([Ljava/lang/Double;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([D)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([Ljava/lang/Double;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([Ljava/lang/Double;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;(Lorg/apache/commons/math/linear/RealVector;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;(Lorg/apache/commons/math/linear/RealVector;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;([DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math/linear/OpenMapRealVector;)V with a call to &#60;init&#62;(Lorg/apache/commons/math/linear/RealVector;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>370</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>17</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to entries is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>370</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>17</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to entries is guarded using field entries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>370</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>17</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to field org.apache.commons.math.linear.OpenMapRealVector.entries is replaced by the call to org.apache.commons.math.linear.OpenMapRealVector::getEntries()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>370</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>16</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>local res is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>31</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>local res is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>368</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to the local this is replaced a call this.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>368</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>4</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to the local v is replaced a call v.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>11</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to the local this is replaced a call this.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>370</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>16</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to the local res is replaced a call res.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>31</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to the local res is replaced a call res.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>36</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to the local v is replaced a call v.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>368</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>5</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to org.apache.commons.math.linear.RealVector::getDimension()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>370</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>18</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::iterator()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>371</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>23</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator::hasNext()Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>33</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator::key()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>35</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator::value()D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>38</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator::key()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>39</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to org.apache.commons.math.linear.RealVector::getEntry(I)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>370</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>17</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to entries is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>370</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>17</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the access to entries is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>368</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to getDimension()I is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>368</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to checkVectorDimensions(I)V is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>370</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>18</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to iterator()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>371</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>23</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to hasNext()Z is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>372</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>28</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to advance()V is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>33</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to key()I is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>35</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to value()D is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>38</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to key()I is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>39</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to getEntry(I)D is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>41</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to setEntry(ID)V is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>368</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>5</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to getDimension()I is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>368</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to checkVectorDimensions(I)V is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>370</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>18</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to iterator()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator; is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>371</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>23</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to hasNext()Z is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>372</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>28</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to advance()V is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>33</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to key()I is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>35</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to value()D is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>38</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to key()I is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>39</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to getEntry(I)D is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>41</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to setEntry(ID)V is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>370</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>18</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to iterator()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator; is guarded returning local res</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>371</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>23</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to hasNext()Z is guarded returning local res</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>372</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>28</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to advance()V is guarded returning local res</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>33</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to key()I is guarded returning local res</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>35</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to value()D is guarded returning local res</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>38</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to key()I is guarded returning local res</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>39</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to getEntry(I)D is guarded returning local res</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>41</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to setEntry(ID)V is guarded returning local res</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>368</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to org.apache.commons.math.linear.OpenMapRealVector::checkVectorDimensions(I)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>372</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>28</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator::advance()V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>41</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to org.apache.commons.math.linear.OpenMapRealVector::setEntry(ID)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>369</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>12</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to org/apache/commons/math/linear/OpenMapRealVector::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>40</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>371</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>368</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to org/apache/commons/math/linear/RealVector::getDimension</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>113ms</time></test></testsExecutionTime><patchExecutionTime>185ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>370</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>18</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::iterator</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>371</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>23</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator::hasNext</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>33</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator::key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>38ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>35</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator::value</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>38</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator::key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>39</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to org/apache/commons/math/linear/RealVector::getEntry</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>371</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>24</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>371</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>24</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>368</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to org/apache/commons/math/linear/OpenMapRealVector::checkVectorDimensions</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>372</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator::advance</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>ebeMultiply</mutatedMethod><methodDescription>(Lorg/apache/commons/math/linear/RealVector;)Lorg/apache/commons/math/linear/OpenMapRealVector;</methodDescription><lineNumber>373</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to org/apache/commons/math/linear/OpenMapRealVector::setEntry</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>the access to virtualSize is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>the access to virtualSize is guarded using field virtualSize</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>the access to field org.apache.commons.math.linear.OpenMapRealVector.virtualSize is replaced by the call to org.apache.commons.math.linear.OpenMapRealVector::getDimension()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>the access to field org.apache.commons.math.linear.OpenMapRealVector.virtualSize is replaced by the call to org.apache.commons.math.linear.OpenMapRealVector::hashCode()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>the access to the local this is replaced a call this.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>the access to virtualSize is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>422</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>the access to virtualSize is guarded returning field virtualSize</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>replaced int return with 0 for org/apache/commons/math/linear/OpenMapRealVector::getDimension</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getDimension</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntries</mutatedMethod><methodDescription>()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;</methodDescription><lineNumber>208</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to entries is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntries</mutatedMethod><methodDescription>()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;</methodDescription><lineNumber>208</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to entries is guarded using field entries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntries</mutatedMethod><methodDescription>()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;</methodDescription><lineNumber>208</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to field org.apache.commons.math.linear.OpenMapRealVector.entries is replaced by the call to org.apache.commons.math.linear.OpenMapRealVector::getEntries()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntries</mutatedMethod><methodDescription>()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;</methodDescription><lineNumber>208</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to the local this is replaced a call this.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>72ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntries</mutatedMethod><methodDescription>()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;</methodDescription><lineNumber>208</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to entries is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntries</mutatedMethod><methodDescription>()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;</methodDescription><lineNumber>208</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to entries is guarded returning field entries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntries</mutatedMethod><methodDescription>()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced return value with null for org/apache/commons/math/linear/OpenMapRealVector::getEntries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntries</mutatedMethod><methodDescription>()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>mutated return of Object value for org/apache/commons/math/linear/OpenMapRealVector::getEntries to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>480</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>9</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to entries is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>480</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>9</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to entries is guarded using field entries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>480</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>9</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to field org.apache.commons.math.linear.OpenMapRealVector.entries is replaced by the call to org.apache.commons.math.linear.OpenMapRealVector::getEntries()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>access to local index is replaced by access to field virtualSize</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>480</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>10</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>access to local index is replaced by access to field virtualSize</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to the local this is replaced a call this.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>480</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>8</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to the local this is replaced a call this.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>77ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>480</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>11</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>replaced call to get with a call to remove</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>480</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>11</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::get(I)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>480</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>9</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to entries is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>480</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>9</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to entries is guarded returning field DEFAULT_ZERO_TOLERANCE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>24ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to checkIndex(I)V is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>480</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>11</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to get(I)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to checkIndex(I)V is guarded returning field DEFAULT_ZERO_TOLERANCE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>480</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>11</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to get(I)D is guarded returning field DEFAULT_ZERO_TOLERANCE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to checkIndex(I)V is guarded returning field epsilon</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>480</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>11</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to get(I)D is guarded returning field epsilon</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>479</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the call to org.apache.commons.math.linear.OpenMapRealVector::checkIndex(I)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>480</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>11</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::get</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>480</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>12</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/linear/OpenMapRealVector::getEntry</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>480</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/linear/OpenMapRealVector::getEntry</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>getEntry</mutatedMethod><methodDescription>(I)D</methodDescription><lineNumber>479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>removed call to org/apache/commons/math/linear/OpenMapRealVector::checkIndex</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>6</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>the access to epsilon is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>6</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>the access to epsilon is guarded using local value</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>6</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>the access to epsilon is guarded using field DEFAULT_ZERO_TOLERANCE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>6</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>the access to field org.apache.commons.math.linear.OpenMapRealVector.epsilon is replaced by the call to org.apache.commons.math.linear.OpenMapRealVector::getSparsity()D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='12'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>6</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>access to field epsilon is replaced by access to local value</description><testsExecutionTime><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfPreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>15ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>17ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>17ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombinePreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>122ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='12'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>access to local value is replaced by access to field DEFAULT_ZERO_TOLERANCE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfPreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombinePreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>65ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='12'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>access to local value is replaced by access to field epsilon</description><testsExecutionTime><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfPreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombinePreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>61ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>the access to the local this is replaced a call this.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>replaced call to abs with a call to sqrt</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='12'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>replaced call to abs with a call to cosh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfPreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>34ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombinePreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>75ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>replaced call to abs with a call to sinh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>replaced call to abs with a call to tanh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='9'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>replaced call to abs with a call to acosh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfPreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombinePreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>replaced call to abs with a call to asinh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>replaced call to abs with a call to atanh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>replaced call to abs with a call to signum</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>replaced call to abs with a call to nextUp</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='12'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>replaced call to abs with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfPreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombinePreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>6</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>the access to epsilon is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>replaced call to org/apache/commons/math/util/FastMath::abs with argument</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='12'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>14</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>replaced boolean return with false for org/apache/commons/math/linear/OpenMapRealVector::isDefaultValue</description><testsExecutionTime><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfPreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombinePreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>65ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>14</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>replaced boolean return with true for org/apache/commons/math/linear/OpenMapRealVector::isDefaultValue</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='12'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>4</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfPreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombinePreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>58ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>98ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>12</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>removed call to org/apache/commons/math/util/FastMath::abs</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='12'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>8</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfPreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>84ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombinePreconditionMixedType(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>153ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>8</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>isDefaultValue</mutatedMethod><methodDescription>(D)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.2773500981126146</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConstructors(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>15</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to entries is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>24</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to entries is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>667</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>31</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to entries is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>15</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to entries is guarded using field entries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>24</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to entries is guarded using field entries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>667</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>31</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to entries is guarded using field entries</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>15</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to field org.apache.commons.math.linear.OpenMapRealVector.entries is replaced by the call to org.apache.commons.math.linear.OpenMapRealVector::getEntries()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>24</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to field org.apache.commons.math.linear.OpenMapRealVector.entries is replaced by the call to org.apache.commons.math.linear.OpenMapRealVector::getEntries()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>667</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>31</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to field org.apache.commons.math.linear.OpenMapRealVector.entries is replaced by the call to org.apache.commons.math.linear.OpenMapRealVector::getEntries()Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>663</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>access to local index is replaced by access to field virtualSize</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>664</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>9</index><block>11</block><killingTests/><suspValue>0.3779644730092272</suspValue><description>access to local value is replaced by access to field DEFAULT_ZERO_TOLERANCE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMapFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>16</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>access to local index is replaced by access to field virtualSize</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>17</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>access to local value is replaced by access to field DEFAULT_ZERO_TOLERANCE</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>25</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local index is replaced by access to field virtualSize</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>667</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>32</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local index is replaced by access to field virtualSize</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>664</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>9</index><block>11</block><killingTests/><suspValue>0.3779644730092272</suspValue><description>access to local value is replaced by access to field epsilon</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMapFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>17</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>access to local value is replaced by access to field epsilon</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>663</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to the local this is replaced a call this.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>664</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>8</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to the local this is replaced a call this.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>14</index><block>12</block><killingTests>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to the local this is replaced a call this.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>23</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to the local this is replaced a call this.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>667</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>30</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to the local this is replaced a call this.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>667</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>33</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to remove with a call to get</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>664</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to org.apache.commons.math.linear.OpenMapRealVector::isDefaultValue(D)Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>18</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::put(ID)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>26</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::containsKey(I)Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>667</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>33</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap::remove(I)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>15</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to entries is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>24</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to entries is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>667</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>31</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to entries is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>15</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to entries is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>24</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to entries is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>667</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>31</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to entries is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>15</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to entries is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>24</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to entries is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>667</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>31</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the access to entries is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>663</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to checkIndex(I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>664</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to isDefaultValue(D)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>18</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to put(ID)D is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>26</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to containsKey(I)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>667</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>33</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to remove(I)D is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>663</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>5</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to checkIndex(I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>664</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to isDefaultValue(D)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>18</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to put(ID)D is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>26</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to containsKey(I)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>667</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>33</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to remove(I)D is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>663</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>5</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to checkIndex(I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>664</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to isDefaultValue(D)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>18</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to put(ID)D is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>26</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to containsKey(I)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>667</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>33</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to remove(I)D is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>663</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>5</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to checkIndex(I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>664</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to isDefaultValue(D)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>18</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to put(ID)D is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>26</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to containsKey(I)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>667</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>33</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to remove(I)D is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>663</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>5</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to checkIndex(I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>664</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to isDefaultValue(D)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>18</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to put(ID)D is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>26</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to containsKey(I)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>667</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>33</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to remove(I)D is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>663</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>5</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to org.apache.commons.math.linear.OpenMapRealVector::checkIndex(I)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>18</index><block>12</block><killingTests>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced call to org/apache/commons/math/util/OpenIntToDoubleHashMap::put with argument</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>664</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><block>11</block><killingTests>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>664</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>11</block><killingTests/><suspValue>0.3779644730092272</suspValue><description>removed call to org/apache/commons/math/linear/OpenMapRealVector::isDefaultValue</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMapFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>11ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>665</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>18</index><block>12</block><killingTests>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::put</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>26</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::containsKey</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>667</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>33</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::remove</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>664</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>11</index><block>11</block><killingTests>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>27</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>664</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>11</index><block>11</block><killingTests/><suspValue>0.3779644730092272</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testPredicates(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineToSelfMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMapFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.ArrayRealVectorTest.testCombineMixedTypes(org.apache.commons.math.linear.ArrayRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testDataInOut(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>666</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>27</index><block>13</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenMapRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.OpenMapRealVector</mutatedClass><mutatedMethod>setEntry</mutatedMethod><methodDescription>(ID)V</methodDescription><lineNumber>663</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed call to org/apache/commons/math/linear/OpenMapRealVector::checkIndex</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>509</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.CatchTypeWideningMutator_0</mutator><index>26</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>catch type java/util/NoSuchElementException is replaced with java/lang/RuntimeException</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>501</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced access to referenceCount with an access to current</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>504</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>18</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced access to next with an access to current</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>20ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>19ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>12ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>118ms</time></test></testsExecutionTime><patchExecutionTime>251ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>501</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced access to referenceCount with an access to next</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>506</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>22</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the call to advance()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>506</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>22</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the call to advance()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>506</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>22</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the call to advance()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>506</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>22</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the call to advance()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>506</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>22</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the call to advance()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>506</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>22</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the call to org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator::advance()V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>504</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>Substituted -1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>501</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>12</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::access$100</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>506</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator::advance</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>17ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>18ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>59ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>498</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>Removed assignment to member variable this$0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>501</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>Removed assignment to member variable referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/util/OpenIntToDoubleHashMap;)V</methodDescription><lineNumber>504</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>18</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>Removed assignment to member variable next</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>564</lineNumber><mutator>MethodNameMutator_0</mutator><index>14</index><block>16</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method org.apache.commons.math.MathRuntimeException.createConcurrentModificationException(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)Ljava/util/ConcurrentModificationException; is replaced by an instantiation of type java.util.ConcurrentModificationException using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>564</lineNumber><mutator>MethodNameMutator_4</mutator><index>14</index><block>16</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method org.apache.commons.math.MathRuntimeException.createConcurrentModificationException(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)Ljava/util/ConcurrentModificationException; is replaced by an instantiation of type java.util.ConcurrentModificationException using (Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>580</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.CatchTypeWideningMutator_0</mutator><index>41</index><block>20</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>catch type java/lang/ArrayIndexOutOfBoundsException is replaced with java/lang/IndexOutOfBoundsException</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to referenceCount is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>6</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to this$0 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>568</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>20</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to next is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>25</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to this$0 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>29</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to next is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to referenceCount is guarded using field referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>6</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to this$0 is guarded using field this$0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>568</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>20</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to next is guarded using field referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>25</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to this$0 is guarded using field this$0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>29</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to next is guarded using field referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.referenceCount is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator::key()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>568</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>20</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.next is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator::key()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>29</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.next is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator::key()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced access to referenceCount with an access to current</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>564</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to MAP_MODIFIED_WHILE_ITERATING with an access to ARGUMENT_OUTSIDE_DOMAIN</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>568</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>20</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced access to next with an access to referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>568</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>21</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced access to current with an access to next</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>29</index><block>17</block><killingTests/><suspValue>0.23570226039551587</suspValue><description>replaced access to next with an access to referenceCount</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>33</index><block>17</block><killingTests/><suspValue>0.23570226039551587</suspValue><description>replaced access to next with an access to current</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced access to referenceCount with an access to next</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>59ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>564</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to MAP_MODIFIED_WHILE_ITERATING with an access to ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>568</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>20</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced access to next with an access to current</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>29</index><block>17</block><killingTests/><suspValue>0.23570226039551587</suspValue><description>replaced access to next with an access to current</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>564</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to MAP_MODIFIED_WHILE_ITERATING with an access to ARRAY_SUMS_TO_ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>564</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to MAP_MODIFIED_WHILE_ITERATING with an access to ASSYMETRIC_EIGEN_NOT_SUPPORTED</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>564</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to MAP_MODIFIED_WHILE_ITERATING with an access to AT_LEAST_ONE_COLUMN</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>564</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to MAP_MODIFIED_WHILE_ITERATING with an access to AT_LEAST_ONE_ROW</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to referenceCount is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>6</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to this$0 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>568</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>20</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to next is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>25</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to this$0 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>29</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to next is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to referenceCount is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>6</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to this$0 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>568</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>20</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to next is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>25</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to this$0 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>29</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to next is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to referenceCount is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>6</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to this$0 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>568</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>20</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to next is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>25</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to this$0 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>29</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>the access to next is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>564</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>12</index><block>16</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>30</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>35</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::access$100</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>564</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>14</index><block>16</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to org/apache/commons/math/MathRuntimeException::createConcurrentModificationException</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>26</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::access$400</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>108ms</time></test></testsExecutionTime><patchExecutionTime>166ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>8</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>36</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>563</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>8</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>36</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>18ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>19ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>63ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>568</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>21</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>Removed assignment to member variable current</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>advance</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>572</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>33</index><block>17</block><killingTests/><suspValue>0.23570226039551587</suspValue><description>Removed assignment to member variable next</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>518</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to next is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>518</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to next is guarded using field referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>518</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.next is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator::key()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>518</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>replaced access to next with an access to referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>130ms</time></test></testsExecutionTime><patchExecutionTime>207ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>518</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>replaced access to next with an access to current</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>73ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>518</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to next is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>518</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>replaced boolean return with false for org/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator::hasNext</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>18ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>19ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>59ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>518</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>replaced boolean return with true for org/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator::hasNext</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>518</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>50ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>67ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>518</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>6</index><block>3</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>518</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>4</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>518</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>518</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>518</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>518</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testOuterProduct(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testSerial(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testMisc(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to referenceCount is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>6</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to this$0 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>532</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>19</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to current is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>31</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to this$0 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>34</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to current is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to referenceCount is guarded using field referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>6</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to this$0 is guarded using field this$0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>532</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>19</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to current is guarded using field referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>31</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to this$0 is guarded using field this$0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>34</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to current is guarded using field referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>66ms</time></test></testsExecutionTime><patchExecutionTime>76ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.referenceCount is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator::key()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>532</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>19</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.current is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator::key()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>34</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.current is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator::key()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>14ms</time></test></testsExecutionTime><patchExecutionTime>68ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>replaced access to referenceCount with an access to current</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>532</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>19</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>replaced access to current with an access to referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>34</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>replaced access to current with an access to referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>replaced access to referenceCount with an access to next</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>532</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>19</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>replaced access to current with an access to next</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>34</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>replaced access to current with an access to next</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to referenceCount is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>6</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to this$0 is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>532</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>19</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to current is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>31</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to this$0 is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>34</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to current is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to referenceCount is guarded returning field referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>6</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to this$0 is guarded returning field referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>532</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>19</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to current is guarded returning field referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>31</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to this$0 is guarded returning field referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>34</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>the access to current is guarded returning field referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>532</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>20</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>532</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::access$100</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>535</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>32</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::access$200</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>535</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>36</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>replaced int return with 0 for org/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator::key</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>532</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>20</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>532</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>20</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>key</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>535</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>36</index><block>9</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.25</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>546</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to referenceCount is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>126ms</time></test></testsExecutionTime><patchExecutionTime>193ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>546</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>6</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to this$0 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>19</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to current is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>31</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to this$0 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>34</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to current is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>546</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to referenceCount is guarded using field referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>546</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>6</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to this$0 is guarded using field this$0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>19</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to current is guarded using field referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>31</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to this$0 is guarded using field this$0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>34</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to current is guarded using field referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>546</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.referenceCount is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator::key()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>19</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.current is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator::key()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>34</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to field org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.current is replaced by the call to org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator::key()I</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>546</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>replaced access to referenceCount with an access to current</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>19</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>replaced access to current with an access to referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>34</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>replaced access to current with an access to referenceCount</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>546</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>replaced access to referenceCount with an access to next</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>19</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>replaced access to current with an access to next</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>34</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>replaced access to current with an access to next</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>546</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to referenceCount is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>546</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>6</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to this$0 is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>19</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to current is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>31</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to this$0 is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>34</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the access to current is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>549</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>20</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>546</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>549</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>127ms</time></test></testsExecutionTime><patchExecutionTime>191ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>546</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::access$100</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>552</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>32</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>removed call to org/apache/commons/math/util/OpenIntToDoubleHashMap::access$300</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>552</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>36</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator::value</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>546</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>8</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>546</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>8</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>549</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>20</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>549</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>20</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>OpenIntToDoubleHashMap.java</sourceFile><mutatedClass>org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>552</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>36</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/util/OpenIntToDoubleHashMap$Iterator::value</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>18</index><block>4</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>18</index><block>4</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>20ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>18</index><block>4</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>18</index><block>4</block><killingTests>org.apache.commons.math.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math.util.FastMathTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math.util.FastMathTest)</name><time>28ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>52ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>18</index><block>4</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>access to local x is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>12</index><block>2</block><killingTests>org.apache.commons.math.geometry.euclidean.threed.Vector3DTest.testNorm1(org.apache.commons.math.geometry.euclidean.threed.Vector3DTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.geometry.euclidean.threed.Vector3DTest.testNorm1(org.apache.commons.math.geometry.euclidean.threed.Vector3DTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.geometry.euclidean.threed.Vector3DTest.testDistance1(org.apache.commons.math.geometry.euclidean.threed.Vector3DTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.geometry.euclidean.threed.Vector3DTest.testDistanceInf(org.apache.commons.math.geometry.euclidean.threed.Vector3DTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.FastMathTest.testHyperbolic(org.apache.commons.math.util.FastMathTest)</name><time>87ms</time></test><test><name>org.apache.commons.math.geometry.euclidean.threed.Vector3DTest.testCoordinates(org.apache.commons.math.geometry.euclidean.threed.Vector3DTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math.util.FastMathTest)</name><time>46ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>154ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.math.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math.util.FastMathTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math.util.FastMathTest)</name><time>22ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>48ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>removed negation</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.geometry.euclidean.threed.Vector3DTest.testDistance1(org.apache.commons.math.geometry.euclidean.threed.Vector3DTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.geometry.euclidean.threed.Vector3DTest.testDistance1(org.apache.commons.math.geometry.euclidean.threed.Vector3DTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math.util.FastMathTest)</name><time>60ms</time></test><test><name>org.apache.commons.math.util.FastMathTest.testHyperbolic(org.apache.commons.math.util.FastMathTest)</name><time>78ms</time></test><test><name>org.apache.commons.math.geometry.euclidean.threed.Vector3DTest.testCoordinates(org.apache.commons.math.geometry.euclidean.threed.Vector3DTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>166ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.math.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math.util.FastMathTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math.util.FastMathTest)</name><time>25ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>20</index><block>4</block><killingTests>org.apache.commons.math.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math.util.FastMathTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/util/FastMath::abs</description><testsExecutionTime><test><name>org.apache.commons.math.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math.util.FastMathTest)</name><time>19ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>52ms</time></test></testsExecutionTime><patchExecutionTime>106ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.math.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math.util.FastMathTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math.util.FastMathTest)</name><time>275ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>301ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.geometry.euclidean.threed.Vector3DTest.testDistance1(org.apache.commons.math.geometry.euclidean.threed.Vector3DTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.geometry.euclidean.threed.Vector3DTest.testDistance1(org.apache.commons.math.geometry.euclidean.threed.Vector3DTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math.util.FastMathTest)</name><time>59ms</time></test><test><name>org.apache.commons.math.util.FastMathTest.testHyperbolic(org.apache.commons.math.util.FastMathTest)</name><time>67ms</time></test><test><name>org.apache.commons.math.geometry.euclidean.threed.Vector3DTest.testCoordinates(org.apache.commons.math.geometry.euclidean.threed.Vector3DTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>147ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>abs</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><block>4</block><killingTests>org.apache.commons.math.geometry.euclidean.threed.Vector3DTest.testDistance1(org.apache.commons.math.geometry.euclidean.threed.Vector3DTest)</killingTests><suspValue>0.029787773436724965</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/util/FastMath::abs</description><testsExecutionTime><test><name>org.apache.commons.math.geometry.euclidean.threed.Vector3DTest.testDistance1(org.apache.commons.math.geometry.euclidean.threed.Vector3DTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math.util.FastMathTest)</name><time>65ms</time></test><test><name>org.apache.commons.math.util.FastMathTest.testHyperbolic(org.apache.commons.math.util.FastMathTest)</name><time>75ms</time></test><test><name>org.apache.commons.math.geometry.euclidean.threed.Vector3DTest.testCoordinates(org.apache.commons.math.geometry.euclidean.threed.Vector3DTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>162ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3756</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>local y is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3756</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>19</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>local x is replaced by local y to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3757</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>24</index><block>18</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>local y is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3751</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3751</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>13</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3756</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local y is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3756</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>19</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3757</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>24</index><block>18</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>access to local y is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3751</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3751</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>13</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3756</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local y is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3756</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>19</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3757</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>24</index><block>18</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>access to local y is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3751</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3751</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>13</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3756</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local y is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3756</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>19</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3757</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>24</index><block>18</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>access to local y is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3751</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3751</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>13</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3756</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local y is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3756</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>19</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3757</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>24</index><block>18</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>access to local y is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3751</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3751</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>13</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3756</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local y is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3756</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>19</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>access to local x is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3757</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>24</index><block>18</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>access to local y is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>14</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>replaced call to floor with a call to doubleHighPart</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>14</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>replaced call to floor with a call to sqrt</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>14</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>replaced call to floor with a call to cosh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>14</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>replaced call to floor with a call to sinh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>14</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>replaced call to floor with a call to tanh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>14</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>replaced call to floor with a call to acosh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>14</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>replaced call to floor with a call to asinh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>14</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>replaced call to floor with a call to atanh</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>14</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>replaced call to floor with a call to signum</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>14</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>replaced call to floor with a call to nextUp</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>14</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>replaced call to org/apache/commons/math/util/FastMath::floor with argument</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3751</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3756</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3755</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>14</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>removed call to org/apache/commons/math/util/FastMath::floor</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3757</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>25</index><block>18</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/util/FastMath::ceil</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3751</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>6</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3756</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>21</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3751</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>6</index><block>15</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3756</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>21</index><block>17</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07432941462471664</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>ceil</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3757</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><block>18</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/util/FastMath::ceil</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>13</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3732</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>27</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>32</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>36</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local y is replaced by access to field HEX_40000000</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>38</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local x is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3737</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>49</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local y is replaced by access to field HEX_40000000</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3741</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>62</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05661385170722978</suspValue><description>access to local y is replaced by access to field HEX_40000000</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>13</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3732</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>27</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>32</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>36</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local y is replaced by access to field MASK_30BITS</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>38</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local x is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3737</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>49</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local y is replaced by access to field MASK_30BITS</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3741</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>62</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05661385170722978</suspValue><description>access to local y is replaced by access to field MASK_30BITS</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>13</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3732</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>27</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>32</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>38</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local x is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>13</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3732</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>27</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>32</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>38</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local x is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3724</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>13</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>access to local x is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3732</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>27</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local x is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>32</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local x is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>38</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>access to local x is replaced by access to field TWO_POWER_52</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>20</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>35</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>Substituted 4.503599627370496E15 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>Substituted -4.503599627370496E15 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>33</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3737</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>50</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3724</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>65ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3737</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3741</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>64</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05661385170722978</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/util/FastMath::floor</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3724</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>6</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>40</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>178ms</time></test></testsExecutionTime><patchExecutionTime>269ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3737</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>52</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3724</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>6</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>40</index><block>11</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3737</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>52</index><block>12</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>16</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>20</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>62ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>35</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>16</index><block>7</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3728</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>20</index><block>8</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05270462766947299</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3733</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>35</index><block>10</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05285164225816899</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math.util.FastMath</mutatedClass><mutatedMethod>floor</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>3741</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>64</index><block>14</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.05661385170722978</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/util/FastMath::floor</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>6</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the access to the local this is replaced a call this.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>7</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced call to getDimension with a call to getMinIndex</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>7</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced call to getDimension with a call to getMaxIndex</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>17ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>7</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to org.apache.commons.math.linear.AbstractRealVector::getDimension()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>7</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to getDimension()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>7</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to getDimension()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>7</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to getDimension()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>7</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to getDimension()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>7</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to getDimension()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>125ms</time></test></testsExecutionTime><patchExecutionTime>193ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed call to org/apache/commons/math/linear/AbstractRealVector::getDimension</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkVectorDimensions</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>local d is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkVectorDimensions</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>local n is replaced by local d to be used</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkVectorDimensions</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to the local this is replaced a call this.copy()</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkVectorDimensions</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced call to getDimension with a call to getMinIndex</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkVectorDimensions</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced call to getDimension with a call to getMaxIndex</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkVectorDimensions</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to org.apache.commons.math.linear.AbstractRealVector::getDimension()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkVectorDimensions</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to getDimension()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkVectorDimensions</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to getDimension()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkVectorDimensions</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to getDimension()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkVectorDimensions</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to getDimension()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkVectorDimensions</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to getDimension()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkVectorDimensions</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkVectorDimensions</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed call to org/apache/commons/math/linear/AbstractRealVector::getDimension</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkVectorDimensions</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractRealVector.java</sourceFile><mutatedClass>org.apache.commons.math.linear.AbstractRealVector</mutatedClass><mutatedMethod>checkVectorDimensions</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>Removed assignment to member variable val$pattern</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException$6</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>Removed assignment to member variable val$arguments</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>131ms</time></test></testsExecutionTime><patchExecutionTime>196ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException</mutatedClass><mutatedMethod>createConcurrentModificationException</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)Ljava/util/ConcurrentModificationException;</methodDescription><lineNumber>373</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed call to org/apache/commons/math/MathRuntimeException$6::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException</mutatedClass><mutatedMethod>createConcurrentModificationException</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)Ljava/util/ConcurrentModificationException;</methodDescription><lineNumber>373</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced return value with null for org/apache/commons/math/MathRuntimeException::createConcurrentModificationException</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>122ms</time></test></testsExecutionTime><patchExecutionTime>186ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathRuntimeException.java</sourceFile><mutatedClass>org.apache.commons.math.MathRuntimeException</mutatedClass><mutatedMethod>createConcurrentModificationException</mutatedMethod><methodDescription>(Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)Ljava/util/ConcurrentModificationException;</methodDescription><lineNumber>373</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>mutated return of Object value for org/apache/commons/math/MathRuntimeException::createConcurrentModificationException to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(org.apache.commons.math.linear.SparseRealVectorTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
</mutations>
