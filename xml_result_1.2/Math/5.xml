<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>the access to isNaN is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.isNaN is replaced by the call to org.apache.commons.math3.complex.Complex::isNaN()Z</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.isNaN is replaced by the call to org.apache.commons.math3.complex.Complex::isInfinite()Z</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>replaced access to isNaN with an access to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>access to field real is replaced by access to local real</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>access to field imaginary is replaced by access to local real</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>access to field real is replaced by access to local imaginary</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>access to field imaginary is replaced by access to local imaginary</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>local real is replaced by local imaginary to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>local imaginary is replaced by local real to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>18</index><block>0</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>local real is replaced by local imaginary to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>21</index><block>1</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>local imaginary is replaced by local real to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>37</index><block>4</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>local real is replaced by local imaginary to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>5</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>local imaginary is replaced by local real to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>38</index><block>4</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>replaced call to isInfinite with a call to isNaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>41</index><block>5</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>replaced call to isInfinite with a call to isNaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>the access to isNaN is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>the access to isNaN is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>the access to isNaN is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>44</index><block>6</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>47</index><block>7</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><block>4</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><block>5</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>38</index><block>4</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>removed call to java/lang/Double::isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>41</index><block>5</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>removed call to java/lang/Double::isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>39</index><block>4</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>17ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>42</index><block>5</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>39</index><block>4</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>42</index><block>5</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>Removed assignment to member variable real</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>Removed assignment to member variable imaginary</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>30</index><block>3</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>Removed assignment to member variable isNaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>49</index><block>7</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.06868028197434452</suspValue><description>Removed assignment to member variable isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>25ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>23</index><block>21</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>the access to isNaN is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>33</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to real is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>35</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to real is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>39</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to imaginary is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>41</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to imaginary is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>23</index><block>21</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>the access to isNaN is guarded using field isNaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>33</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to real is guarded using field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>35</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to real is guarded using field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>39</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to imaginary is guarded using field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>41</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to imaginary is guarded using field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>23</index><block>21</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.isNaN is replaced by the call to org.apache.commons.math3.complex.Complex::isNaN()Z</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>33</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.real is replaced by the call to org.apache.commons.math3.complex.Complex::abs()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>35</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.real is replaced by the call to org.apache.commons.math3.complex.Complex::abs()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>39</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.imaginary is replaced by the call to org.apache.commons.math3.complex.Complex::abs()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>41</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.imaginary is replaced by the call to org.apache.commons.math3.complex.Complex::abs()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>23</index><block>21</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testEqualsNaN(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.isNaN is replaced by the call to org.apache.commons.math3.complex.Complex::isInfinite()Z</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math3.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsNaN(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>33</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.real is replaced by the call to org.apache.commons.math3.complex.Complex::getImaginary()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>35</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.real is replaced by the call to org.apache.commons.math3.complex.Complex::getImaginary()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>39</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.imaginary is replaced by the call to org.apache.commons.math3.complex.Complex::getImaginary()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>41</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.imaginary is replaced by the call to org.apache.commons.math3.complex.Complex::getImaginary()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>33</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.real is replaced by the call to org.apache.commons.math3.complex.Complex::getReal()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>35</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.real is replaced by the call to org.apache.commons.math3.complex.Complex::getReal()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>39</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.imaginary is replaced by the call to org.apache.commons.math3.complex.Complex::getReal()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>41</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.imaginary is replaced by the call to org.apache.commons.math3.complex.Complex::getReal()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>33</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.real is replaced by the call to org.apache.commons.math3.complex.Complex::getArgument()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>35</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.real is replaced by the call to org.apache.commons.math3.complex.Complex::getArgument()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>39</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.imaginary is replaced by the call to org.apache.commons.math3.complex.Complex::getArgument()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>41</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.imaginary is replaced by the call to org.apache.commons.math3.complex.Complex::getArgument()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>23</index><block>21</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testEqualsNaN(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>replaced access to isNaN with an access to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math3.complex.ComplexTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsNaN(org.apache.commons.math3.complex.ComplexTest)</name><time>29ms</time></test></testsExecutionTime><patchExecutionTime>118ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>33</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced access to real with an access to imaginary</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>35</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced access to real with an access to imaginary</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>39</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced access to imaginary with an access to real</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>41</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced access to imaginary with an access to real</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='45'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>22</index><block>21</block><killingTests/><suspValue>0.14907119849998599</suspValue><description>local c is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseDifferentImaginaryChar(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.analysis.solvers.LaguerreSolverTest.testQuadraticFunction(org.apache.commons.math3.analysis.solvers.LaguerreSolverTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseSimpleWithDecimalsTrunc(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseSimpleNoDecimals(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseSimpleNoDecimals(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseZeroImaginary(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testDivideReal(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarSubtract(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseNegativeBoth(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseSimpleWithDecimals(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseNegativeImaginary(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseZeroImaginary(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalReal(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testSerial(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseNegativeImaginary(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarPow(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testMath221(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarMultiply(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarAdd(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseNegativeBoth(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalImaginary(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParsePositiveInfinity(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseNegativeReal(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsNaN(org.apache.commons.math3.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseZeroReal(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testPaseNegativeInfinity(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarDivide(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseSimpleWithDecimals(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testDivideImaginary(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseNan(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsTrue(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseZeroReal(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.analysis.solvers.LaguerreSolverTest.testQuinticFunction2(org.apache.commons.math3.analysis.solvers.LaguerreSolverTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParsePositiveInfinity(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseNan(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.analysis.solvers.LaguerreSolverTest.testQuinticFunction(org.apache.commons.math3.analysis.solvers.LaguerreSolverTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarSubtractInf(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseSimpleWithDecimalsTrunc(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseNegativeReal(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarAddInf(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseDifferentImaginaryChar(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testPaseNegativeInfinity(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>102ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>32</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>local this is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>34</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>local c is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>38</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>local this is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>local c is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>18</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>22</index><block>21</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to local c is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>32</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>34</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local c is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>38</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>40</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local c is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>18</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>22</index><block>21</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testEqualsTrue(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to local c is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsNaN(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsTrue(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>32</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>34</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local c is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>38</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>40</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local c is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='63'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>18</block><killingTests/><suspValue>0.1259881576697424</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseDifferentImaginaryChar(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarPowNaNBase(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseZeroImaginary(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseNegativeBoth(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarAddNaN(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseSimpleWithDecimals(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseNegativeImaginary(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarPow(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testMath221(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarMultiply(org.apache.commons.math3.complex.ComplexTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarAdd(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseNegativeBoth(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalImaginary(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarMultiplyInf(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarDivide(org.apache.commons.math3.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseSimpleWithDecimals(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseNan(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarPowNaNExponent(org.apache.commons.math3.complex.ComplexTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsTrue(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.analysis.solvers.LaguerreSolverTest.testQuinticFunction2(org.apache.commons.math3.analysis.solvers.LaguerreSolverTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParsePositiveInfinity(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseNan(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.analysis.solvers.LaguerreSolverTest.testQuinticFunction(org.apache.commons.math3.analysis.solvers.LaguerreSolverTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math3.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFieldTest.testZero(org.apache.commons.math3.complex.ComplexFieldTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarSubtractNaN(org.apache.commons.math3.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testDivideZero(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testPaseNegativeInfinity(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.analysis.solvers.LaguerreSolverTest.testQuadraticFunction(org.apache.commons.math3.analysis.solvers.LaguerreSolverTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseSimpleWithDecimalsTrunc(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseSimpleNoDecimals(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseSimpleNoDecimals(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsSame(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testDivideReal(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testDivideZeroZero(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarSubtract(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseZeroImaginary(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalReal(org.apache.commons.math3.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testSerial(org.apache.commons.math3.complex.ComplexTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalInf(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseNegativeImaginary(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarDivideNaN(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testDivideInf(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFieldTest.testOne(org.apache.commons.math3.complex.ComplexFieldTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParsePositiveInfinity(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseNegativeReal(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsNaN(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseZeroReal(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testPaseNegativeInfinity(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testDivideImaginary(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseZeroReal(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarSubtractInf(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsClass(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.FrenchComplexFormatTest.testParseSimpleWithDecimalsTrunc(org.apache.commons.math3.complex.FrenchComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseNegativeReal(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsNull(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarAddInf(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testScalarMultiplyNaN(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexFormatTest.testParseDifferentImaginaryChar(org.apache.commons.math3.complex.ComplexFormatTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>167ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>22</index><block>21</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to local c is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>32</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>34</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local c is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>38</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>40</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local c is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>18</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>22</index><block>21</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to local c is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>32</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>34</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local c is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>38</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>40</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local c is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>18</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>22</index><block>21</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to local c is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>32</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>34</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local c is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>38</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>40</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local c is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>340</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>18</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>22</index><block>21</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>the access to the local c is replaced a call c.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>32</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>34</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to the local c is replaced a call c.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>38</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>40</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to the local c is replaced a call c.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>23</index><block>21</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>the access to isNaN is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>33</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to real is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>35</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to real is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>39</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to imaginary is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>41</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to imaginary is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>23</index><block>21</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>the access to isNaN is guarded returning field isNaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>33</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to real is guarded returning field isNaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>35</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to real is guarded returning field isNaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>39</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to imaginary is guarded returning field isNaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>41</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to imaginary is guarded returning field isNaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>49</index><block>26</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced boolean return with false for org/apache/commons/math3/complex/Complex::equals</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>49</index><block>26</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced boolean return with true for org/apache/commons/math3/complex/Complex::equals</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math3.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>44</index><block>25</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>47</index><block>26</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>340</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>18</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testEqualsClass(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsClass(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalInf(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>343</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>20</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><block>21</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testEqualsNaN(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsNaN(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>343</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>14</index><block>20</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>24</index><block>21</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>37</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>43</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>340</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>18</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testEqualsClass(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsClass(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalInf(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>343</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>14</index><block>20</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>31ms</time></test></testsExecutionTime><patchExecutionTime>60ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>24</index><block>21</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testEqualsTrue(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsRealDifference(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsNaN(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsTrue(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>37</index><block>23</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>43</index><block>24</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>49</index><block>26</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.complex.ComplexTest.testEqualsImaginaryDifference(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>the access to isNaN is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>13</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to real is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>18</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to imaginary is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>the access to isNaN is guarded using field isNaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>13</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to real is guarded using field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>18</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to imaginary is guarded using field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.isNaN is replaced by the call to org.apache.commons.math3.complex.Complex::isNaN()Z</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>13</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.real is replaced by the call to org.apache.commons.math3.complex.Complex::abs()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>18</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.imaginary is replaced by the call to org.apache.commons.math3.complex.Complex::abs()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.isNaN is replaced by the call to org.apache.commons.math3.complex.Complex::isInfinite()Z</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>13</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.real is replaced by the call to org.apache.commons.math3.complex.Complex::getImaginary()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>18</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.imaginary is replaced by the call to org.apache.commons.math3.complex.Complex::getImaginary()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>13</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.real is replaced by the call to org.apache.commons.math3.complex.Complex::getReal()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>18</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.imaginary is replaced by the call to org.apache.commons.math3.complex.Complex::getReal()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>13</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.real is replaced by the call to org.apache.commons.math3.complex.Complex::getArgument()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>18</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.imaginary is replaced by the call to org.apache.commons.math3.complex.Complex::getArgument()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>replaced access to isNaN with an access to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>13</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced access to real with an access to imaginary</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>18</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>replaced access to imaginary with an access to real</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>305</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>24</index><block>12</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced access to NaN with an access to I</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>305</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>24</index><block>12</block><killingTests/><suspValue>1.0</suspValue><description>replaced access to NaN with an access to INF</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>305</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>24</index><block>12</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced access to NaN with an access to ONE</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>305</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>24</index><block>12</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced access to NaN with an access to ZERO</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>305</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>24</index><block>12</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to field NaN is replaced by access to local this</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>14ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>12</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>12</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>12</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>12</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>12</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>12</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>the access to isNaN is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>13</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to real is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>18</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to imaginary is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>the access to isNaN is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>13</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to real is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>18</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to imaginary is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>the access to isNaN is guarded returning field I</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>13</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to real is guarded returning field I</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>18</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>the access to imaginary is guarded returning field I</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>19</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>47ms</time></test></testsExecutionTime><patchExecutionTime>111ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>305</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced return value with null for org/apache/commons/math3/complex/Complex::reciprocal</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>16</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>21</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>300</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>8</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4082482904638631</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>16</index><block>10</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>21</index><block>11</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>reciprocal</mutatedMethod><methodDescription>()Lorg/apache/commons/math3/complex/Complex;</methodDescription><lineNumber>305</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>mutated return of Object value for org/apache/commons/math3/complex/Complex::reciprocal to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>MethodNameMutator_0</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>MethodNameMutator_0</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(D)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>MethodNameMutator_0</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>MethodNameMutator_0</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(D)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>MethodNameMutator_0</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>MethodNameMutator_0</mutator><index>18</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.toString()Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BIILjava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>MethodNameMutator_4</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>MethodNameMutator_4</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(D)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>MethodNameMutator_4</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>MethodNameMutator_4</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(D)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>MethodNameMutator_4</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>MethodNameMutator_4</mutator><index>18</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.toString()Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BI)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>77ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>16ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>20ms</time></test></testsExecutionTime><patchExecutionTime>73ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>20ms</time></test></testsExecutionTime><patchExecutionTime>67ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>38ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>17ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>14ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>35ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>17ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>20ms</time></test></testsExecutionTime><patchExecutionTime>59ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>24ms</time></test></testsExecutionTime><patchExecutionTime>66ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>24ms</time></test></testsExecutionTime><patchExecutionTime>91ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>122ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>30ms</time></test></testsExecutionTime><patchExecutionTime>120ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>9</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to real is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>14</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to imaginary is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>9</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to real is guarded using field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>14</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to imaginary is guarded using field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>9</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.real is replaced by the call to org.apache.commons.math3.complex.Complex::abs()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>14</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.imaginary is replaced by the call to org.apache.commons.math3.complex.Complex::abs()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>9</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.real is replaced by the call to org.apache.commons.math3.complex.Complex::getImaginary()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>14</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.imaginary is replaced by the call to org.apache.commons.math3.complex.Complex::getImaginary()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>9</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.real is replaced by the call to org.apache.commons.math3.complex.Complex::getReal()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>14</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.imaginary is replaced by the call to org.apache.commons.math3.complex.Complex::getReal()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>9</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.real is replaced by the call to org.apache.commons.math3.complex.Complex::getArgument()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>14</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math3.complex.Complex.imaginary is replaced by the call to org.apache.commons.math3.complex.Complex::getArgument()D</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>9</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced access to real with an access to imaginary</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>14</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced access to imaginary with an access to real</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>8</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>13</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>8</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>13</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>8</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>13</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>8</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>13</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>8</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>13</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>8</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>13</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to java.lang.StringBuilder::append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to java.lang.StringBuilder::append(D)Ljava/lang/StringBuilder; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to java.lang.StringBuilder::append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to java.lang.StringBuilder::append(D)Ljava/lang/StringBuilder; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to java.lang.StringBuilder::append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>18</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to java.lang.StringBuilder::toString()Ljava/lang/String; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>9</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to real is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>14</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to imaginary is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to append(D)Ljava/lang/StringBuilder; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to append(D)Ljava/lang/StringBuilder; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>18</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to toString()Ljava/lang/String; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/StringBuilder::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>19</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced return value with &#34;&#34; for org/apache/commons/math3/complex/Complex::toString</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/StringBuilder::append</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/StringBuilder::append</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/StringBuilder::append</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/StringBuilder::append</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/StringBuilder::append</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>18</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/StringBuilder::toString</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>mutated return of Object value for org/apache/commons/math3/complex/Complex::toString to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to java/lang/StringBuilder::append with receiver</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>10</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to java/lang/StringBuilder::append with receiver</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>12</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to java/lang/StringBuilder::append with receiver</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>15</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to java/lang/StringBuilder::append with receiver</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math3.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>17</index><block>28</block><killingTests>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to java/lang/StringBuilder::append with receiver</description><testsExecutionTime><test><name>org.apache.commons.math3.complex.ComplexTest.testReciprocalZero(org.apache.commons.math3.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
</mutations>
